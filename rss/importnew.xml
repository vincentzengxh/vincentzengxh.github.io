<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>ImportNew - chuansong.me</title><link>http://chuansong.me/account/importnew?start=24</link><description>专注 Java 和 Android 技术分享。ImportNew 由两个 Java 关键字 import 和 new 组成。意指：Java</description><lastBuildDate>Thu, 29 Dec 2016 12:07:08 -0000</lastBuildDate><ttl>1</ttl><item><title>谈谈互联网后端基础设施</title><link>http://chuansong.me/n/1353243025233</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：飒然Hang&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：www.rowkey.me/blog/2016/08/27/server-basic-tech-stack/&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本文更新于2016.12.06,加入了Netflix组件部分&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于一个互联网企业，后端服务是必不可少的一个组成部分。抛开业务应用来说，往下的基础服务设施做到哪些才能够保证业务的稳定可靠、易维护、高可用呢？纵观整个互联网技术体系再结合公司的目前状况，个人认为必不可少或者非常关键的后端基础技术/设施如下图所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.6253547776726585" data-s="300,640" data-type="png" data-w="1057" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRaQ9sdyWrBw7w4HmYD6zlbyujbkTZVKArrhVHTSVxBSURknFNr5zbTibA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这里的后端基础设施主要指的是应用在线上稳定运行需要依赖的关键组件/服务等。开发或者搭建好以上的后端基础设施，一般情况下是能够支撑很长一段时间内的业务的。此外，对于一个完整的架构来说，还有很多应用感知不到的系统基础服务，如负载均衡、自动化部署、系统安全等，并没有包含在本文的描述范围内。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;Api网关&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在移动app的开发过程中，通常后端提供的接口需要以下功能的支持：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;负载均衡&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;api访问权限控制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用户鉴权&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;一般的做法，使用nginx做负载均衡，然后在每个业务应用里做api接口的访问权限控制和用户鉴权，更优化一点的方式则是把后两者做成公共类库供所有业务调用。但从总体上来看，这三种特性都属于业务的公共需求，更可取的方式则是集成到一起作为一个服务，既可以动态地修改权限控制和鉴权机制，也可以减少每个业务集成这些机制的成本。这种服务就是Api网关(http://blog.csdn.net/pzxwhc/article/details/49873623)，可以选择自己实现，也可以使用开源软件实现，如Kong。如下图所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.5071428571428571" data-s="300,640" data-type="png" data-w="560" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRavYJCm6icIvpTIz5ZcOfSQqnjzVvZVjtpZmd1DvicSSjhL7GcIbR8ViapA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;但是以上方案的一个问题是由于所有api请求都要经过网关，它很容易成为系统的性能瓶颈。因此，可以采取的方案是：去掉api网关，让业务应用直接对接统一认证中心，在基础框架层面保证每个api调用都需要先通过统一认证中心的认证，这里可以采取缓存认证结果的方式避免对统一认证中心产生过大的请求压力。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;业务应用和后端基础框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;业务应用分为：在线业务应用和内部业务应用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;在线业务应用：直接面向互联网用户的应用、接口等，典型的特点就是：请求量大、高并发、高可用、对故障的容忍度低。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;内部业务应用：这个是面向公司内部的应用。比如，内部数据管理平台、广告投放平台等。相比起在线业务应用，其特点: 数据保密性高、压力小、并发量小、允许故障的发生。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;业务应用基于后端的基础框架开发，针对Java后端来说，应该有的几个框架如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;MVC框架：从十年前流行的Struts1、2到现在最为推崇的SpringMVC、Jersey以及国人开发的JFinal、阿里的WebX等等，这些框架尤其是后面流行的这些都是各有千秋的。选型的主要因素是看你的团队是否有一个对某框架能够做二次开发、定制的人在。很多时候，针对这些通用的框架，你是需要做一些特定的开发才能满足特定的需求的。比如，很多团队传递参数使用的都是UnderScore的命名法(下划线连接单词)，但是Java中确是使用LowCamel命名的。对于SpringMVC，可以通过注解的alias来指定，但这样需要对每一个参数都要指定alias有点效率太低，此外ModelAttribute也不支持别名，更好的方式是在框架层面统一对参数做Camel命名的转换达到目的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;IOC框架：ioc带来的好处无须多言。目前Java中最为流行的Spring自诞生就天然支持IOC。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ORM框架：MyBatis是目前最为流行的orm框架。此外，Spring ORM中提供的JdbcTemplate也很不错。当然，对于分库分表、主从分离这些需求，一般就需要实现自己的ORM框架来支持了，像阿里的tddl、当当的sharding-jdbc(从datasource层面解决了分库分表、读写分离的问题，对应用透明、零侵入)。此外，为了在服务层面统一解决分库分表、主从分离、主备切换、缓存、故障恢复等问题，很多公司都是有自己的数据库中间件的，比如阿里的Cobar、360的Atlas、网易的DDB，还有官方提供的MySQL Proxy以及开源的MyCat、kingshard和收费的oneproxy。目前，线上有一定规模使用的应该是kingshard，当然如果不缺钱也可以上oneproxy。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;缓存框架：缓存框架主要指的是对redis、memcached这些缓存服务器的操作统一封装，一般使用Spring的RedisTemplate即可，也可以使用jedis做自己的封装，支持客户端分布式方案、主从等。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JavaEE应用性能检测框架：对于线上的JavaEE应用，需要有一个统一的框架集成到每一个业务中检测每一个请求、方法调用、jdbc连接、redis连接等的耗时、状态等。jwebap是一个可以使用的性能检测工具，但由于其已经很多年没有更新，有可能的话建议基于此项目做二次开发。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;一般来说，以上几个框架即可以完成一个后端应用的雏形。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于这些框架来说，最为关键的是根据团队技术构成选择最合适的，有能力开发自己的框架则更好。此外，这里需要提供一个后端应用的模板或生成工具(如maven的archetype)给团队成员使用，可以让大家在开发新的应用的时候，迅速的生成雏形应用，而无需再做一些框架搭建的重复性劳动。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;缓存、数据库、搜索引擎、消息队列&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;缓存、数据库、搜索引擎、消息队列这四者都是应用依赖的后端基础服务，他们的性能直接影响到了应用的整体性能，有时候你代码写的再好也许就是因为这些服务导致应用性能无法提升上去。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;缓存&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如缓存五分钟法则所讲：如果一个数据频繁被访问，那么就应该放内存中。这里的缓存就是一种读写效率都非常高的存储方案，能够应对高并发的访问请求，通常情况下也不需要持久化的保证。但相对其他存储来说，缓存一般是基于内存的，成本比较昂贵，因此不能滥用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;缓存可以分为：本地缓存和分布式缓存。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;本地缓存：主要指的是内存中的缓存机制。在Java中，Google Guava中就提供了本地缓存的实现机制。当然使用java的ConncurrentHashMap你也可以实现自己的本地缓存方案。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分布式缓存：指的单独的缓存服务。几年前比较流行的是memcached，但其只是一个KV的存储，支持的数据结构太少。现在最为流行的就是Redis，能够支持丰富的数据结构，基于事件驱动的单线程非阻塞IO也能够应对高并发的场景。集群方案除了官方的redis cluster, 目前比较流行的还有豌豆荚的codis、twitter的twemproxy。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于缓存的使用，需要注意以下几点：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;缓存的失效机制：当给某一个key设置了有效期，那么缓存何时对此key进行删除呢？一般来说会有以下几种方式：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;守护进程定时去扫描key，找到已经失效的key，然后删除&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;读取key的时候先去判断key是否失效，如果失效则删除并返回空。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;缓存的淘汰机制：是当缓存内存达到上限时如何删除缓存中的key。Redis提供了以下数据淘汰策略：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;volatile-lru：从已设置过期时间的数据集中挑选最近最少使用的数据淘汰&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;volatile-ttl：从已设置过期时间的数据集中挑选将要过期的数据淘汰&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;volatile-random：从已设置过期时间的数据集中任意选择数据淘汰&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;allkeys-lru：从数据集中挑选最近最少使用的数据淘汰&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;allkeys-random：从数据集中任意选择数据淘汰&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;no-enviction（驱逐）：禁止驱逐数据&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于其具体的实现机制，可以参考《Redis设计与实现》一书&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;缓存的更新机制: 通常来说有四种方式：Cache aside, Read through, Write through, Write behind caching，具体的可见陈皓大神的这篇总结：缓存更新的套路。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;缓存的服务过载保护：缓存的服务过载指的是由于缓存失效，而引起后端服务的压力骤增，进一步产生雪崩效应。这个现象和缓存更新是相关的，采取何种策略在缓存失效的时候去更新缓存直接决定了服务过载的保护机制。通常的分为客户端和服务端的应对方案。前者的方案有：基于超时的简单模式、基于超时的常规模式、基于刷新的简单模式、基于刷新的常规模式、基于刷新的续费模式。后者的方案则是很常见的流量控制和服务降级。具体的可以看美团技术团队总结的这篇文章：Cache应用中的服务过载案例研究。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;数据库&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;数据库是后端开发中非常常见的一个服务组件。对于数据库的选型，要根据业务的特点和数据结构的特点来决定。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从存储介质上，数据库可以分为：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;内存数据库： 数据主要存储在内存中，同时也可以采取措施对数据进行持久化到硬盘中。如Redis、H2DB的内存模式。对于这种数据库，由于内存成本昂贵，因此一定要做好存储的量化分析、容量预估，防止内存不足造成服务不可用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;硬盘数据库：数据存储在硬盘上的这种数据库是最为常见的。MySQL、Oracle、Postgresql、HBASE、H2DB、SqlLite等等都是硬盘数据库。此外，SSDB是基于SSD硬盘的KV数据库，支持的数据接口很丰富，是Redis的另外一个选择。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从存储数据类型、数据模式上，数据库可以分为：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;关系型数据库：MySQL、Oracle、Postgresql都是关系型数据库的，是采用关系模型(关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织)来组织数据的数据库。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;非关系型数据库：非关系型数据库是相对关系型数据库来讲的。以键值对存储，且结构不固定，每一个元组可以有不一样的字段，每个元组可以根据需要增加一些自己的键值对，这样就不会局限于固定的结构，可以减少一些时间和空间的开销。但是，其没有关系型数据库那种严格的数据模式，并不适合复杂的查询以及需要强事务管理的业务。非关系型数据库又可以分为：&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;KV数据库：主要以(key,value)键值对存储数据的数据库。以Redis、RocksDB(levelDB)、SSDB为代表。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;文档数据库：总体形式上也是键值对的形式，但是值里面又可以有各种数据结构：数组、键值对、字符串等等。以mongodb、couchdb为代表。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;列数据库：也叫作稀疏大数据库，一般是用来存储海量数据的。相对于行数据库，这种数据库是以列为单位存储数据在介质上的。以Hbase、Cassendra为代表。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;和数据库相关的一个很重要的就是数据库的索引。有一种说法是：“掌握了索引就等于掌握了数据库”。暂且不去评判此说法是否真的准确，但索引的确关系着数据库的读写性能。需要对数据库的索引原理做到足够的了解才能更好的使用各种数据库。通常来说，Mysql、Oracle、Mongodb这些都是使用的B树作为索引，是考虑到传统硬盘的特点后兼顾了读写性能以及范围查找需求的选择，而Hbase用得LSM则是为了提高写性能对读性能做了牺牲。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;&lt;strong&gt;搜索引擎&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;搜索引擎也是后端应用中一个很关键的组件，尤其是对内容类、电商类的应用，通过关键词、关键字搜索内容、商品是一个很常见的用户场景。比较成熟的开源搜索引擎有Solr和Elasticsearch，很多中小型互联网公司搜索引擎都是基于这两个开源系统搭建的。它们都是基于Lucence来实现的，不同之处主要在于termIndex的存储、分布式架构的支持等等。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于搜索引擎的使用，从系统熟悉、服务搭建、功能定制，需要花费较长时间。在这个过程中，需要注意以下问题：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;搜索引擎与公司现有数据系统的集成。现有的持久化、供搜索的数据的载体是什么, 如何让搜索引擎在全量和增量建索引过程中无缝集成原来的数据载体，才能发挥搜索引擎自身的实时性, 水平扩展性(性能与容量和机器数量成正比)等优势。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;和数据库一样，对搜索引擎的索引机制也需要做到深入的了解。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;更为详细的对于搜索引擎的工程化实践可以参考有赞工程师的这篇文章：有赞搜索引擎实践(工程篇)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;另外，搜索引擎还可以用在数据的多维分析上，就是GrowingIO、MixPanel中的可以任意维度查询数据报表的功能。当然，druid也许是一个更好的实现多维分析的方案，官方也有其与es的比较：http://druid.io/docs/latest/comparisons/druid-vs-elasticsearch.html。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;消息队列&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;软件的组织结构，从开始的面向组件到SOA、SAAS是一个逐渐演变的过程。而到了今天微服务盛行的时代，你都不好意思说自己的系统只是单一的一个系统而没有解耦成一个个service。当然，小的系统的确没有拆分的必要性，但一个复杂的系统拆成一个个service做微服务架构确实是不得不做的事情。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;那么问题就来了，service之间的通信如何来做呢？使用什么协议？通过什么方式调用？都是需要考虑的问题。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;先抛开协议不谈，service之间的调用方式可以分为同步调用以及异步调用。同步调用的方式无需多说，那么异步调用是怎么进行的呢？一种很常见的方式就是使用消息队列，调用方把请求放到队列中即可返回，然后等待服务提供方去队列中去获取请求进行处理，然后把结果返回给调用方即可（可以通过回调）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;异步调用就是消息中间件一个非常常见的应用场景。此外，消息队列的应用场景还有以下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;解耦：一个事务，只关心核心的流程，需要依赖其他系统但不那么重要的事情，有通知即可，无须等待结果。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;最终一致性：指的是两个系统的状态保持一致，要么都成功，要么都失败，可以有一定的延迟，只要最终达到一致性即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;广播：这是消息队列最基本的功能。生产者只需要发布消息，无须关心有哪些订阅者来消费消息。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;错峰与流控：当上下游系统处理能力不同的时候就需要类似消息队列的方式做为缓冲区来隔开两个系统。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;目前主流的消息队列软件，主要有以下几种：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;ActiveMQ：Java中最为简单的消息队列，是对JMS的实现，没有规定消息的顺序、安全、重发等特性。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;RabbitMQ：是对AMQP协议的实现，对于消息的顺序性、安全、重发等都做了很好的支持。比较适合不允许数据丢失、有事务需求的业务场景下的消息传输。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Kafka：是基于Log的消息队列，底层依赖于文件的顺序读取，是append-only的。适合对数据丢失不敏感、强调性能的一些海量日志传输场景中。是最近几年大数据领域很火的一个技术。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ZeroMQ：是一个网络编程的Pattern库，将常见的网络请求形式（分组管理，链接管理，发布订阅等）模式化、组件化，简而言之socket之上、MQ之下。对于MQ来说，网络传输只是它的一部分，更多需要处理的是消息存储、路由、Broker服务发现和查找、事务、消费模式（ack、重投等）、集群服务等。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;文件存储&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;不管是业务应用、依赖的后端服务还是其他的各种服务，最终还是要依赖于底层文件存储的。通常来说，文件存储需要满足的特性有：可靠性、容灾性、稳定性，即要保证存储的数据不会轻易丢失，即使发生故障也能够有回滚方案，也要保证高可用率。在底层可以采用传统的RAID作为解决方案，再上一层，目前hadoop的hdfs则是最为普遍的分布式文件存储方案，当然还有NFS、Samba这种共享文件系统也提供了简单的分布式存储的特性。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;此外，如果文件存储确实成为了应用的瓶颈或者必须提高文件存储的性能从而提升整个系统的性能时，那么最为直接和简单的做法就是抛弃传统机械硬盘，用SSD硬盘替代。像现在很多公司在解决业务性能问题的时候，最终的关键点往往就是SSD。这也是用钱换取时间和人力成本最直接和最有效的方式。在数据库部分描述的SSDB就是对LevelDB封装之后，利用SSDB的特性的一种高性能KV数据库。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;至于HDFS，如果要使用上面的数据，是需要通过hadoop的。类似xx on yarn的一些技术就是将非hadoop技术跑在hdfs上的解决方案(当然也是为了使用MR)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;统一认证中心&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;统一认证中心，主要是对app用户、内部用户、app等的认证服务，包括&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;用户的注册、登录验证、token鉴权&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;内部信息系统用户的管理和登录鉴权&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;App的管理，包括app的secret生成，app信息的验证(如验证接口签名)等。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;之所以需要统一认证中心，就是为了能够集中对这些所有app都会用到的信息进行管理，也给所有应用提供统一的认证服务。尤其是在有很多业务需要共享用户数据的时候，构建一个统一认证中心是非常必要的。此外，通过统一认证中心构建移动app的单点登录也是水到渠成的事情(模仿web的机制，将认证后的信息加密存储到本地磁盘中供多个app使用)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;单点登录系统&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;目前很多大的在线web网站都是有单点登录系统的，通俗的来说就是只需要一次用户登录，就能够进入多个业务应用(权限可以不相同)，非常方便用户的操作。而在移动互联网公司中，内部的各种管理、信息系统同样也需要单点登录系统。目前，比较成熟的、用的最多的单点登录系统应该是耶鲁大学开源的CAS, 可以基于https://github.com/apereo/cas/tree/master/cas-server-webapp来定制开发的。此外，国人开源的kisso的这个也不错。基本上，单点登录的原理都类似下图所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;br/&gt;&lt;img data-ratio="0.755741127348643" data-s="300,640" data-type="png" data-w="479" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRax57ZwMneQjANU9OvLxs0tbaian1OD1Owx0NcZrsjYicKThUmsQwGEsCQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;统一配置中心&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在Java后端应用中，一种读写配置比较通用的方式就是将配置文件写在propeties、yaml、HCON文件中，修改的时候只需要更新文件重新部署即可，可以做到不牵扯代码层面改动的目的。统一配置中心，则是基于这种方式之上的统一对所有业务或者基础后端服务的相关配置文件进行管理的统一服务, 具有以下特性：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;能够在线动态修改配置文件并生效&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;配置文件可以区分环境(开发、测试、生产等)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用方便: 在java中可以通过注解、xml配置的方式引入相关配置&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;disconf是可以在生产环境使用的一个方案，也可能根据自己的需求开发自己的配置中心(可以选择zookeeper作为配置存储)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;服务治理框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于外部API调用或者客户端对后端api的访问，可以使用http协议或者说restful(当然也可以直接通过最原始的socket来调用)。但对于内部服务间的调用，一般都是通过RPC机制来调用的。目前主流的RPC协议有：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;RMI&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Hessian&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Thrift&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Dubbo&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这些RPC协议各有优劣点，需要针对业务需求做出相应的最好的选择。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这样，当你的系统服务在逐渐增多，RPC调用链越来越复杂，很多情况下，需要不停的更新文档来维护这些调用关系。一个对这些服务进行管理的框架可以大大节省因此带来的繁琐的人力工作。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;传统的ESB(企业服务总线)本质就是一个服务治理方案，但esb作为一种proxy的角色存在于client和server之间，所有请求都需要经过esb，使得esb很容易成为性能瓶颈。因此，基于传统的esb，更好的一种设计如下图所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.5009009009009009" data-s="300,640" data-type="png" data-w="555" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRaBOUnBbfIogfyXgXnMlDLo3zoNYL4FYG7C3FO7m1rv23seXzjQY8UUA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如图，以配置中心为枢纽，调用关系只存在于client和提供服务的server之间，就避免了传统esb的性能瓶颈问题。对于这种设计，esb应该支持的特性如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;服务提供方的注册、管理&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务消费者的注册、管理&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务的版本管理、负载均衡、流量控制、服务降级等&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务的容错、熔断等&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;阿里开源的dubbo则对以上做了很好的实现，也是目前很多公司都在使用的方案。但由于某些原因，dubbo现已不再维护，推荐大家使用当当后来维护的dubbox。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;统一调度中心&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在很多业务中，定时调度是一个非常普遍的场景，比如定时去抓取数据、定时刷新订单的状态等。通常的做法就是针对各自的业务依赖Linux的cron机制或者java中的quartz。统一调度中心则是对所有的调度任务进行管理，这样能够统一对调度集群进行调优、扩展、任务管理等。azkaban和oozie是hadoop的流式工作管理引擎，也可以作为统一调度中心来使用。当然，你也可以使用cron或者quartz来实现自己的统一调度中心。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;根据cron表达式调度任务&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;动态修改、停止、删除任务&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持任务工作流：比如一个任务完成之后再执行下一个任务&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;任务支持脚本、代码、url等多种形式&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;任务执行的日志记录、故障报警&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于Java的quartz这里需要说明一下：这个quartz需要和spring quartz区分，后者是spring对quartz框架的简单实现也是目前使用的最多的一种调度方式。但其并没有做高可用集群的支持。而quartz虽然有集群的支持，但是配置起来非常复杂。现在很多方案都是使用zookeeper来实现spring quartz集群的。这里有一个国人开源的uncode-shcedule对此实现的还不错，可以根据自己的业务需求做二次开发。此外，当当开源的elastic-job则在此之上又加入了弹性资源利用等更为强大的功能。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;统一日志服务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;日志是开发过程必不可少的东西。有时候，打印日志的时机、技巧是很能体现出工程师编码水平的。毕竟，日志是线上服务能够定位、排查异常最为直接的信息。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;通常的，将日志分散在各个业务中非常不方便对问题的管理和排查。统一日志服务则使用单独的日志服务器记录日志，各个业务通过统一的日志框架将日志输出到日志服务器上。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可以通过实现log4j后者logback的appender来实现统一日志框架，然后通过RPC调用将日志打印到日志服务器上。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;数据基础设施&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;数据是最近几年非常火的一个领域。从《精益数据分析》到《增长黑客》，都是在强调数据的非凡作用。很多公司也都在通过数据推动产品设计、市场运营、研发等。详细的可见之前的一篇《数据杂谈》，对数据相关的东西做过一些总结。这里需要说明的一点是，只有当你的数据规模真的到了单机无法处理的规模才应该上大数据相关技术，千万不要为了大数据而大数据。很多情况下使用单机程序+mysql就能解决的问题非得上hadoop即浪费时间又浪费人力。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这里需要补充一点的是，对于很多公司，尤其是离线业务并没有那么密集的公司，在很多情况下大数据集群的资源是被浪费的。因此诞生了xx on yarn一系列技术让非hadoop系的技术可以利用大数据集群的资源，能够大大提高资源的利用率，如Docker on yarn(Hulu的VoidBox)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;数据高速公路&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;接着上面讲的统一日志服务，其输出的日志最终是变成数据到数据高速公路上供后续的数据处理程序消费的。这中间的过程包括日志的收集、传输。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;收集：统一日志服务将日志打印在日志服务上之后，需要日志收集机制将其集中起来。目前，常见的日志收集方案有：scribe、Chukwa、Kakfa和Flume。对比如下图所示：&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.5882352941176471" data-s="300,640" data-type="png" data-w="544" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRaJv7fPkDeYrnSRyErjfJ8qvmA0O1JiclIB4icsCunx8SBoSicSXLAn2HMA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;传输：通过消息队列将数据传输到数据处理服务中。对于日志来说，通常选择kafka这种消息队列即可。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;此外，这里还有一个关键的技术就是数据库和数据仓库间的数据同步问题，即将需要分析的数据从数据库中同步到诸如hive这种数据仓库时使用的方案。比较简单的、用的也比较多的可以使用sqoop进行基于时间戳的数据同步，此外，阿里开源的canal实现了基于binlog增量同步，更加适合通用的同步场景，但是基于canal你还是需要做不少的业务开发工作的。推荐另一款国人开源的MySQL-Binlog，原理和canal类似，默认提供了任务的后台管理功能，只需要实现接收到binlog后的处理逻辑即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;离线数据分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;离线数据分析是可以有延迟的，一般针对是非实时需求的数据分析工作，产生的也是T-1的报表。目前最常用的离线数据分析技术除了hadoop还有spark。相比hadoop，spark性能上有很大优势，当然对硬件资源要求也高。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于hadoop，传统的MR编写很复杂，也不利于维护，可以选择使用hive来用sql替代编写mr，但是前提务必要对hive的原理做到了解。可以参见美团的这篇博文来学习:Hive SQL的编译过程。而对于spark，也有类似hive的spark sql。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;此外，对于离线数据分析，还有一个很关键的就是数据倾斜问题。所谓数据倾斜指的是region数据分布不均，造成有的结点负载很低，而有些却负载很高，从而影响整体的性能。因此，处理好数据倾斜问题对于数据处理是很关键的。对于hive的数据倾斜，可见:hive大数据倾斜总结。对于spark的倾斜问题，可见：Spark性能优化指南——高级篇。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;实时数据分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;相对于离线数据分析，实时数据分析也叫在线数据分析，针对的是对数据有实时要求的业务场景，如广告结算、订单结算等。目前，比较成熟的实时技术有storm和spark streaming。相比起storm，spark streaming其实本质上还是基于批量计算的。如果是对延迟很敏感的场景，还是应该使用storm。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于实时数据分析，需要注意的就是实时数据处理结果写入存储的时候，要考虑并发的问题，虽然对于storm的bolt程序来说不会有并发的问题，但是写入的存储介质是会面临多任务同时读写的。通常采用的方案就是采用时间窗口的方式对数据做缓冲后批量写入。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;此外，实时数据处理一般情况下都是基于增量处理的，相对于离线来说并非可靠的，一旦出现故障(如集群崩溃)或者数据处理失败，是很难对数据恢复或者修复异常数据的。因此结合离线+实时是目前最普遍采用的数据处理方案。Lambda架构就是一个结合离线和实时数据处理的架构方案。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;数据即席分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;离线和实时数据分析产生的一些报表是给数据分析师、产品经理参考使用的，但是很多情况下，线上的程序并不能满足这些需求方的需求。这时候就需要需求方自己对数据仓库进行查询统计。针对这些需求方，SQL上手容易、易描述等特点决定了其可能是一个最为合适的方式。因此提供一个SQL的即席查询工具能够大大提高数据分析师、产品经理的工作效率。Presto、Impala、Hive都是这种工具。如果想进一步提供给需求方更加直观的ui操作界面，可以搭建内部的Hue。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.49844559585492226" data-s="300,640" data-type="jpeg" data-w="965" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_jpg/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRaCP4DqUZ8DpaBM38xvoicUnewoiaPhgRGwicvAGzBHcIuES4ZpyrBf5QCw/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;故障监控&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于面向用户的线上服务，发生故障是一件很严重的事情。因此，做好线上服务的故障检测告警是一件非常重要的事情。可以将故障监控分为以下两个层面的监控：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;系统监控：主要指的对主机的带宽、cpu、内存、硬盘、io等硬件资源的监控。这可以使用开源的nagios、cacti等开源软件进行监控。目前，市面上也有很多第三方服务能够提供对于主机资源的监控，如监控宝等。对于分布式服务集群(如hadoop、storm、kafka、flume等集群)的监控则可以使用ganglia。此外，小米开源的OpenFalcon也很不错，涵盖了系统监控、JVM监控等，也支持自定义的监控机制。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;业务监控：是在主机资源层面以上的监控，比如app的pv、uv数据异常、交易失败等。需要业务中加入相关的监控代码，比如在异常抛出的地方，加一段日志记录。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;监控还有一个关键的步骤就是告警。告警的方式有很多种：邮件、im、短信等。考虑到故障的重要性不同、告警的合理性、便于定位问题等因素，有以下建议：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;告警日志要记录发生故障的机器id，尤其是在集群服务中，如果没有记录机器id，那么对于后续的问题定位会很困难。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;要对告警做聚合，不要每一个故障都单独进行告警，这样会对工程师造成极大的困扰。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;要对告警做等级划分，不能对所有告警都做同样的优先级处理。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用微信做为告警软件，能够在节省短信成本的情况下，保证告警的到达率。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;故障告警之后，那么最最关键的就是应对了。对于创业公司来说，24小时待命是必备的素质，当遇到告警的时候，需要尽快对故障做出反应，找到问题所在，并能在可控时间内解决问题。对于故障问题的排查，基本上都是依赖于日志的。只要日志打的合理，一般情况下是能够很快定位到问题所在的，但是如果是分布式服务，并且日志数据量特别大的情况下，如何定位日志就成为了难题。这里有几个方案：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;建立ELK(Elastic+Logstash+Kibana)日志集中分析平台，便于快速搜索、定位日志。对于ELK的介绍，可以见：使用Elasticsearch + Logstash + Kibana搭建日志集中分析平台实践&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;建立分布式请求追踪系统(也可以叫全链路监测系统)，对于分布式系统尤其是微服务架构，能够极大的方便在海量调用中快速定位并收集单个异常请求信息，也能快速定位一条请求链路的性能瓶颈。Google的Dapper、唯品会的Mercury、阿里的鹰眼、新浪的WatchMan都是类似的思路。此外，腾讯的染色日志机制本质上也是在链路追踪之上根据响应信息做了染色机制。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;Netflix组件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;近几年Netflix开源了其内部很多的服务：https://github.com/Netflix，包括大数据、构建交付工具、通用运行时服务类库、数据持久化、安全等。里面有一些对应了上面所说的基础设施：&lt;/p&gt;&lt;p&gt;&lt;span style="line-height: 1.6;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="line-height: 1.6;"&gt;1. zuul这是Netflix所有后端服务最前端的一道门，也就是我们上面说的Api网关, 主要包含了以下功能：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="line-height: 1.6;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;认证授权和安全：识别合法的外部请求，拒绝非法的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;监控：跟踪记录所有有意义的数据以便于给我们一个精确的产品视图。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;动态路由：根据需要动态把请求路由到合适的后端服务上。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;压力测试：渐进式的增加对集群的压力直到最大值。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;限流：对每一种类型的请求都限定流量，拒绝超出的请求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;静态响应控制：对于某些请求直接在边缘返回而不转发到后端集群。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;多区域弹性：在aws的多个region中进行请求路由。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style="line-height: 1.6;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="line-height: 1.6;"&gt;2. Eureka是Netflix的服务注册发现服务，类似于dubbo的功能。包括负载均衡和容错。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;3. Hystrixhystrix是一个类库。基于命令模式，实现依赖服务的容错、降级、隔离等。在依赖多个第三方服务的时候非常有用。此外，还可以通过自定义实现dubbo的filter来给dubbo添加hystrix的特性支持。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;此外，Netflix的这些开源组件统称做Netflix oss，现在很火的Spring cloud很多部分都是在这些组件基础上实现的，提供了一整套分布式系统解决方案，涵盖了做分布式微服务需要的服务发现、服务容错、负载均衡、权限控制等。当然，如果你直接选用docker的话，那么K8s本身也提供了这些东西。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;以上是本人实践的一些经验。由于知识有限，难免有纰漏，敬请指出。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1353243025233</guid></item><item><title>MemCache超详细解读</title><link>http://chuansong.me/n/1353243125223</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：五月的仓颉&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：www.cnblogs.com/xrq730/p/4948707.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;MemCache是什么&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;MemCache是一个自由、源码开放、高性能、分布式的分布式内存对象缓存系统，用于动态Web应用以减轻数据库的负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高了网站访问的速度。MemCaChe是一个存储键值对的HashMap，在内存中对任意的数据（比如字符串、对象等）所使用的key-value存储，数据可以来自数据库调用、API调用，或者页面渲染的结果。MemCache设计理念就是小而强大，它简单的设计促进了快速部署、易于开发并解决面对大规模的数据缓存的许多难题，而所开放的API使得MemCache能用于Java、C/C++/C#、Perl、Python、PHP、Ruby等大部分流行的程序语言。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;另外，说一下MemCache和MemCached的区别：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1、MemCache是项目的名称&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2、MemCached是MemCache服务器端可以执行文件的名称&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;MemCache的官方网站为http://memcached.org/&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;MemCache访问模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;为了加深理解，我模仿着原阿里技术专家李智慧老师《大型网站技术架构 核心原理与案例分析》一书MemCache部分，自己画了一张图：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.6543408360128617" data-s="300,640" data-type="png" data-w="622" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRavBhGjCPMA0icclz8LNgtjHBEBCTDfKI99spADkRg9YXo762N6ictJymQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;特别澄清一个问题，MemCache虽然被称为”分布式缓存”，但是MemCache本身完全不具备分布式的功能，MemCache集群之间不会相互通信（与之形成对比的，比如JBoss Cache，某台服务器有缓存数据更新时，会通知集群中其他机器更新缓存或清除缓存数据），所谓的”分布式”，完全依赖于客户端程序的实现，就像上面这张图的流程一样。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;同时基于这张图，理一下MemCache一次写缓存的流程：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1、应用程序输入需要写缓存的数据&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2、API将Key输入路由算法模块，路由算法根据Key和MemCache集群服务器列表得到一台服务器编号&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;3、由服务器编号得到MemCache及其的ip地址和端口号&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;4、API调用通信模块和指定编号的服务器通信，将数据写入该服务器，完成一次分布式缓存的写操作&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;读缓存和写缓存一样，只要使用相同的路由算法和服务器列表，只要应用程序查询的是相同的Key，MemCache客户端总是访问相同的客户端去读取数据，只要服务器中还缓存着该数据，就能保证缓存命中。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种MemCache集群的方式也是从分区容错性的方面考虑的，假如Node2宕机了，那么Node2上面存储的数据都不可用了，此时由于集群中Node0和Node1还存在，下一次请求Node2中存储的Key值的时候，肯定是没有命中的，这时先从数据库中拿到要缓存的数据，然后路由算法模块根据Key值在Node0和Node1中选取一个节点，把对应的数据放进去，这样下一次就又可以走缓存了，这种集群的做法很好，但是缺点是成本比较大。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;一致性Hash算法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从上面的图中，可以看出一个很重要的问题，就是对服务器集群的管理，路由算法至关重要，就和负载均衡算法一样，路由算法决定着究竟该访问集群中的哪台服务器，先看一个简单的路由算法。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;1、余数Hash&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;比方说，字符串str对应的HashCode是50、服务器的数目是3，取余数得到2，str对应节点Node2，所以路由算法把str路由到Node2服务器上。由于HashCode随机性比较强，所以使用余数Hash路由算法就可以保证缓存数据在整个MemCache服务器集群中有比较均衡的分布。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果不考虑服务器集群的伸缩性（什么是伸缩性，请参见大型网站架构学习笔记），那么余数Hash算法几乎可以满足绝大多数的缓存路由需求，但是当分布式缓存集群需要扩容的时候，就难办了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;就假设MemCache服务器集群由3台变为4台吧，更改服务器列表，仍然使用余数Hash，50对4的余数是2，对应Node2，但是str原来是存在Node1上的，这就导致了缓存没有命中。如果这么说不够明白，那么不妨举个例子，原来有HashCode为0~19的20个数据，那么：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.11717495987158909" data-s="300,640" data-type="png" data-w="623" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRaKLaEZR6RTxSNyWh2nicXtfVEN6KgPs4VlbbHlAXcViaeLLXicZVsziaYWw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;现在我扩容到4台，加粗标红的表示命中：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.1157556270096463" data-s="300,640" data-type="png" data-w="622" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRa1j3mtkiaAnh3j5mDEJxOiaN7l06FwQdWZpWfDIlFnyR6iabApzT6DibuKw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果我扩容到20+的台数，只有前三个HashCode对应的Key是命中的，也就是15%。当然这只是个简单例子，现实情况肯定比这个复杂得多，不过足以说明，使用余数Hash的路由算法，在扩容的时候会造成大量的数据无法正确命中（其实不仅仅是无法命中，那些大量的无法命中的数据还在原缓存中在被移除前占据着内存）。这个结果显然是无法接受的，在网站业务中，大部分的业务数据度操作请求上事实上是通过缓存获取的，只有少量读操作会访问数据库，因此数据库的负载能力是以有缓存为前提而设计的。当大部分被缓存了的数据因为服务器扩容而不能正确读取时，这些数据访问的压力就落在了数据库的身上，这将大大超过数据库的负载能力，严重的可能会导致数据库宕机。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这个问题有解决方案，解决步骤为：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;（1）在网站访问量低谷，通常是深夜，技术团队加班，扩容、重启服务器&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;（2）通过模拟请求的方式逐渐预热缓存，使缓存服务器中的数据重新分布&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;2、一致性Hash算法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;一致性Hash算法通过一个叫做一致性Hash环的数据结构实现Key到缓存服务器的Hash映射，看一下我自己画的一张图：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.6571428571428571" data-s="300,640" data-type="png" data-w="595" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRavicsGagg2NmOqHF0VXVCwyZTdnXucicia7xdZib2ib9w33PpVrK8Pu4dJbw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;具体算法过程为：先构造一个长度为232的整数环（这个环被称为一致性Hash环），根据节点名称的Hash值（其分布为[0, 232-1]）将缓存服务器节点放置在这个Hash环上，然后根据需要缓存的数据的Key值计算得到其Hash值（其分布也为[0, 232-1]），然后在Hash环上顺时针查找距离这个Key值的Hash值最近的服务器节点，完成Key到服务器的映射查找。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;就如同图上所示，三个Node点分别位于Hash环上的三个位置，然后Key值根据其HashCode，在Hash环上有一个固定位置，位置固定下之后，Key就会顺时针去寻找离它最近的一个Node，把数据存储在这个Node的MemCache服务器中。使用Hash环如果加了一个节点会怎么样，看一下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.6672384219554031" data-s="300,640" data-type="png" data-w="583" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRaJM9m7EK97kegQ6gTKjyYAHcdpH3sJjIUw4odvObviag3gzkcrrxw7Lw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;看到我加了一个Node4节点，只影响到了一个Key值的数据，本来这个Key值应该是在Node1服务器上的，现在要去Node4了。采用一致性Hash算法，的确也会影响到整个集群，但是影响的只是加粗的那一段而已，相比余数Hash算法影响了远超一半的影响率，这种影响要小得多。更重要的是，集群中缓存服务器节点越多，增加节点带来的影响越小，很好理解。换句话说，随着集群规模的增大，继续命中原有缓存数据的概率会越来越大，虽然仍然有小部分数据缓存在服务器中不能被读到，但是这个比例足够小，即使访问数据库，也不会对数据库造成致命的负载压力。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;至于具体应用，这个长度为232的一致性Hash环通常使用二叉查找树实现，至于二叉查找树，就是算法的问题了，可以自己去查询相关资料。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;MemCache实现原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先要说明一点，MemCache的数据存放在内存中，存放在内存中个人认为意味着几点：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1、访问数据的速度比传统的关系型数据库要快，因为Oracle、MySQL这些传统的关系型数据库为了保持数据的持久性，数据存放在硬盘中，IO操作速度慢&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2、MemCache的数据存放在内存中同时意味着只要MemCache重启了，数据就会消失&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;3、既然MemCache的数据存放在内存中，那么势必受到机器位数的限制，这个之前的文章写过很多次了，32位机器最多只能使用2GB的内存空间，64位机器可以认为没有上限&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;然后我们来看一下MemCache的原理，MemCache最重要的莫不是内存分配的内容了，MemCache采用的内存分配方式是固定空间分配，还是自己画一张图说明：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.521669341894061" data-s="300,640" data-type="png" data-w="623" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRa2QfSjOibVTMGLZNL926rt0VluZ0jqsPaSSnQaRctPrCke6ib0aeTuVJw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这张图片里面涉及了slab_class、slab、page、chunk四个概念，它们之间的关系是：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1、MemCache将内存空间分为一组slab&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2、每个slab下又有若干个page，每个page默认是1M，如果一个slab占用100M内存的话，那么这个slab下应该有100个page&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;3、每个page里面包含一组chunk，chunk是真正存放数据的地方，同一个slab里面的chunk的大小是固定的&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;4、有相同大小chunk的slab被组织在一起，称为slab_class&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;MemCache内存分配的方式称为allocator，slab的数量是有限的，几个、十几个或者几十个，这个和启动参数的配置相关。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;MemCache中的value过来存放的地方是由value的大小决定的，value总是会被存放到与chunk大小最接近的一个slab中，比如slab[1]的chunk大小为80字节、slab[2]的chunk大小为100字节、slab[3]的chunk大小为128字节（相邻slab内的chunk基本以1.25为比例进行增长，MemCache启动时可以用-f指定这个比例），那么过来一个88字节的value，这个value将被放到2号slab中。放slab的时候，首先slab要申请内存，申请内存是以page为单位的，所以在放入第一个数据的时候，无论大小为多少，都会有1M大小的page被分配给该slab。申请到page后，slab会将这个page的内存按chunk的大小进行切分，这样就变成了一个chunk数组，最后从这个chunk数组中选择一个用于存储数据。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果这个slab中没有chunk可以分配了怎么办，如果MemCache启动没有追加-M（禁止LRU，这种情况下内存不够会报Out Of Memory错误），那么MemCache会把这个slab中最近最少使用的chunk中的数据清理掉，然后放上最新的数据。针对MemCache的内存分配及回收算法，总结三点：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1、MemCache的内存分配chunk里面会有内存浪费，88字节的value分配在128字节（紧接着大的用）的chunk中，就损失了30字节，但是这也避免了管理内存碎片的问题&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2、MemCache的LRU算法不是针对全局的，是针对slab的&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;3、应该可以理解为什么MemCache存放的value大小是限制的，因为一个新数据过来，slab会先以page为单位申请一块内存，申请的内存最多就只有1M，所以value大小自然不能大于1M了&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;再总结MemCache的特性和限制&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上面已经对于MemCache做了一个比较详细的解读，这里再次总结MemCache的限制和特性：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1、MemCache中可以保存的item数据量是没有限制的，只要内存足够&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2、MemCache单进程在32位机中最大使用内存为2G，这个之前的文章提了多次了，64位机则没有限制&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;3、Key最大为250个字节，超过该长度无法存储&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;4、单个item最大数据是1MB，超过1MB的数据不予存储&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;5、MemCache服务端是不安全的，比如已知某个MemCache节点，可以直接telnet过去，并通过flush_all让已经存在的键值对立即失效&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;6、不能够遍历MemCache中所有的item，因为这个操作的速度相对缓慢且会阻塞其他的操作&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;7、MemCache的高性能源自于两阶段哈希结构：第一阶段在客户端，通过Hash算法根据Key值算出一个节点；第二阶段在服务端，通过一个内部的Hash算法，查找真正的item并返回给客户端。从实现的角度看，MemCache是一个非阻塞的、基于事件的服务器程序&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;8、MemCache设置添加某一个Key值的时候，传入expiry为0表示这个Key值永久有效，这个Key值也会在30天之后失效，见memcache.c的源代码：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#define REALTIME_MAXDELTA 60*60*24*30&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;static rel_time_t realtime(const time_t exptime) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       if (exptime == 0) return 0;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       if (exptime &amp;gt; REALTIME_MAXDELTA) {                       &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;              if (exptime &amp;lt;= process_started)                         &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                      return (rel_time_t)1;                                 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;              return (rel_time_t)(exptime - process_started);  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       } else {                                                                  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;              return (rel_time_t)(exptime + current_time);     &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个失效的时间是memcache源码里面写的，开发者没有办法改变MemCache的Key值失效时间为30天这个限制&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;MemCache指令汇总&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上面说过，已知MemCache的某个节点，直接telnet过去，就可以使用各种命令操作MemCache了，下面看下MemCache有哪几种命令：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.5782747603833865" data-s="300,640" data-type="png" data-w="626" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRaltxt3cbhibc0lZtQQMrEicNgjKfaBxnSwPqHwaticVKO4Ub965FRQbZ8g/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;stats指令解读&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;stats是一个比较重要的指令，用于列出当前MemCache服务器的状态，拿一组数据举个例子：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT pid 1023&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT uptime 21069937&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT time 1447235954&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT version 1.4.5&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT pointer_size 64&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT rusage_user 1167.020934&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT rusage_system 3346.933170&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT curr_connections 29&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT total_connections 21&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT connection_structures 49&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT cmd_get 49&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT cmd_set 7458&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT cmd_flush 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT get_hits 7401&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT get_misses 57&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;..（delete、incr、decr、cas的hits和misses数，cas还多一个badval）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT auth_cmds 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT auth_errors 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT bytes_read 22026555&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT bytes_written 8930466&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT limit_maxbytes 4134304000&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT accepting_conns 1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT listen_disabled_num 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT threads 4&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT bytes 151255336&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT current_items 57146&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT total_items 580656&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT evicitions 0&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这些参数反映着MemCache服务器的基本信息，它们的意思是：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.8477564102564102" data-s="300,640" data-type="png" data-w="624" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRaBeNTgEwhZw8l6eNnIOa0pTickPIAEZeSLVPqBycEPC39oYichSkicZHZQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.6944" data-s="300,640" data-type="png" data-w="625" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRayriby1wm7uQ9LKfeIhnlNZ4m9CmSKXJljOmvs1icHayyMkia47KKwk0OQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;stats slab指令解读&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果对上面的MemCache存储机制比较理解了，那么我们来看一下各个slab中的信息，还是拿一组数据举个例子：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT1:chunk_size 96&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:chunk_size 144&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:chunks_per_page 7281&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:total_pages 7&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:total_chunks 50967&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:used_chunks 45197&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:free_chunks 1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:free_chunks_end 5769&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:mem_requested 6084638&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:get_hits 48084&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:cmd_set 59588271&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:delete_hits 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:incr_hits 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:decr_hits 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:cas_hits 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 2:cas_badval 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;STAT 3:chunk_size 216&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先看到，第二个slab的chunk_size（144）/第一个slab的chunk_size（96）=1.5，第三个slab的chunk_size（216）/第二个slab的chunk_size（144）=1.5，可以确定这个MemCache的增长因子是1.5，chunk_size以1.5倍增长。然后解释下字段的含义：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.8263665594855305" data-s="300,640" data-type="png" data-w="622" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRaLRHaLdOYzMWOnh9lNyMWMYXMKxtK3xr62uFfvgf8Euh307Uwl3J2fw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;img data-ratio="0.1645367412140575" data-s="300,640" data-type="png" data-w="626" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQx32T1Fqfvo0e0icHicmMovRa1mydKcEVNNfGH3HtHzDEg3O2eCaszhYQwg1c0WaTPoGmkDoia5DibicqQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;看到这个命令的输出量很大，所有信息都很有作用。举个例子吧，比如第一个slab中使用的chunks很少，第二个slab中使用的chunks很多，这时就可以考虑适当增大MemCache的增长因子了，让一部分数据落到第一个slab中去，适当平衡两个slab中的内存，避免空间浪费。 &lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;MemCache的Java实现实例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;讲了这么多，作为一个Java程序员，怎么能不写写MemCache的客户端的实现呢？MemCache的客户端有很多第三方jar包提供了实现，其中比较好的当属XMemCached了，XMemCached具有效率高、IO非阻塞、资源耗费少、支持完整的协议、允许设置节点权重、允许动态增删节点、支持JMX、支持与Spring框架集成、使用连接池、可扩展性好等诸多优点，因而被广泛使用。这里利用XMemCache写一个简单的MemCache客户单实例，也没有验证过，纯属抛砖引玉：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class MemCacheManager&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private static MemCacheManager instance = new MemCacheManager();&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    /** XMemCache允许开发者通过设置节点权&lt;span class="wp_keywordlink"&gt;&lt;a class="external" href="http://www.amazon.cn/gp/product/B0048EKQS0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=importnew-23&amp;amp;linkCode=as2&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0048EKQS0" rel="nofollow" target="_blank" title="重来"&gt;重来&lt;/a&gt;&lt;/span&gt;调节MemCache的负载，设置的权重越高，该MemCache节点存储的数据越多，负载越大 */&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private static MemcachedClientBuilder mcb = &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;            new XMemcachedClientBuilder(AddrUtil.getAddresses("127.0.0.1:11211 127.0.0.2:11211 127.0.0.3:11211"), new int[]{1, 3, 5});&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private static MemcachedClient mc = null;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    /** 初始化加载客户端MemCache信息 */&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    static&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        mcb.setCommandFactory(new BinaryCommandFactory()); // 使用二进制文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        mcb.setConnectionPoolSize(10); // 连接池个数，即客户端个数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        try&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;            mc = mcb.build();&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        catch (IOException e)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;            e.printStackTrace();&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private MemCacheManager()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public MemCacheManager getInstance()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        return instance;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    /** 向MemCache服务器设置数据 */&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public void set(String key, int expiry, Object obj) throws Exception&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        mc.set(key, expiry, obj);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    /** 从MemCache服务器获取数据 */&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public Object get(String key) throws Exception&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        return mc.get(key);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    /**&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;     * MemCache通过compare and set即cas协议实现原子更新，类似乐观锁，每次请求存储某个数据都要附带一个cas值，MemCache&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;     * 比对这个cas值与当前存储数据的cas值是否相等，如果相等就覆盖老数据，如果不相等就认为更新失败，这在并发环境下特别有用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;     */&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public boolean update(String key, Integer i) throws Exception&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        GetsResponse&lt;integer&gt; result = mc.gets(key);&lt;/integer&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        long cas = result.getCas();&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        // 尝试更新key对应的value&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        if (!mc.cas(key, 0, i, cas))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;            return false;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        return true;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1353243125223</guid></item><item><title>推荐系统杂谈</title><link>http://chuansong.me/n/1342403725818</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：飒然Hang&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：www.rowkey.me/blog/2016/08/30/recommend-sys/&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先需要明确的就是推荐系统的目标，一般来说不外乎以下几个：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;用户满意性&lt;/strong&gt;：首当其冲的，推荐系统主要就是为了满足用户的需求，因此准确率是评判一个推荐系统好坏的最关键指标。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;多样性&lt;/strong&gt;：虽然推荐系统最主要还是满足用户的兴趣，但是也要兼顾内容的多样性，对于权重不同的兴趣都要做到兼顾。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;新颖性&lt;/strong&gt;：用户看到的内容是那些他们之前没有听说过的物品。简单的做法就是在推荐列表去掉用户之前有过行为的那些内容。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;惊喜度&lt;/strong&gt;：和新颖性类似，但新颖性只是用户没看到过的但是确实是和他行为是相关的，而惊喜度是用户既没有看过和他之前的行为也不相关，但用户看到后的确是喜欢的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;实时性&lt;/strong&gt;：推荐系统要根据用户的上下文来实时更新推荐内容，用户的兴趣也是随着时间而改变的，需要实时更新。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;推荐透明度&lt;/strong&gt;：对于用户看到的最终结果，要让用户知道推荐此内容的原因。比如，“买过这本书的人同时也买过”、”你购买过的xx和此商品类似”。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;覆盖率&lt;/strong&gt;：挖掘长尾内容也是推荐系统很重要的目标。因此，推荐的内容覆盖到的内容越多越好。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;基于这些目标，推荐系统包括四种推荐方式：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;热门推荐&lt;/strong&gt;：就是热门排行榜的概念。这种推荐方式不仅仅在IT系统，在平常的生活中也是处处存在的。这应该是效果最好的一种推荐方式，毕竟热门推荐的物品都是位于曝光量比较高的位置的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;人工推荐&lt;/strong&gt;：人工干预的推荐内容。相比于依赖热门和算法来进行推荐。一些热点时事如世界杯、nba总决赛等就需要人工加入推荐列表。另一方面，热点新闻带来的推荐效果也是很高的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;相关推荐&lt;/strong&gt;：相关推荐有点类似于关联规则的个性化推荐，就是在你阅读一个内容的时候，会提示你阅读与此相关的内容。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;个性化推荐&lt;/strong&gt;：基于用户的历史行为做出的内容推荐。也是本文主要讲述的内容。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;其中，前三者是和机器学习没有任何关系的，但却是推荐效果最好的三种方式。一般说来，这部分内容应该占到总的推荐内容的80%左右，另外20%则是对长尾内容的个性化推荐。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;个性化推荐系统&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;个性化推荐是机器学习应用的一个典型场景。在本质上和搜索引擎是一样的，同样是为了解决信息过载的问题。搜索引擎某种意义上也是一个个性化推荐系统，但是其输入特征是可以从搜索关键字直接可以得到的。而一般的推荐系统，输入特征则是需要机器学习才能得到。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;个性化推荐系统一般由日志系统、推荐算法、内容展示UI三部分组成。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;日志系统：这是推荐系统的输入源，是一个推荐系统所有信息的源头。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推荐算法：这是推荐系统的核心，根据输入数据得出最终的推荐结果的具体过程就在这里。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;内容展示UI：对于推荐结果如何展示，也是一个值得权衡的地方。以更好地满足推荐系统的目标，并能更好的收集用户的行为信息等。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;其中，个性化推荐中最为核心的推荐算法，目前比较流行的有以下几种：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;基于内容的推荐：根据内容本身的属性(特征向量)所作的推荐。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;基于关联规则的推荐：“啤酒与尿布”的方式，是一种动态的推荐，能够实时对用户的行为作出推荐。是基于物品之间的特征关联性所做的推荐，在某种情况下会退化为物品协同过滤推荐。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;协同过滤推荐：与基于关联规则的推荐相比是一种静态方式的推荐，是根据用户已有的历史行为作分析的基础上做的推荐。可分为物品协同过滤、用户协同过滤、基于模型的协同过滤。其中，基于模型的协同又可以分为以下几种类型：基于距离的协同过滤；基于矩阵分解的协同过滤，即Latent Factor Model(SVD)；基于图模型协同，即Graph，也叫社会网络图模型。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;个性化推荐系统的典型架构如下图所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.40691927512355847" data-type="png" data-w="607" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQxZdPMBvo8XCWqxWGllEpjq6920CI6fotjnKHA4TeH2qpEQWaVwHgZZ0j0Xtwc95RSWJJ5VOhuOAg/0?wx_fmt=png" style=" border-width: 0px; border-style: initial; border-color: initial; font-size: 0px; color: transparent; vertical-align: middle ; ; ; ; ; ; ; ; ; "/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在线业务系统的日志接入数据高速公路，再由数据高速公路迅速运转到离线数据处理平台和在线流计算平台；离线数据处理平台周期性地以批处理方式加工过去一段时间的数据，得到人群标签和其他模型参数，存放在高速缓存中，供在线业务系统使用，与此同时，在线流计算平台实时对线上的日志数据做处理，对离线计算出的数据进行补充、修正等；在线业务系统综合离线特征和在线特征使用一定的逻辑得到输出供业务使用，产生的日志流入数据高速公路。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;基于此框架，个性化推荐系统的典型流程如下所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="1.0190677966101696" data-type="png" data-w="472" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQxZdPMBvo8XCWqxWGllEpjq41bLN7lgelPcS5qAiantTpsXekU1Yz9Z0bDj7OjnLuUb5KWgsRekDcQ/0?wx_fmt=png" style=" border-width: 0px; border-style: initial; border-color: initial; font-size: 0px; color: transparent; vertical-align: middle ; ; ; ; ; ; ; ; ; "/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可知，一个推荐系统主要有以下模块组成：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;用户行为日志：此部分主要是用户行为日志的存储，属于数据统计的一部分, 存储在hive中。在此不做赘述。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据ETL-1：将用户日志转换为推荐算法所需要的数据格式。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推荐算法：是个性化推荐最主要的部分，包括通过用户行为计算相关内容以及推荐结果等。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据ETL-2: 将推荐算法得到的结果进一步加工为存储模块的输入数据。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用户画像存储：存储用户的偏好以及行为数据，如对内容关键字的偏好、点击过哪些内容等。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推荐结果存储：存储各种推荐算法产生的推荐结果，可以分为两部分：{用户 : itemList}推荐结果，为用户推荐的内容列表；{item : itemList}推荐结果，与item相关的内容列表。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务调用模块：整合推荐结构，对外提供提供推荐的调用接口。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;数据ETL-1&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对原始的用户行为等数据进行清洗、加工，如字段、属性、格式化等，作为下一步推荐算法的输入。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;推荐算法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于个性化推荐系统来说，推荐算法应该是其最核心的部分。目前有很多流行的算法，比如：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;基于内容和用户画像的推荐：此种算法，可见之前的一篇文章：http://www.rowkey.me/blog/2016/04/07/up-recommend/。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;基于矩阵分解的推荐: 基于SVD/ALS算法对用户进行内容推荐。相比起SVD，ALS更加适合解决稀疏矩阵的问题。Spark mlib中已经集成了对als算法的实现，需要做的就是在etl-1中把数据转换为als需要的数据格式以及调整als算法的各种参数。这里有一篇文章比较具体地描述了如何使用spark来做基于ALS的推荐：http://colobu.com/2015/11/30/movie-recommendation-for-douban-users-by-spark-mllib/。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用户&amp;amp;物品协同过滤推荐：包括UserBased CF和ItemBased CF。对于这两者，需要根据业务的不同来选择不同的算法。当用户非常多的时候，考虑到维护用户矩阵的成本，一般是不推荐选择用户协同过滤的，而对于候选item很多的时候，则不推荐使用物品协同过滤。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;推荐算法的输出结果一般是一个用户对应一个item列表或者是一个item对应一个item列表。此部分主要考虑的是算法的时间复杂度，不管是哪一种算法，一旦用户或者内容数据上了百万级别，都需要通过分布式计算如MapReduce、Spark等来进行解决。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;推荐算法的基本流程如下图所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="1.0558659217877095" data-s="300,640" data-type="png" data-w="1074" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQxZdPMBvo8XCWqxWGllEpjqrDod8Axia00Oz02scIxzibz7zw7Z8ookicP4SEvQxueltA1n3AbTfc6jA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;&lt;strong&gt;数据ETL-2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对推荐算法产生的结果进行清洗、格式化等，作为下一步存储模块的输入。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;用户画像存储&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;存储用户的偏好以及行为数据等信息。对于偏好，采用标签量化来表示，是一种随着时间衰减的值。对于用户画像，是批量写入、实时读取，所以存储要着重考虑读的性能。可以选择使用Redis集群作为技术方案，能够最大满足读的性能，缺点是Redis的成本昂贵且不支持auto index。也可使用Hbase作为存储，使用ElasricSearch构建二级索引，以应对根据多种维度聚集用户的需求(比如过滤某一个标签下的所有用户)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;推荐结果存储&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对各种推荐算法计算出的推荐结果的存储。存储空间要求大，格式复杂。对于存储的容量和读写性能要求都比较高。可以选择使用Redis集群作为此部分的存储方案。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;服务调用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;整合用户画像和推荐结果两部分数据，向外提供推荐调用的接口。主要是数据库IO调用开销。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;根据用户id，获取推荐的item列表。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据item，获取相关联的item列表。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据用户id, 获取用户画像。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该模块需要采取一定的策略聚合多种推荐算法的推荐结果，直接面向业务。策略由于会随着面向的业务不同而不同，需要可配置化。同时也提供对外暴露用户画像的接口，使得业务方可以使用用户画像做针对性的处理。可以采用RPC机制对外暴露服务接口。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;需要考虑的问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于一个推荐系统，结合其实现目标，还有一些需要注重考虑的问题。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;实时性问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;由于计算用户、item矩阵或者进行矩阵分解是需要离线进行且比较耗时，因此协同的推荐算法是很难达到实时性的。实时部分的推荐主要依靠基于用户画像的推荐来进行。最终的推荐列表是根据一定的策略对这两部分进行聚合的结果。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;时效性内容问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;时效性内容指的是那些与时间强相关的内容，比如新闻、时事等。如果一条10天前xx球员获得冠军的新闻现在被推荐了出来，可想用户肯定是莫名其妙或者是很失望的。因此，对于时效性内容，需要与普通的待推荐的内容区分开，做单独的推荐或者不走个性化推荐。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;冷启动问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;不管使用何种推荐算法，都会面临冷启动问题：当用户是新用户，如何给用户推荐item呢？当内容是新内容，如何推荐给用户？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;对于新用户，可以采取的一种策略就是采用热门推荐或者人工推荐，把绝大多人关心的内容推荐出来。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对于内容，可以将内容分为新内容池和待推荐内容池。新内容产生时，首先进入新内容池。每次推荐的时候，先从新内容池做候选推荐，并给此内容的传播度+1，直到其传播度大于一个阈值的时候，将其移至待推荐内容池。这样既可以解决新内容的冷启动问题也在一定程度上可以保证新内容的曝光量。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;多样性问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在基于用户画像的推荐算法中，取出用户的多个标签，然后根据相关度从不同的标签中取不同数量的内容，这样既兼顾了用户的多种兴趣也能够在一定程度上解决多样性的问题。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如：用户具有tag:A B C D,相关度为wA wB wC wD，Total推荐为总共需要推荐的条数，那么&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;RecommendList(u) = A[Total推荐 * wA] + B[Total推荐 * wB] + C[Total推荐 * wC] + D[Total推荐 * wD]&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;内容质量&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;不管是热门推荐、人工推荐还是取某一标签下的内容列表都牵扯到的一个问题就是：如何给内容排序？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;当用户对内容的喜好不一样，可以按照兴趣度来排序；但当无法区分兴趣度的时候(比如：用户是新用户；内容都是新内容；用户对于某一标签下的内容兴趣度一样)，可以使用内容质量来做排序。click/pv是一种评判内容质量的方式。此外，使用卷积神经网络相关算法也可以构建内容质量模型。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;惊喜问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;推荐系统的惊喜目标一直是一个难题，被称作EE(Exploit &amp;amp; Explore)问题，bandit算法是解决这个问题的一个派系，就是估计置信区间的做法，然后按照置信区间的上界来进行推荐，以UCB、LinUCB为代表的。简单点说就是先不考虑你喜不喜欢就把质量高的内容推荐给你，后面根据用户的行为反馈对推荐内容作调整。具体的可以参见此篇文章：推荐系统的苟且和远方。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;借用推荐系统的那点事一文的几句话做为结语：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;实力派的【算法工程师】往往都是ABC[always be coding]，这样的算法工程师才能根据实际问题建立模型或者建立规则库，是真正能解决问题的人。往往是一些有研究背景，经验丰富的研究员，更加重视工程，因为工程架构上一些恰当合理的设计，效果往往就能远远高过于模型算法优化。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;学院派的【算法工程师】往往是为了算法而算法，而不是为了解决推荐系统的问题去找最适合算法。这也是为什么大公司经常招了一些博士毕业的算法工程师后，不是研究算法而是让他们整天在那看数据报表？【因为发现算法没啥好研究，只能让他们在那看看报表找找规律了。】&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;【几乎所有所谓的智能推荐算法都是花拳绣腿】&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;当一个做推荐系统的部门开始重视【数据清理，数据标柱，效果评测，数据统计，数据分析】这些所谓的脏活累活，这样的推荐系统才会有救。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;以上是推荐系统实践的一些经验。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1342403725818</guid></item><item><title>JavaEE – JPA（7）：ORM的核心注解 – 关系类型</title><link>http://chuansong.me/n/1342403825859</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：dm_vincent&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：blog.csdn.net/dm_vincent/article/details/52877296&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;关系映射的处理绝对是一个JPA应用最为重要的部分之一。关系映射处理的好，不仅仅是建模上的成功，而且在程序性能上也会更胜一筹。关系映射处理的不好很容易造成程序性能底下，各种Bug频繁出现，而且这些Bug通常还会比较隐蔽，总是在关键时刻掉链子。我想这也是为什么很多开发人员说JPA入门容易，精通难得原因之一。因为关系确实不是那么好处理的，不仅需要对业务有相当深刻的见解，更需要对JPA提供的各种关系映射类型有入木三分的理解。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本文就尝试来理一理JPA中的各种关系映射类型。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;关系的基本术语&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在介绍JPA提供的几种关系映射类型之前，有必要先来学习一下关于关系的三个基本术语：角色，方向和基数。这对于理解关系的本质十分有帮助。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;角色(Role)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所谓”一个巴掌拍不响”，一个关系不可能只有一个参与方，而且任何由多个参与方组成的关系必定都可以拆解成两两关系。因此，在这里我们也只考虑由两个参与方所组成的关系。比如我们常见的雇佣关系，就是企业和员工之间的一种关系，那么企业和员工在这层关系中就分别扮演着雇佣者和被雇佣者的角色。而且在现实生活中，一个人是可以同时扮演者多种角色的，比如被雇佣者在家庭中可以作为妻子/丈夫/孩子/父亲/母亲等角色，反映到程序中就是一个实体可以被别的实体所引用，一旦被引用，即代表了关系的建立。被引用的次数越多，那么就表示这个实体所承担的角色就越多。这一点很好理解，比如当Employee实体在Department实体中被引用，表示Employee承担的是部门员工的角色；当Employee实体在Payroll实体中被引用时，就表示Employee此时承担的是薪酬领取者的角色。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;方向(Directionality)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;除了角色之外，方向是关系的另一个要素。关系不会毫无缘由的诞生，总需要有一个角色来打破僵局，建立这层关系。那么主动建立的一方我们可以将其称为源角色(Source Role，简称Source)，而被动响应的一方则可以被称为目标角色(Target Role，简称Target)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;反映到程序中，关系的方向指的就是主动引用，比如我们在Employee类型中引用Department类型，那么就是由Employee指向Department的一层关系，Employee扮演的是Source，Department扮演的是Target。如果在Department类型中也引用了Employee类型，那么就是由Department指向Employee的一层关系，Department扮演的是Source，Employee扮演的是Target。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;因此如果互相引用，那关系就是一个双向关系了。就好比我知道我爸爸是谁，我爸爸也知道我是谁。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;而单向关系在这个世界中其实更多一些，比如我知道马云是谁，而马云肯定不知道我是谁。又或者一个男生暗恋一个女生，这些都是单向关系。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;基数(Cardinality)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;关系的最后一个要素便是基数。所谓的基数实际上描述的是一个很简单的概念，比如法律上的一夫一妻制和一夫多妻制。即参与到关系的两个角色，在数量上的特征。一个部门可以有多个员工，而一个员工通常只属于一个部门。一个学生可以参与到多个社团，而一个社会也可以拥有多个学生作为其成员。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;反映到程序中，就是引用类型是一个单值类型，还是一个集合类型的区别。如果在Employee类型中引用Department类型，通常只会引用声明一个department实体。但是反过来再Department类型中引用其Employee类型的时候，通常会使用一个集合来表示其下所有的Employee。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;关系映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;基础概念介绍完毕，下面开始进入正题。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先，根据关系中目标角色的数量，可以将关系简单分为两种：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;单值映射(Single-Valued Mapping)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;集合映射(Collection-Viewed Mapping)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;单值映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所谓单值映射，就是目标角色的基数(Cardinality)等于1。也就意味着存在两种情况：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一对一(One-to-One)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;典型的例子比如，Employee类型(雇员)和Workspace类型(工位)之间的关系。此时使用JPA提供的@OneToOne注解进行描述：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Employee {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @OneToOne&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @JoinColumn(name="WSPACE_ID")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Workspace workspace;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Workspace {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String location;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上述代码是一对一单向关系的示例代码。其中出现了一个名为@JoinColumn的注解，可以将这个注解理解成外键。而这个外键的列名则是通过@JoinColumn注解中的name属性进行声明。同时，还需要注意的是当@OneToOne和@JoinColumn一起使用的时候，这个外键所在的列实际上还需要满足唯一性的约束。因为每个Workspace的实例实际上是被唯一的一个Employee实例所独占的，所以在该外键列中不可能存在相等的值。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;那么一对一双向关系如何用JPA提供的注解进行声明呢？比如下面这一段代码，Employee不仅引用了Workspace类型，Workspace中也同时引用了Employee类型：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Employee {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @OneToOne&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @JoinColumn(name="WSPACE_ID")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Workspace workspace;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Workspace {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String location;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @OneToOne(mappedBy = "workspace")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Employee employee;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;注意在上述的Workspace类中，也使用了@OneToOne注解来声明一个从Workspace指向Employee的关系。但是这里并没有使用@JoinColumn注解来声明外键的相关信息。也就是说，上述实体类对应的数据库表中并不会含有引用Employee类型的外键列。这是JPA中规定的对于双向一对一关系的映射方式。尤其注意@OneToOne注解中的mappedBy属性，这个属性的值实际上是关系中源角色(Employee)一方引用目标角色(Workspace)一方的引用名称，加入我们把Employee类中的workspace改成ws，那么相应的Workspace类中@OneToOne的mappedBy属性也需要被改成ws。这种定义方式，保证了所定义的双向关系是由参与的两个@OneToOne来完成的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果不考虑规范的话，更加直观地定义双向一对一的方式应该是这样的：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Employee {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @OneToOne&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @JoinColumn(name="WSPACE_ID")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Workspace workspace;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Workspace {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String location;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @OneToOne&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @JoinColumn(name="E_ID")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Employee employee;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种定义方式当然可以，但是这样定义的两个一对一关系之间就没有了联系，它们实际上定义了两个单向的一对一关系。JPA不会认为这两个一对一关系实际上共同构成了一个双向的一对一关系。体现在表结构上，就是在Workspace对应的表结构中，也会有一个外键列用来引用Employee的相应记录。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;因此，如果你希望定义的是一个双向的一对一关系，还是遵守JPA的规范，正确地使用@OneToOne注解及其mappedBy属性和用于定义外键列的@JoinColumn注解吧。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最后补充一点，由于@JoinColumn是用来定义外键关系的，那么拥有该注解的一方可以被称为关系中的所有方(Owning Side)，而被引用的一方则被称为反转方(Inverse Side)。所以如果是定义双向关系的话，在反转方一般就需要使用mappedBy属性了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;多对一(Many-to-One)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;多对一这种关系的例子可谓是随手拈来，比如上文中多次提到的Employee和Department之间的关系，就可以这样描述：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Employee {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @ManyToOne&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @JoinColumn(name="DEPT_ID")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Department department;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;使用@ManyToOne注解来定义一个多对一关系。对于多对一关系而言，它一般需要一个@JoinColumn来帮助定义其对应的外键信息。因此根据上面的定义，多对一关系中的”多”方，总是可以被视为此段关系中的所有方(Owning Side)，而响应的”一”方，在这种情况下可以被视为反转方(Inverse Side)。因此，在上面的例子中，Employee的表结构中就会有一个名为DEPT_ID的列作为引用Department记录的外键列。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;有了”多对一”，相应地就会有”一对多”。这便是我们即将要介绍的关系。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;集合映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所谓集合映射，就是目标角色的基数(Cardinality)大于1。也就意味着存在下面两种情况：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一对多(One-to-Many)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;一对多这种关系一般是不会单独出现的，比如我们只想定义从Department指向Employee的一层关系。假设一个Department实例中引用了五个Employee实例，在程序中使用集合类型来描述这层关系很方便，也没有什么障碍。但是考虑一下换到数据库表结构中，应该如何描述这种结构呢？显然在Department对应的表中是没法描述的，毕竟一行是无法引用多个(并且数量还不定)其它表结构中的记录的。所以一对多一般伴随着多对一作为双向关系出现，而且由于@JoinColumn总是会出现在”多”方，因此我们需要在@OneToMany注解中使用mappedBy属性来声明这一点，毕竟此时的”一”方式反转方(Inverse Side)，在反转方中就需要使用mappedBy属性，这是JPA规范中的一部分。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Department {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @OneToMany(mappedBy="department")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Collection&lt;employee&gt; employees;&lt;/employee&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;那么是不是一定要使用mappedBy来表示这个一对多关系是一个双向关系中的一部分呢？也不一定。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果你只想定义一个单向的一对多关系，那么可以不使用mappedBy属性，此时JPA会推断你想使用联接表(Join Table)来完成关系的定义，虽然这个联接表有其默认的命名规范，但是显式地声明它通常是更明智的方案，比如下面这样：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Department {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @OneToMany&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @JoinTable(name="DEPT_EMP",&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        joinColumns=@JoinColumn(name="DEPT_ID"),&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        inverseJoinColumns=@JoinColumn(name="EMP_ID"))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Collection&lt;employee&gt; employees;&lt;/employee&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;此时，Department和Employee的一对多关系会通过表DEPT_EMP进行管理。@JoinTable注解的joinColumns属性声明了联接表中引用此关系中的所有方的外键列名为DEPT_ID，inverseJoinColumns属性声明了联接表中引用此关系中的反转方的外键名为EMP_ID。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;多对多(Many-to-Many)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;一个简单的多对多的例子是，一个员工可以工作在多个项目中，而一个项目也有多个员工工作在其中：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Employee {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @ManyToMany&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @JoinTable(name="EMP_PROJ",&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        joinColumns=@JoinColumn(name="EMP_ID"),&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        inverseJoinColumns=@JoinColumn(name="PROJ_ID"))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Collection&lt;project&gt; projects;&lt;/project&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Project {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @ManyToMany(mappedBy="projects")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Collection&lt;employee&gt; employees;&lt;/employee&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;很显然，这是一个双向多对多的例子。之所以为双向，主要还是取决于在Project类中声明的@ManyToMany(mappedBy="projects")，如果缺少了这个mappedBy属性的相关定义，那么JPA实现在分析这段代码中出现的两个@ManyToMany的时候，会认为这是两个单向而独立的多对多关系。因此会尝试读取两个联接表：一个是我们显式声明的表EMP_PROJ，另一个则是根据实体类的名字生成的默认联接表Project_Employee。显然生成两个独立的联接表在通常情况下并非我们的目的，所以在使用多对多关系的时候，一定要注意mappedBy属性的声明。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;本系列：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="B0czJc" href="http://chuansong.me/n/1285158525045" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;JavaEE – JPA（1）：事务的基础概念&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="C0czJc" href="http://chuansong.me/n/1289842325845" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;JavaEE – JPA（2）：EJB中的事务管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="D0czJc" href="http://chuansong.me/n/1297265025758" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;JavaEE – JPA（3）：Spring Framework中的事务管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="N0czJc" href="http://chuansong.me/n/1308495725855" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;JavaEE – JPA（4）：EntityManager相关核心概念&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="R0czJc" href="http://chuansong.me/n/1321024925389" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;JavaEE – JPA（5）：ORM的核心注解 – 访问方式，表映射以及主键生成&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a csmlink="X0czJc" href="http://chuansong.me/n/1329852325477" target="_blank"&gt;JavaEE – JPA（6）：ORM的核心注解 – 基础类型以及嵌套类型&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JavaEE – JPA（7）：ORM的核心注解 – 关系类型&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1342403825859</guid></item><item><title>keepalived实现Tomcat服务双机热备</title><link>http://chuansong.me/n/1329852225440</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="white-space: normal; font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal; font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="font-size: 16px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：朱小厮&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：blog.csdn.net/u013256816/article/details/49127995&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;1. 规划&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;1.1服务器环境规划&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;负载服务器master及WEB服务器1真实IP：10.10.195.53&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;负载服务器backup及WEB服务器2真实IP：10.10.195.190&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;负载服务器虚拟ip：10.10.195.212&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;1.2 软件环境规划&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;操作系统：Red Hat Enterprise Linux Server release 5.6 (Tikanga)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;keepalived：keepalived-1.2.19&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Java：jdk-1.7.0_79&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Tomcat：apache-tomcat-7.0.64&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;2. 负载服务器配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这里只叙述如何安装配置keepalived，至于java以及tomcat的安装及配置，这里不赘述。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;2.1 安装keepalived&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[~]tar -zxvf keepalived-1.2.19.tar.gz  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[~] cd keepalived-1.2.19  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] ./configure --prefix=/usr/local/keepalived --disable-fwmark  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#(如果直接输入./configure有可能报错：configure:error: No SO_MARK declaration in essay-headers)  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] make &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] make install&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;2.2 配置keepalived服务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] cp /usr/local/keepalived/sbin/keepalived /usr/sbin/ &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/ &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] mkdir /etc/keepalived &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] cp /usr/local/keepalived/etc/keepalived/keepalived.conf/etc/keepalived/ &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] chkconfig --add keepalived  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[keepalived-1.2.19] chkconfig keepalived on&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;重启\启动\关闭\查看状态keepalived&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;service keepalived restart&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;service keepalived start&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;service keepalived stop&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;service keepalived status&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;2.3 配置keepalived.conf文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[~]mv /etc/keepalived/keepalived.conf/etc/keepalived/keepalived.conf.bak  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[~]vi /etc/keepalived//keepalived.conf&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;主备机的keepalived.conf文件大致相同，只是注意红色标注的地方。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;主机配置：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;global_defs {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   router_id NodeA  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;vrrp_script chk_http_port {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   script "/opt/tomcat.pid"  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   interval 5  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   weight 2  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;vrrp_instance VI_1 {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   state MASTER  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   interface eth0  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   virtual_router_id 52  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   priority 150  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   advert_int 1  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   authentication {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       auth_type PASS  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       auth_pass 1111  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   track_script {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       chk_http_port  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   virtual_ipaddress {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       10.10.195.212  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(136, 136, 136); font-size: 12px;"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;备机配置：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;global_defs {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   router_id NodeB  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;vrrp_script chk_http_port {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   script "/opt/tomcat.pid"  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   interval 5  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   weight 2  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;vrrp_instance VI_1 {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   state BACKUP  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   interface eth0  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   virtual_router_id 52  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   priority 100  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   advert_int 1  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   authentication {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       auth_type PASS  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       auth_pass 1111  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   track_script {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       chk_http_port  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   virtual_ipaddress {  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       10.10.195.212  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;2.4配置/opt/tomcat.pid&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#!/bin/bash  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#description: check tomcat service anddecide whether stop the keepalived or not  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#edited by zzh: 2015-10-14  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;CATALINA_HOME=/users/shr/apache-tomcat-7.0.64  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;JAVA_HOME=/users/shr/util/JavaDir/jdk &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;export CATALINA_HOME  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;export JAVA_HOME  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;ps ax --width=1000 | grep"org.apache.catalina.startup.Bootstrap start" | grep -v"grep" | awk '{printf $1 " "}' | wc | awk '{print $2}' &amp;gt;tomcat_process_count.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;read line &amp;lt; tomcat_process_count.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;start_tomcat=$CATALINA_HOME/bin/startup.sh  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;if [ ${line} -lt 1 ]  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;then &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       echo -n "===Starting tomcat===:" &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       ${start_tomcat}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       # :sudo service tomcat start  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       echo "===tomcat start ok.===" &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       sleep 3  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       # check the tomcat status.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       ps ax --width=1000 | grep "org.apache.catalina.startup.Bootstrapstart" | grep -v "grep" | awk '{printf $1 " "}' | wc |awk '{print $2}' &amp;gt; tomcat_process_count.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       read line2 &amp;lt; tomcat_process_count.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       if [ ${line2} -lt 1 ]  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       then &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                sudo service keepalived stop  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;       fi &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;fi &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;rm tomcat_process_count.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#shell end.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;3. 日志查看&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;3.1 正常启动&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;输入tail -f /var/log/messages查看启动keepalived日志：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;（MASTER：10.10.195.53）&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived[5536]:Starting Keepalived v1.2.19 (09/21,2015)  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shrKeepalived_healthcheckers[5538]: Netlink reflector reports IP 10.10.195.53added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shrKeepalived_healthcheckers[5538]: Netlink reflector reports IP 10.10.195.53added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shrKeepalived_healthcheckers[5538]: Registering Kernel netlink reflector  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shrKeepalived_healthcheckers[5538]: Registering Kernel netlink command channel  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shrKeepalived_healthcheckers[5538]: Opening file'/etc/keepalived/keepalived.conf'.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shrKeepalived_healthcheckers[5538]: Configuration is using : 6572 Bytes  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived[5537]:Starting Healthcheck child process, pid=5538  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_healthcheckers[5538]:Using LinkWatch kernel netlink reflector...  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_vrrp[5539]:Netlink reflector reports IP 10.10.195.53 added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_vrrp[5539]:Netlink reflector reports IP 10.10.195.53 added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived[5537]:Starting VRRP child process, pid=5539  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_vrrp[5539]:Registering Kernel netlink reflector  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_vrrp[5539]:Registering Kernel netlink command channel  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_vrrp[5539]:Registering gratuitous ARP shared channel  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_vrrp[5539]:Opening file '/etc/keepalived/keepalived.conf'.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_vrrp[5539]:Configuration is using : 36541 Bytes  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_vrrp[5539]:Using LinkWatch kernel netlink reflector...  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:16 shr Keepalived_vrrp[5539]:VRRP sockpool: [ifindex(2), proto(112), unicast(0), fd(10,11)]  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:17 shr Keepalived_vrrp[5539]:VRRP_Instance(VI_1) Transition to MASTER STATE  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:17 shr Keepalived_vrrp[5539]:VRRP_Instance(VI_1) Received lower prio advert, forcing new election  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:18 shr Keepalived_vrrp[5539]:VRRP_Instance(VI_1) Entering MASTER STATE  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:18 shr Keepalived_vrrp[5539]:VRRP_Instance(VI_1) setting protocol VIPs.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:18 shr Keepalived_vrrp[5539]:VRRP_Instance(VI_1) Sending gratuitous ARPs on eth0 for 10.10.195.212  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:18 shr Keepalived_vrrp[5539]:Netlink reflector reports IP 10.10.195.212 added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:18 shrKeepalived_healthcheckers[5538]: Netlink reflector reports IP 10.10.195.212added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:49:23 shr Keepalived_vrrp[5539]:VRRP_Instance(VI_1) Sending gratuitous ARPs on eth0 for 10.10.195.212&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;(BACKUP:10.10.195.190)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1 Keepalived[18218]:Starting Keepalived v1.2.19 (09/25,2015)  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_healthcheckers[18220]: Netlink reflector reports IP 10.10.195.190added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_healthcheckers[18220]: Netlink reflector reports IP 10.10.195.190added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_healthcheckers[18220]: Registering Kernel netlink reflector  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_healthcheckers[18220]: Registering Kernel netlink command channel  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1 Keepalived_healthcheckers[18220]:Opening file '/etc/keepalived/keepalived.conf'.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_healthcheckers[18220]: Configuration is using : 6682 Bytes  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1 Keepalived[18219]:Starting Healthcheck child process, pid=18220  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1 Keepalived[18219]:Starting VRRP child process, pid=18221  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_vrrp[18221]: Netlink reflector reports IP 10.10.195.190 added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_vrrp[18221]: Netlink reflector reports IP 10.10.195.190 added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_healthcheckers[18220]: Using LinkWatch kernel netlink reflector...  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_vrrp[18221]: Registering Kernel netlink reflector  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_vrrp[18221]: Registering Kernel netlink command channel  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_vrrp[18221]: Registering gratuitous ARP shared channel  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_vrrp[18221]: Opening file '/etc/keepalived/keepalived.conf'.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1 Keepalived_vrrp[18221]:Configuration is using : 36651 Bytes  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_vrrp[18221]: Using LinkWatch kernel netlink reflector...  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1Keepalived_vrrp[18221]: VRRP_Instance(VI_1) Entering BACKUP STATE  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Sep 29 15:46:25 server1 Keepalived_vrrp[18221]:VRRP sockpool: [ifindex(2), proto(112), unicast(0), fd(10,11)]&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;3.2 主备切换&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;l  当在主机（MASTER：10.10.195.53）中输入 sudoservice keepalived stop，此时就会进行主备切换，主机切换成备机。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;主机（MASTER：10.10.195.53）输出如下&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:25:09 shr Keepalived_vrrp[26683]:VRRP_Instance(VI_1) sending 0 priority  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:25:09 shr Keepalived_vrrp[26683]:VRRP_Instance(VI_1) removing protocol VIPs.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:25:09 shrKeepalived_healthcheckers[26682]: Netlink reflector reports IP 10.10.195.212removed  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:25:09 shr Keepalived[26681]:Stopping Keepalived v1.2.19 (09/21,2015)&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;备机(BACKUP:10.10.195.190)输出如下&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:19:58 server1Keepalived_vrrp[30890]: VRRP_Instance(VI_1) Transition to MASTER STATE  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:19:59 server1Keepalived_vrrp[30890]: VRRP_Instance(VI_1) Entering MASTER STATE  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:19:59 server1Keepalived_vrrp[30890]: VRRP_Instance(VI_1) setting protocol VIPs.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:19:59 server1Keepalived_vrrp[30890]: VRRP_Instance(VI_1) Sending gratuitous ARPs on eth0 for10.10.195.212  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:19:59 server1 Keepalived_healthcheckers[30889]:Netlink reflector reports IP 10.10.195.212 added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:19:59 server1Keepalived_vrrp[30890]: Netlink reflector reports IP 10.10.195.212 added  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:20:04 server1Keepalived_vrrp[30890]: VRRP_Instance(VI_1) Sending gratuitous ARPs on eth0 for10.10.195.212&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;l  当在主机（MASTER：10.10.195.53）中输入sudoservice keepalived start,此时就会切换成主机。备机(BACKUP:10.10.195.190)输出如下信息：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:25:11 server1Keepalived_vrrp[30890]: VRRP_Instance(VI_1) Received higher prio advert  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:25:11 server1Keepalived_vrrp[30890]: VRRP_Instance(VI_1) Entering BACKUP STATE  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:25:11 server1Keepalived_vrrp[30890]: VRRP_Instance(VI_1) removing protocol VIPs.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:25:11 server1Keepalived_healthcheckers[30889]: Netlink reflector reports IP 10.10.195.212removed  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Oct 14 13:25:11 server1Keepalived_vrrp[30890]: Netlink reflector reports IP 10.10.195.212 removed&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;查看虚拟ip&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可以通过ip add show命令查看添加的虚拟ip：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;[shr@shr bin]$ip add show  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;1: lo: &lt;loopback,up,lower_up&gt; mtu16436 qdisc noqueue  &lt;/loopback,up,lower_up&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   inet 127.0.0.1/8 scope host lo  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;2: eth0:&lt;broadcast,multicast,up,lower_up&gt; mtu 1500 qdisc pfifo_fast qlen 1000  &lt;/broadcast,multicast,up,lower_up&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   link/ether 00:0c:29:6b:f2:a8 brd ff:ff:ff:ff:ff:ff  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   inet 10.10.195.53/24 brd 10.10.195.255 scope global eth0  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;   inet 10.10.195.212/32scope global eth0&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;5. 常见错误&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;5.1常见错误一：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;/var/log/messages has thousands of errorslike this:  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Jun 28 09:18:32 rust Keepalived_vrrp:receive an invalid ip number count  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;associated with VRID!  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Jun 28 09:18:32 rust Keepalived_vrrp: bogusVRRP packet received on eth0 !!!  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Jun 28 09:18:32 rust Keepalived_vrrp:VRRP_Instance(VI_1) Dropping received  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;VRRP packet...  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;The backup director starts up, but doesn'tlisten on the virtual addresses  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;at all. Its /var/log/messages has thousands of errors like this:  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Jun 28 06:25:05 stye Keepalived_vrrp:receive an invalid ip number count  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;associated with VRID!  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Jun 28 06:25:05 stye Keepalived_vrrp: bogusVRRP packet received on eth0 !!!  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;Jun 28 06:25:05 stye Keepalived_vrrp:VRRP_Instance(VI_1) ignoring received  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;advertisment...&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;改变配置文件/etc/keepalived/keepalived.conf中virtual_router_id为另一个值即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;（changed the vrid to another number and it worked fine）.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;5.2 常见错误二：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;主机执行到VRRP_Instance(VI_1) Entering BACKUP STATE之后没有执行VRRP_Instance(VI_1)setting protocol VIPs。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可能是配置文件keepalived.conf中{左边没有空格。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;附&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;linux添加tomcat服务&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在/etc/init.d中输入 sudo vim tomcat&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;脚本具体内容如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#!/bin/bash  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#chkconfig: 2345 10 90  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#description: Starts and Stops the tomcatdaemon  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;#edited by ZZH: 2015-10-14  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;CATALINA_HOME=/users/shr/apache-tomcat-7.0.64  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;JAVA_HOME=/users/shr/util/JavaDir/jdk &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;export CATALINA_HOME  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;export JAVA_HOME  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;start_tomcat=$CATALINA_HOME/bin/startup.sh  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;stop_tomcat=$CATALINA_HOME/bin/shutdown.sh  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;if [ ! -f $CATALINA_HOME/bin/catalina.sh ]  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;then &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         echo"===Tomcat is not available.===" &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         exit &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;fi &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;start()  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         echo-n "===Starting tomcat===:" &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         ${start_tomcat}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         echo"===tomcat start ok.===" &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;stop()  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         echo-n "===Shutting down tomcat===:" &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         ${stop_tomcat}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         echo"===tomcat stop ok.===" &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;status()  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         ps ax --width=1000 | grep"org.apache.catalina.startup.Bootstrap start" | grep -v"grep" | awk '{printf $1 " "}' | wc | awk '{print $2}'&amp;gt; tomcat_process_count.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         readline &amp;lt; tomcat_process_count.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         rmtomcat_process_count.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         if[ $line -gt 0 ]  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   then &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                            echo-n "tomcat ( pid = " &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                            ps ax --width=1000 | grep"org.apache.catalina.startup.Bootstrap start" | grep -v"grep" | awk '{printf $1 " "}' | awk '{print $1}'&amp;gt; tomcat_process_pid.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                            readpid &amp;lt; tomcat_process_pid.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                            rmtomcat_process_pid.txt  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                            echo-n $pid  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                            echo-n ") is running..." &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                            echo &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   else &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                            echo"tomcat is stopped" &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         fi &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;case "$1" in &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         start)  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   start  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   ;;  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         stop)  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   stop  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   ;;  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         restart)  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   stop  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   sleep1  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   start  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   ;;  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         status)  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   status  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   ;;  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;         *)  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   echo"Usage:$0 {start|stop|restart}" &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;                   exit1  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;esac  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;exit 0  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;# shell end.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在终端输入:&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span style="color: rgb(136, 136, 136); font-size: 12px;"&gt;sudo chmod 755 tomcat  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(136, 136, 136); font-size: 12px;"&gt;sudo chkconfig --add tomcat&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;tomcat 启动 service tomcatstart&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;tomcat 关闭 service tomcatstop&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;tomcat 重启 service tomcatrestart&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;tomcat状态查看 service tomcatstatus&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1329852225440</guid></item><item><title>JavaEE – JPA（6）：ORM的核心注解 – 基础类型以及嵌套类型</title><link>http://chuansong.me/n/1329852325477</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: justify; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：dm_vincent&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：blog.csdn.net/dm_vincent/article/details/52843078&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;基础类型映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所谓的基础类型映射，实际上就是Java中定义的数据类型应该如何被JDBC转换成数据库所支持的数据类型。而这些基础类型，主要包括了以下9种：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;简单类型：byte，int，short，long，boolean，char，float以及double&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;简单类型对应的包装类型：Byte，Integer，Short，Long，Boolean，Character，Float以及Double&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字节以及字符数组：byte[]，Byte[]，char[]以及Character[]&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;能够表示大数值的类型：java.math.BigInteger以及java.math.BigDecimal&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字符串类型：String&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Java时间类型：java.util.Date以及java.util.Calendar&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JDBC时间类型：java.sql.Date，java.sql.Time以及java.sql.Timestamp&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;枚举类型&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可序列化的对象(Serializable Object)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在Java源代码中，可以使用@Basic来标明某个属性是需要被持久化的。但是这个注解一般而言是可选的，出现在实体类型中的属性默认就是需要被持久化的。而正是因为@Basic注解只能够应用在以上列举的9种类型之上，所以我们将这些类型命名为基础类型，同Basic这个词的意思。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;列映射(Column Mapping)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果说@Basic是一种逻辑映射(Logical Annotation)的话，那么与之相对的@Column便是物理映射(Physical Annotation)。它能够规定属性应该如何被映射成数据库表中的列。一般最常用的就是其中的name属性，它能够规定将数据转换到数据库表中后列的名字。但是，这个注解支持的属性远不止一个name，还有很多：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.7297979797979798" data-type="png" data-w="396" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzcXzCZIK7UILpsbYVogwkPhR2lbPyDCCamn8cBl03KicjJgeCT5ZO6P1Y3EC2Gk2adPPQ4eIjTOxA/0?wx_fmt=png" style=" border-width: 0px; border-style: initial; border-color: initial; font-size: 0px; color: transparent; vertical-align: middle ; ; ; ; ; ; ; ; ; " title=""/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;限于篇幅，就不一一列举了。在需要的时候查阅一下即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;懒加载(Lazy Fetching)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;一般说起懒加载，说的都是在集合映射的一对多或者多对多关系下的懒加载。但是对于基础类型，也是支持懒加载的。这一点恐怕让很多人觉得有点匪夷所思，但是考虑当一个属性的数据量非常巨大的时候(比如下面即将提到的大对象)，懒加载还是有必要的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Basic(fetch=FetchType.LAZY)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Column&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private String article;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;比如上述的article字段的数据量可能特别大，因此使用了懒加载。通过指定@Basic注解上的fetch属性来实现。但是需要注意的是，懒加载的声明对于JPA实现只是一个提示(Hint)，表明应用程序希望使用懒加载，但是JPA实现是否真的会实现还取决于它自身是如何实现的。而且，特别注意并不是所有的场合都适合使用懒加载，如果对一个普通的字符串属性使用懒加载，JPA实现在处理它的时候，还需要额外进行一堆操作，比如为该属性加上代理，当属性被访问的时候由代理发出加载数据的请求等等。这些操作都需要消耗时间，内存等资源。因此，盲目地使用懒加载只会让程序的性能变差。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;大对象(Large Object，LOB)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于JDBC而言，处理拥有大数据量的大对象的方式和处理其它普通对象的方式是有所不同的。因此为了通知JPA实现某个属性是大对象，就需要使用@Lob注解。结合@Basic的懒加载，可以声明如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Employee {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Basic(fetch=FetchType.LAZY)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Lob&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Column(name="PIC")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private byte[] picture;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;@Lob注解本身并不包含任何属性，它的作用正如上面所讨论的那样，只是为了某种标注来通知JPA实现。此类注解也可以被称为标记注解(Marker Annotation)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;枚举类型(Enumerated Type)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我们都知道，枚举类型中有两个比较常用的方法，一个是ordinal()，一个是name()。它们的作用分别是得到枚举值的声明顺序和获取枚举值的声明名称。当枚举类型被映射到数据库表中的时候，默认使用的是ordinal()方法的返回值。如果需要使用name()方法的返回值作为映射后的值，可以使用下面的方式声明：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Enumerated(EnumType.STRING)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private EmployeeType type;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;EnumType还有另一个名为ORDINAL的取值，它是默认值。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;那么，对于枚举类型的映射，一般使用哪种比较好呢？通常而言，使用ORDINAL会更好一些(也就是使用默认选项)。因为这样的存储效率会更高一些，毕竟存储整型值比存储字符串类型的代价会小一些。但是需要注意的是，如果随着应用的功能越来越多，枚举类型的候选值也可能会越来越多，这个时候为了保证以前存储的值的有效性，需要注意新追加的枚举值总是需要被声明为最后一个，从而不会影响到前面已有枚举值的ORDINAL。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;时间类型(Temporal Type)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;谈到时间类型，参与到映射的时间类型实际上有两种：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;Java时间类型：java.util.Date以及java.util.Calendar&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JDBC时间类型：java.sql.Date，java.sql.Time以及java.sql.Timestamp&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对于第二种JDBC的时间类型，不需要任何注解就能完成正确的映射和转换。&lt;/p&gt;&lt;p&gt;对于第一种Java的时间类型，就需要使用一些注解了。主要是为了告知JPA实现在映射和转换时使用哪一种JDBC时间类型(因此，最终还是使用的JDBC时间类型)。通过@Temporal注解来指定：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Temporal(TemporalType.DATE)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private Calendar dob;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Temporal(TemporalType.TIMESTAMP)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private Date startTime;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;TemporalType枚举类型的可选枚举值如下所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.7758241758241758" data-type="png" data-w="455" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzcXzCZIK7UILpsbYVogwkPkWZn2Pr0ibjyMWpZuMusSV8bez0LunHwUdLfnzX7xRC1L5p8F1a6U8Q/0?wx_fmt=png" style=" border-width: 0px; border-style: initial; border-color: initial; font-size: 0px; color: transparent; vertical-align: middle ; ; ; ; ; ; ; ; ; " title=""/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;瞬态属性(Transient State Attribute)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果一个属性它属于某个实体类型，但是在持久化到数据库中的时候，又不需要将它也映射到表结构中，就可以将它设置成”瞬态属性”。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可以通过两种方式实现：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;使用transient关键字&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用@Transient注解&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;至于它俩的区别？那要从transient这个关键字的其它用法说起了。我们都知道transient是Java语言中的一个关键字，它并非为JPA而设计。该关键字最典型意义是当一个对象参与到序列化的过程中时，被transient修饰的字段是不会参与序列化的。知道了这一点，这两种实现方式的区别也就很明确了：被@Transient注解修饰的属性还是会正常参与到序列化过程中，但是被transient关键字修饰的就不会了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;嵌套类型(Embedded Type)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;介绍完了基础类型，再来看看嵌套类型。嵌套类型听起来很高大上的样子，但是实际上你完全可以把它当作几个属性(特别是基础类型)的集合，而这几个属性在逻辑上一般有比较紧密的关系。但是在实际的物理存储中(数据库中)，嵌套类型的字段还是会和其归属实体一起被存储到一张表中。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从上面讨论的特点来看，可以将嵌套类型视为一种独立性不那么强的实体类型，它总是需要依赖于另一个实体类型，不能单独存在。举个例子，地址这种实体概念就非常适合被定义为一个嵌套类型，比如家庭地址，收件地址等等，都拥有共通的几个字段，但是它们通常是属于另外一个实体类型，比如客户这一实体，它就能够拥有家庭地址以及收件地址。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果从UML(统一建模语言)来审视这个概念的话，通常适用于使用嵌套类型来表达的实体类型一般都体现在它能够被”组合(Composition)”到另外一个实体中：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.2647058823529412" data-type="png" data-w="782" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzcXzCZIK7UILpsbYVogwkPt4wZ6UXbBD52skl2tfcfWYJv1rfGF50LO8dB15WlXPm0SLzbn4j6SA/0?wx_fmt=png" style=" border-width: 0px; border-style: initial; border-color: initial; font-size: 0px; color: transparent; vertical-align: middle ; ; ; ; ; ; ; ; ; " title=""/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;解释清除了嵌套类型的存在意义，下面来看看如何声明和使用它。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;声明嵌套类型Address：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Embeddable&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Address {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String street;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String city;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;使用嵌套类型Address：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Employee {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private long salary;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Embedded&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Address address;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Company {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Embedded&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Address address;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;注意@Embeddable和@Embedded这两个注解分别用来声明和使用嵌套类型，不要弄混了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在上述代码中，Employee和Company两个实体类型都使用Address嵌套类型。因此它们两个实体类型所对应的数据库表结构中都会存在Address类型定义的几个属性。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;那么有没有办法修改嵌套类型被映射到表后的属性名称呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;当然也是可以的，通过@AttributeOverrides和@AttributeOverride这两个注解来实现这一需求：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;比如，在Employee类型中，嵌套类型Address的city字段所对应的数据库列名需要被设置成province，street需要被设置成area。可以使用如下的代码实现：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Company {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Embedded&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @AttributeOverrides({&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        @AttributeOverride(name="street", column=@Column(name="area")),&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        @AttributeOverride(name="city", column=@Column(name="province"))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    })&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private Address address;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;本系列：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="qmJbJc" href="http://chuansong.me/n/1285158525045" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;JavaEE – JPA（1）：事务的基础概念&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="smJbJc" href="http://chuansong.me/n/1289842325845" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;JavaEE – JPA（2）：EJB中的事务管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="MmJbJc" href="http://chuansong.me/n/1297265025758" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;JavaEE – JPA（3）：Spring Framework中的事务管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="TmJbJc" href="http://chuansong.me/n/1308495725855" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;JavaEE – JPA（4）：EntityManager相关核心概念&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="WmJbJc" href="http://chuansong.me/n/1321024925389" target="_blank"&gt;JavaEE – JPA（5）：ORM的核心注解 – 访问方式，表映射以及主键生成&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JavaEE – JPA（6）：ORM的核心注解 – 基础类型以及嵌套类型&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1329852325477</guid></item><item><title>为什么你得学些 TCP 的知识？</title><link>http://chuansong.me/n/1321024825338</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="text-align: center; max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="text-align: center; max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="text-align: center; max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 25.6px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;英文：Julia Evans&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14px; color: rgb(136, 136, 136);"&gt;译文：伯乐在线 - 刘晓鹏&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：http://blog.jobbole.com/96231/&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;这不是指要明白 TCP 的所有东西，也不是说要通读 《TCP/IP 详解》。不过懂一点 TCP 知识是很有必要的。理由如下：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;当我还在 Recurse Center 的时候，我用 Python 写过 TCP 协议栈（还写过一篇文章：如果你用 Python 写 TCP 协议栈会遇到什么？）。这是一次有趣的学习经历，但是也仅此而已。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一年以后，工作中有人在 Slack 上提到：“嘿，我在向 NSQ 发布消息时，每次要耗费 40 毫秒”。我已经断断续续思考了一个星期，但是没有任何结果。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一点背景知识：NSQ 是一个消息队列，你通过本地的一个 HTTP 请求向其发布消息。发送本地的一个 HTTP 请求确实不应该花费 40 毫秒，有时候会更差。NSQ 守护进程的负载不高，也没有使用过多的内存，也看不到 GC 停顿。这究竟是为什么呢？神呐，救救我吧！&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;突然我记起我一周以前看过的一篇叫做“性能研究（In search of performance）”的文章——我们如何为每个 POST 请求节省 200ms。在这篇文章中，他们说到为什么每个 POST 请求会花费额外的 200 毫秒。就是这个原因。这是该文章中的关键段落：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 0, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;延迟确认（ACK） 与 TCP_NODELAY&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Ruby 的 Net::HTTP 会将 POST 请求切分为两个 TCP 包，一个消息头，一个消息体。相反，curl 会将这两者合并为一个包。更糟糕的是，Net::HTTP 在打开 TCP 套接字时不会设置 TCP_NODELAY，这将导致第二个包需要等到第一个包的接收确认通知之后才能发送。这是 Nagle 算法导致的。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;转换到连接的另一端，HAProxy 需要决定如何确认这两个包。在 1.4.18 版本中（我们正在用的版本），它是通过 TCP 延迟确认通知来实现的。延迟确认对 Nagle 算法有非常糟糕的影响，会导致请求暂停直到服务器延迟确认超时。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;现在我们解释这个段落说的内容。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;TCP 是一个通过数据包传输数据的算法&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;他们的 HTTP 库将 POST 请求分割成两个小的数据包发送&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;接下来，TCP 采用类似如下的步骤进行交互：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;application：Hi！这里有一个数据包。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;HAProxy：（沉默），等待第二个包发送&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;HAProxy：对了，我需要返回一个确认，不过没关系，等会吧&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;application: （沉默）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;application：好吧，我正在等待确认，可能现在网络延迟比较大&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;HAProxy：好吧，太烦人了，这是一个确认。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;application：好极了，这是第二个数据包！！！&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(172, 57, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;HAProxy：亲，我们已经搞定了。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;这个过程是不是应用程序和 HAProxy 都在消极等待另一方发送信息？这就是那额外的 200ms。应用程序这么做的是因为 Nagle 算法，而 HAProxy 消息等待的原因是延迟确认。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;据我所知，延迟确认是所有 Linux 系统的默认行为。所以这不是一个偶然或者异常情况，如果发送 TCP 数据包多一个 1 个，你就会遇到这种情况。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 0, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;现在，我们成为专家了&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;读过这篇文章之后我很快就忘了。不过当我被额外的 40 毫秒难住的时候，我又记起来了。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;所以我认为——这不可能是我的问题，可能吗？可能吗？？然后我发了一封邮件给我团队说：“我想我快要疯了，但是这可能是 TCP 的问题”。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;所以我提交了一次修订，将我的应该调整为 TCP_NODELAY，然后问题就“嘣”的一声解决了。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;40 毫秒的延迟立马就消失了。所有的事情都解决了，我就是个天才。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 0, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;我们是否应该完全停止使用延迟确认？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;我刚好在 Hacker News 看到 John Nagle （Nagle 算法的创始人）对 @alicemazzy 提到这个问题的评论。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;本质问题是延迟确认。200 毫秒的“延迟确认”是一个非常不好的主意，1985 年中，在伯利克（Berkeley）研究 BSD 的人实际上没有真正明白这个问题。延迟确认是应用层对 200 毫秒内是否响应的一场赌博，但是即便每次它都赌输了，TCP 仍在使用延迟确认。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;他继续说到，确认本身是很小并且消耗很低的，延迟确认引起的问题可能比它解决的问题还要多。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 0, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;不懂得 TCP 你就无法解决 TCP 问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;我曾经也认为，TCP 是一个相当底层的问题，我不需要明白。大多数时候你的确不需要明白。但是有的时候，当你在实践中遇到由于 TCP 算法引起的 bug 时，懂点 TCP 知识就变得非常重要了。（正如我们经常在博客中讨论的，许多事情都是这样，比如系统调用和操作系统:) ）&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;延迟确认及 TCP_NODELAY 的交互非常不好——这对任何语言实现的 HTTP 请求都有影响。你不需要很深入的去了解，成为系统程序专家。但是了解一点 TCP 是如何运作的，对我的工作的确大有裨益。通过对 TCP 的学习，我才意识到这篇博客所描述的问题也许正好是我所熟悉的领域。我也一直在使用 strace，并且会一直使用下去。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1321024825338</guid></item><item><title>JavaEE – JPA（5）：ORM的核心注解 – 访问方式，表映射以及主键生成</title><link>http://chuansong.me/n/1321024925389</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: justify; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：dm_vincent&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：blog.csdn.net/dm_vincent/article/details/52695373&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;&lt;strong&gt;注解种类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在探讨实现JPA中各种映射的方式之前，可以先看看JPA中的注解类型。&lt;/p&gt;&lt;p&gt;由于ORM这一机制涉及到了两个方面：对象(内存模型)以关系数据(关系型数据库)。而显然我们在配置ORM的各种规则时，只能在Java程序中完成。数据库是不知道有JPA这种机制存在的，数据库只是单纯的执行输入的各种SQL语句而已。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;因此，我们可以将JPA中的注解笼统地分为两种类型：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;逻辑关系注解(Logical Annotation)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;物理关系注解(Physical Annotation)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所谓的逻辑关系注解，就是声明ORM中的O方，也就是对象实体模型的一些元数据。比如@Basic注解，它能够规定基本类型的加载方式，即正常加载(Eager)还是懒加载(Lazy)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所谓的物理关系注解，就是声明ORM中的R方，也就是关系模型中的一些元数据。比如@Column注解，它能够规定一个字段应该被映射到数据库表中的哪个列。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;访问实体状态的方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;只有实体类型(被标注为@Entity的Java类)才能够通过JPA和数据库中的记录进行互相转换。那么在转换的过程中，JPA的实现必然需要对实体类型进行操作。比如在将实体保存到数据库中的时候，JPA的实现需要通过某种方式访问到实体的状态；在将数据库中查询得到的行记录转换成实体对象的时候，JPA的实现需要设置实体的状态。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在JPA中，两种方式完成实体状态的访问：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;通过Field&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过Property(也就是Getter/Setter)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;通过Field&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;采用这种方式，JPA实现会通过反射的方法来对实体对象的字段进行操作。即使你提供了Getter/Setter，也不会使用它们。那么如何定义试用这种方式呢？通过@Id注解：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Person {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上述代码中，将@Id放在了Field之上。JPA实现根据这一点决定采用基于Field来访问实体状态的方式。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;通过Property(Getter/Setter)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;采用这种方式，JPA时限会通过调用Getter/Setter来对实体对象的字段进行操作。还是一样，通过@Id注解来定义：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Person {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public int getId() { return id; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public void setId(int id) { this.id = id; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public String getNickname() { return nickname; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public void setNickname(String nickname) { this.name = nickname; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;此时将@Id放在了Getter上。另外，还注意到在访问name字段的时候，使用的Getter和Setter的方法名称分别是getNickname以及SetNickname。因此在数据库表中使用的列名实际上是nickname，而非实体类中的字段名称name。但是这并不是说在基于Field的访问方式中不能做到字段名和列名不同，通过@Column显式定义即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;混合模式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果混合使用了Field和Property的访问方式，就是所谓的混合模式。通过@Access注解进行指定，这是JPA2.0之后添加的新功能。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;利用它，可以完成一些从数据表列到实体字段之间基本的转换操作。比如下面这个例子：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Entity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Access(AccessType.FIELD)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public class Employee {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public static final String LOCAL_AREA_CODE = "613";&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private int id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Transient&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    private String phoneNum;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public int getId() { return id; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public void setId(int id) { this.id = id; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public String getPhoneNumber() { return phoneNum; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public void setPhoneNumber(String num) { this.phoneNum = num; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Access(AccessType.PROPERTY) &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    @Column(name="PHONE")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    protected String getPhoneNumberForDb() {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        if (phoneNum.length() == 10)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;            return phoneNum;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        else&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;            return LOCAL_AREA_CODE + phoneNum;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    protected void setPhoneNumberForDb(String num) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        if (num.startsWith(LOCAL_AREA_CODE))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;            phoneNum = num.substring(3);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        else&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;            phoneNum = num;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;        }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;通过上述代码来讨论一下使用混合访问模式的几个条件：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;在类声明上使用@Access(AccessType.FIELD)来表明此类是基于字段的访问方式。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在Getter方法使用@Access(AccessType.PROPERTY)来表明此字段是基于Getter的访问方式。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在上面的代码中，实现了一些实体字段和数据库列的简单转换。比如，在上述代码中：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;@Transient&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;private String phoneNum;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;@Access(AccessType.PROPERTY) &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;@Column(name="PHONE")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;protected String getPhoneNumberForDb() {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;    if (phoneNum.length() == 10)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;        return phoneNum;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;    else&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;        return LOCAL_AREA_CODE + phoneNum;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;protected void setPhoneNumberForDb(String num) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;    if (num.startsWith(LOCAL_AREA_CODE))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;        phoneNum = num.substring(3);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;    else&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;        phoneNum = num;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在数据库中保存的列名为PHONE。并且在Getter和Setter中都实现了一些简单的转换逻辑。在实体类中，实际用来保存数据的字段名为phoneNum。而为了防止该字段也被映射到数据库表中，还特意使用了@Transient来表明此字段应该被JPA实现所忽略。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;表映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;为完成实体类型到数据库表结构的映射，最少只需要使用两个注解：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;@Entity&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;@Id&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所有的其它配置都会使用默认值。比如数据库表名，如果不指定的话，默认使用的就是实体类型的名称，比如上面的Employee类型，映射的数据库表名即为Employee。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果需要指定表名，则需要使用@Table注解，@Table除了支持表名的指定外，还支持schema以及catalog的指定。当然，每种数据库对它们的支持都有所不同。下面列举了几种主流数据库的支持情况：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.3143544506816359" data-s="300,640" data-type="png" data-w="1247" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzA1lCaU5P6rBX8OA1MH4hY3wn8cbvEcXIAcz1E1nBict0pu3JH7ZeEhf93JCxU8IocIkGUGcx7j8A/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所以，即使JPA规范中能够支持catalog和schema，但是由于每种数据库的实现都有所不同，因此在应用中如果依赖它们，会造成应用和某种具体的数据库绑定在一起。幸运的是，需要应用能够自由灵活地在多种数据库之间切换这种需求并不会十分常见。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;比如，如果你的应用需要访问两个数据库，那么在使用MySQL时，就能够通过指定schema来实现。当然，这两个数据库还是需要使用相同的连接字符串。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;主键映射以及生成策略&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先，主键在数据库中的列名可以通过@Column进行指定。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;主键的数据类型有一些限制，我们通常使用长整型(long)来表示主键。但是除此之外，下面的数据类型也是可以的：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;简单类型：byte，int，short，long，char&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;相应的包装类型：Byte，Integer，Short，Long，Character&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字符串类型：String&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;时间类型：Date&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;主键的生成策略通过@GeneratedValue这个注解来声明。总的来说，可以分为下面两种类型：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;预先分配&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;持久化时分配&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;具体而言，又分为了下面四种类型：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;AUTO&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TABLE&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SEQUENCE&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;IDENTITY&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这几种类型都作为@GeneratedValue注解中strategy属性的值，比如：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@GeneratedValue(strategy = GenerationType.AUTO)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private Long id;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;生成策略之AUTO&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这是默认的生成策略。当应用程序不关心主键要如何生成，只需要确保能够拥有主键时，可以考虑使用这种方式。因此当JPA的实现遇到这种主键生成策略时，会自行选择使用哪一种。即TABLE，SEQUENCE以及IDENTITY中的一种。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;生成策略之TABLE&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方式旨在提供一种和具体数据库无关的主键生成策略。顾名思义，这种方式使用一张数据库表来完成主键的生成。这张表中应该有两列，一列的类型为字符串，表明生成器的名字，它也是这张表中的主键。另一列的类型应该是一个整型，它用来记录最后分配过的数值：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@TableGenerator(name = "Emp_Gen", table = "ID_GEN", pkColumnName = "GEN_NAME", valueColumnName = "GEN_VAL")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@GeneratedValue(strategy = GenerationType.TABLE, generator = "Emp_Gen")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private Long id;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上述代码，声明了用于生成主键的表名为ID_GEN，表中的GEN_NAME列用来保存生成器的名字，即上述Emp_Gen，GEN_VAL用来保存最后分配过的主键值。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;因此，可以推断出ID_GEN的结构可以是这样的：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.11182622687047465" data-s="300,640" data-type="png" data-w="1243" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzA1lCaU5P6rBX8OA1MH4hY5oOyOeibqKxHzvlvpic9DeSBuBIlm8Pz5fvcHCqiaN8DjNmhZWxMMBwyQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上述Emp_Gen生成器的GEN_VAL为0表示当前还没有分配过主键。如果在生成这个表的事后希望给GEN_VAL一个初始值，还可以试用initialValue属性进行指定。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;为了避免频繁更新ID_GEN表中的记录，可以试用allocationSize来声明需要预分配多少个主键。它的默认值是50，这表示应用程序可以最多分配50个主键后才需要再次访问和更新ID_GEN表。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;比如下面的定义：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@TableGenerator(name="Address_Gen", table="ID_GEN", pkColumnName="GEN_NAME", valueColumnName="GEN_VAL", pkColumnValue="Addr_Gen", initialValue=10000, allocationSize=100)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@GeneratedValue(generato&lt;/span&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;r="Address_Gen")&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private int id;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;就是一份完整的声明。此时的ID_GEN表的结构如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.1630695443645084" data-s="300,640" data-type="png" data-w="1251" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzA1lCaU5P6rBX8OA1MH4hYeAiafHHtYg923hKyAcoIaou97wn5c2EggxBBJoWg3BFicK6ws6o3Ykicw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;另外，如果没有使用结构自动生成(Schema Generation)这一特性，那么还需要保证该表的存在：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;CREATE TABLE id_gen (&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    gen_name VARCHAR(80),&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    gen_val INTEGER,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    CONSTRAINT pk_id_gen&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    PRIMARY KEY (gen_name)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;INSERT INTO id_gen (gen_name, gen_val) VALUES ('Emp_Gen', 0);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;INSERT INTO id_gen (gen_name, gen_val) VALUES ('Addr_Gen', 10000);&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;生成策略之SEQUENCE&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;和使用TABLE的生成策略类似，最好指定清楚所使用的SEQUENCE的名字：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@SequenceGenerator(name="Emp_Gen", sequenceName="Emp_Seq")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@GeneratedValue(generator="Emp_Gen")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private int id;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;同样地，在没有开启结构自动生成时，需要保证序列是存在的：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;CREATE SEQUENCE Emp_Seq&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    MINVALUE 1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    START WITH 1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    INCREMENT BY 50&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;需要注意的是并不是所有的数据库都支持SEQUENCE这一特性，目前支持该特性的数据库有： Oracle、PostgreSQL、DB2。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;生成策略之IDENTITY&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;常使用MySQL的开发人员肯定知道自增列这一特性，这其实就是IDENTITY这种生成策略所依赖的关键特性。这种策略并非像TABLE和SEQUENCE那样会预分配一段可用的主键，它生成的主键只有在数据Commit之后才会可见。因此在采用该生成策略时，对于未被托管的实体对象而言，其主键通常都是不可用的。JPA实现需要在完成实体的持久化之后再次读取该记录，以此来获取被数据库分配的主键信息。该策略的配置方法如下所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@Id&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@GeneratedValue(strategy=GenerationType.IDENTITY)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private int id;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;需要注意的是并不是所有的数据库都支持IDENTITY这一特性，目前支持该特性的数据库有： MySQL, SQL Server, DB2, Derby, Sybase, PostgreSQL。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;本系列：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;a csmlink="CF1KJc" href="http://chuansong.me/n/1285158525045" target="_blank"&gt;JavaEE – JPA（1）：事务的基础概念&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a csmlink="DF1KJc" href="http://chuansong.me/n/1289842325845" target="_blank"&gt;JavaEE – JPA（2）：EJB中的事务管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a csmlink="NF1KJc" href="http://chuansong.me/n/1297265025758" target="_blank"&gt;JavaEE – JPA（3）：Spring Framework中的事务管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a csmlink="RF1KJc" href="http://chuansong.me/n/1308495725855" target="_blank"&gt;JavaEE – JPA（4）：EntityManager相关核心概念&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JavaEE – JPA（5）：ORM的核心注解 – 访问方式，表映射以及主键生成&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1321024925389</guid></item><item><title>单点登录原理与简单实现</title><link>http://chuansong.me/n/1308495525833</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="white-space: normal; font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal; font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="font-size: 16px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：凌承一&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：www.cnblogs.com/ywlaker/p/6113927.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一、单系统登录机制&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1、http无状态协议&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;web应用采用browser/server架构，http作为通信协议。http是无状态协议，浏览器的每一次请求，服务器会独立处理，不与之前或之后的请求产生关联，这个过程用下图说明，三次请求/响应对之间没有任何联系&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="0.9681093394077449" data-type="png" data-w="439" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZhiaWTpr4MTia9dkrfwvdFkQ6RasA6yEwicic8z31lxxN2eNhUP8PFFNicFOw/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; width: auto !important; visibility: visible !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;但这也同时意味着，任何用户都能通过浏览器访问服务器资源，如果想保护服务器的某些资源，必须限制浏览器请求；要限制浏览器请求，必须鉴别浏览器请求，响应合法请求，忽略非法请求；要鉴别浏览器请求，必须清楚浏览器请求状态。既然http协议无状态，那就让服务器和浏览器共同维护一个状态吧！这就是会话机制&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2、会话机制&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;浏览器第一次请求服务器，服务器创建一个会话，并将会话的id作为响应的一部分发送给浏览器，浏览器存储会话id，并在后续第二次和第三次请求中带上会话id，服务器取得请求中的会话id就知道是不是同一个用户了，这个过程用下图说明，后续请求与第一次请求产生了关联&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important; text-align: center;"&gt;&lt;img class="" data-ratio="0.9236947791164659" data-type="png" data-w="498" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZhEKHNCNdS79E2B5gQqQsib79ouHlNRFA5BGBxg3Qfesv7xBqBcpEGSmA/0?" style="height: 460px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 498px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;服务器在内存中保存会话对象，浏览器怎么保存会话id呢？你可能会想到两种方式&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;请求参数&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;cookie&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;将会话id作为每一个请求的参数，服务器接收请求自然能解析参数获得会话id，并借此判断是否来自同一会话，很明显，这种方式不靠谱。那就浏览器自己来维护这个会话id吧，每次发送http请求时浏览器自动发送会话id，cookie机制正好用来做这件事。cookie是浏览器用来存储少量数据的一种机制，数据以”key/value“形式存储，浏览器发送http请求时自动附带cookie信息&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;tomcat会话机制当然也实现了cookie，访问tomcat服务器时，浏览器中可以看到一个名为“JSESSIONID”的cookie，这就是tomcat会话机制维护的会话id，使用了cookie的请求响应过程如下图&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="0.9218436873747495" data-type="png" data-w="499" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZh1EuY9zVSicTibpOJDWtof5pI5WRsWY9LNePdYZVpQ1ApCKIibt5iccIXkg/0?" style="height: 460px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 499px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;3、登录状态&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;有了会话机制，登录状态就好明白了，我们假设浏览器第一次请求服务器需要输入用户名与密码验证身份，服务器拿到用户名密码去数据库比对，正确的话说明当前持有这个会话的用户是合法用户，应该将这个会话标记为“已授权”或者“已登录”等等之类的状态，既然是会话的状态，自然要保存在会话对象中，tomcat在会话对象中设置登录状态如下&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpSession &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;request&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;getSession&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;setAttribute&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"isLogin"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;true&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;用户再次访问时，tomcat在会话对象中查看登录状态&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpSession &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;request&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;getSession&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;getAttribute&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"isLogin"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;实现了登录状态的浏览器请求服务器模型如下图描述&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="0.9421052631578948" data-type="png" data-w="570" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZhk87NYfwicejkPtk4uv4Yiadxoxxb52w863Lc13LB0KZO8rWFymNibZZAw/0?" style="height: 537px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 570px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;每次请求受保护资源时都会检查会话对象中的登录状态，只有 isLogin=true 的会话才能访问，登录机制因此而实现。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;二、多系统的复杂性&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;web系统早已从久远的单系统发展成为如今由多系统组成的应用群，面对如此众多的系统，用户难道要一个一个登录、然后一个一个注销吗？就像下图描述的这样&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="1.3483870967741935" data-type="png" data-w="310" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZh0TzUicMnAPSAZXsXMIxPVZFe3skf964lyIsD4bvBslhLm3zzU9hpKLg/0?" style="height: 418px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 310px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;web系统由单系统发展成多系统组成的应用群，复杂性应该由系统内部承担，而不是用户。无论web系统内部多么复杂，对用户而言，都是一个统一的整体，也就是说，用户访问web系统的整个应用群与访问单个系统一样，登录/注销只要一次就够了&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="1.2912087912087913" data-type="png" data-w="364" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZhRUq7IxK16ZKibUDhMmwLnvl4qjUmtibJQ2FQnoM8OPCoMaPfvjViaEVkg/0?" style="height: 470px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 364px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;虽然单系统的登录解决方案很完美，但对于多系统应用群已经不再适用了，为什么呢？&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;单系统登录解决方案的核心是cookie，cookie携带会话id在浏览器与服务器之间维护会话状态。但cookie是有限制的，这个限制就是cookie的域（通常对应网站的域名），浏览器发送http请求时会自动携带与该域匹配的cookie，而不是所有cookie&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important; text-align: center;"&gt;&lt;img class="" data-ratio="0.6814310051107325" data-type="png" data-w="587" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZh16dDT02icgN2QFTjyrGudFoJjlPXFbEsL7bRZn0eh4HkicZia7BGV1ibzg/0?" style="height: 400px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 587px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;既然这样，为什么不将web应用群中所有子系统的域名统一在一个顶级域名下，例如“*.baidu.com”，然后将它们的cookie域设置为“baidu.com”，这种做法理论上是可以的，甚至早期很多多系统登录就采用这种同域名共享cookie的方式。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;然而，可行并不代表好，共享cookie的方式存在众多局限。首先，应用群域名得统一；其次，应用群各系统使用的技术（至少是web服务器）要相同，不然cookie的key值（tomcat为JSESSIONID）不同，无法维持会话，共享cookie的方式是无法实现跨语言技术平台登录的，比如java、php、.net系统之间；第三，cookie本身不安全。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;因此，我们需要一种全新的登录方式来实现多系统应用群的登录，这就是单点登录&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;三、单点登录&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;什么是单点登录？单点登录全称Single Sign On（以下简称SSO），是指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录与单点注销两部分&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1、登录&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;相比于单系统登录，sso需要一个独立的认证中心，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。这个过程，也就是单点登录的原理，用下图说明&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="1.2632293080054273" data-type="png" data-w="737" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZhUibFJcia185XNwoCpTFa2UwjE8GvDyLiccFOPmC9rYwZVgRreAfHGV7BQ/0?" style="height: 846.364px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 670px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;下面对上图简要描述&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;用户访问系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;1&lt;/span&gt;的受保护资源，系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;1&lt;/span&gt;发现用户未登录，跳转至&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心，并将自己的地址作为参数&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心发现用户未登录，将用户引导至登录页面&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;用户输入用户名密码提交登录申请&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心校验用户信息，创建用户与&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心之间的会话，称为全局会话，同时创建授权令牌&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心带着令牌跳转会最初的请求地址（系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;1&lt;/span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;1&lt;/span&gt;拿到令牌，去&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心校验令牌是否有效&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心校验令牌，返回有效，注册系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;1&lt;/span&gt;使用该令牌创建与用户的会话，称为局部会话，返回受保护资源&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;用户访问系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;2&lt;/span&gt;的受保护资源&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;2&lt;/span&gt;发现用户未登录，跳转至&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心，并将自己的地址作为参数&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心发现用户已登录，跳转回系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;2&lt;/span&gt;的地址，并附上令牌&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;2&lt;/span&gt;拿到令牌，去&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心校验令牌是否有效&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心校验令牌，返回有效，注册系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;2&lt;/span&gt;使用该令牌创建与用户的局部会话，返回受保护资源&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;用户登录成功之后，会与sso认证中心及各个子系统建立会话，用户与sso认证中心建立的会话称为全局会话，用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过sso认证中心，全局会话与局部会话有如下约束关系&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;局部会话存在，全局会话一定存在&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;全局会话存在，局部会话不一定存在&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;全局会话销毁，局部会话必须销毁&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;你可以通过博客园、百度、csdn、淘宝等网站的登录过程加深对单点登录的理解，注意观察登录过程中的跳转url与参数&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2、注销&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;单点登录自然也要单点注销，在一个子系统中注销，所有子系统的会话都将被销毁，用下面的图来说明&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="0.7148997134670487" data-type="png" data-w="698" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZhkVQtLM2ronQSATJiavQ5S70DcTNGD7RnibcL2nz7F690Njiavs12EqicwQ/0?" style="height: 478.983px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 670px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;sso认证中心一直监听全局会话的状态，一旦全局会话销毁，监听器将通知所有注册系统执行注销操作&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;下面对上图简要说明&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;用户向系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;1&lt;/span&gt;发起注销请求&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;1&lt;/span&gt;根据用户与系统&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 153, 153) !important;"&gt;1&lt;/span&gt;建立的会话&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;id&lt;/span&gt;拿到令牌，向&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心发起注销请求&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心向所有注册系统发起注销请求&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;各注册系统接收&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心的注销请求，销毁局部会话&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心引导用户至登录页面&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;四&lt;/span&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;、部署图&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;单点登录涉及sso认证中心与众子系统，子系统与sso认证中心需要通信以交换令牌、校验令牌及发起注销请求，因而子系统必须集成sso的客户端，sso认证中心则是sso服务端，整个单点登录过程实质是sso客户端与服务端通信的过程，用下图描述&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="0.7694483734087695" data-type="png" data-w="707" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZhXsr7KAbqn0RkAKskTW3o5QGIWj7emajYDtoJwqH1icLwLBls45QHP4g/0?" style="height: 515.53px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 670px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;sso认证中心与sso客户端通信方式有多种，这里以简单好用的httpClient为例，web service、rpc、restful api都可以&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;五、实现&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;只是简要介绍下基于java的实现过程，不提供完整源码，明白了原理，我相信你们可以自己实现。sso采用客户端/服务端架构，我们先看sso-client与sso-server要实现的功能（下面：sso认证中心=sso-server）&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;sso-client&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;拦截子系统未登录用户请求，跳转至&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;接收并存储&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心发送的令牌&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;与&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;sso&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;-&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;server&lt;/span&gt;通信，校验令牌的有效性&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;建立局部会话&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;拦截用户注销请求，向&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心发送注销请求&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;接收&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;sso&lt;/span&gt;认证中心发出的注销请求，销毁局部会话&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;sso-server&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;验证用户的登录信息&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;创建全局会话&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;创建授权令牌&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;与&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;sso&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;-&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;client&lt;/span&gt;通信发送令牌&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;校验&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;sso&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;-&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;client&lt;/span&gt;令牌有效性&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;系统注册&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;接收&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;sso&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;-&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important;"&gt;client&lt;/span&gt;注销请求，注销所有会话&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;接下来，我们按照原理来一步步实现sso吧！&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1、sso-client拦截未登录请求&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;java拦截请求的方式有servlet、filter、listener三种方式，我们采用filter。在sso-client中新建LoginFilter.java类并实现Filter接口，在doFilter()方法中加入对未登录用户的拦截&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(128, 0, 128) !important;"&gt;public&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;void&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;doFilter&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;ServletRequest &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;request&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;ServletResponse &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;response&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;FilterChain &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;chain&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;throws &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;IOException&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;ServletException&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpServletRequest &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;req&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;HttpServletRequest&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;request&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpServletResponse &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;res&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;HttpServletResponse&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;response&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpSession &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;req&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;getSession&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;if&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;getAttribute&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"isLogin"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;))&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;        &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;chain&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;doFilter&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;request&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;response&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;        &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;return&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(153, 153, 153) !important; font-style: italic !important;"&gt;//跳转至sso认证中心&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;res&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;sendRedirect&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"sso-server-url-with-system-url"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2、sso-server拦截未登录请求&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;拦截从sso-client跳转至sso认证中心的未登录请求，跳转至登录页面，这个过程与sso-client完全一样&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;3、sso-server验证用户登录信息&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;用户在登录页面输入用户名密码，请求登录，sso认证中心校验用户信息，校验成功，将会话状态标记为“已登录”&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;@&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;RequestMapping&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"/login"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(128, 0, 128) !important;"&gt;public&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;String&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;login&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;String&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;username&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;String&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;password&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpServletRequest &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;req&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;this&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;checkLoginInfo&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;username&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;password&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;req&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;getSession&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;().&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;setAttribute&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"isLogin"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;true&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;return&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"success"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;4、sso-server创建授权令牌&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;授权令牌是一串随机字符，以什么样的方式生成都没有关系，只要不重复、不易伪造即可，下面是一个例子&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;String token = UUID.randomUUID().toString();&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;5、sso-client取得令牌并校验&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;sso认证中心登录后，跳转回子系统并附上令牌，子系统（sso-client）取得令牌，然后去sso认证中心校验，在LoginFilter.java的doFilter()中添加几行&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(153, 153, 153) !important; font-style: italic !important;"&gt;// 请求附带token参数&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;String&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;token&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;req&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;getParameter&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"token"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;if&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;token&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; != &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;null&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(153, 153, 153) !important; font-style: italic !important;"&gt;// 去sso认证中心校验token&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;boolean&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;verifyResult&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;this&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;verify&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"sso-server-verify-url"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;token&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;if&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;!&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;verifyResult&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;        &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;res&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;sendRedirect&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"sso-server-url"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;        &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;return&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;chain&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;doFilter&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;request&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;response&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;verify()方法使用httpClient实现，这里仅简略介绍，httpClient详细使用方法请参考官方文档&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpPost &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;httpPost&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;new&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpPost&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"sso-server-verify-url-with-token"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpResponse &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;httpResponse&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;httpClient&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;execute&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;httpPost&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;6、sso-server接收并处理校验令牌请求&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;用户在sso认证中心登录成功后，sso-server创建授权令牌并存储该令牌，所以，sso-server对令牌的校验就是去查找这个令牌是否存在以及是否过期，令牌校验成功后sso-server将发送校验请求的系统注册到sso认证中心（就是存储起来的意思）&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;令牌与注册系统地址通常存储在key-value数据库（如redis）中，redis可以为key设置有效时间也就是令牌的有效期。redis运行在内存中，速度非常快，正好sso-server不需要持久化任何数据。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;令牌与注册系统地址可以用下图描述的结构存储在redis中，可能你会问，为什么要存储这些系统的地址？如果不存储，注销的时候就麻烦了，用户向sso认证中心提交注销请求，sso认证中心注销全局会话，但不知道哪些系统用此全局会话建立了自己的局部会话，也不知道要向哪些子系统发送注销请求注销局部会话&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="0.4362017804154303" data-type="png" data-w="337" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7Tpdw09zOicribDCqjUP0RywZhMALOvMc3dz3Bmz50XemZtIGzlgQcSuogTbIUQ0E6AAiaj8ubOfUj5vA/0?" style="height: 147px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 337px !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;7、sso-client校验令牌成功创建局部会话&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;令牌校验成功后，sso-client将当前局部会话标记为“已登录”，修改LoginFilter.java，添加几行&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: bold !important;"&gt;if&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;verifyResult&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;setAttribute&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"isLogin"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;,&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;true&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;sso-client还需将当前会话id与令牌绑定，表示这个会话的登录状态与令牌相关，此关系可以用java的hashmap保存，保存的数据用来处理sso认证中心发来的注销请求&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;8、注销过程&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;用户向子系统发送带有“logout”参数的请求（注销请求），sso-client拦截器拦截该请求，向sso认证中心发起注销请求&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;String&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;logout&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;req&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;getParameter&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"logout"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;if&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;logout&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; != &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;null&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;this&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;ssoServer&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;logout&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;token&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;sso认证中心也用同样的方式识别出sso-client的请求是注销请求（带有“logout”参数），sso认证中心注销全局会话&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;@&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;RequestMapping&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"/logout"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(128, 0, 128) !important;"&gt;public&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;String&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;logout&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpServletRequest &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;req&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpSession &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; = &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;req&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;getSession&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;if&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; != &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;null&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;        &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;session&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;.&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;invalidate&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;();&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(153, 153, 153) !important; font-style: italic !important;"&gt;//触发LogoutListener&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important;"&gt;return&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(221, 17, 68) !important;"&gt;"redirect:/"&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;sso认证中心有一个全局会话的监听器，一旦全局会话注销，将通知所有注册系统注销&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(128, 0, 128) !important;"&gt;public&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;class&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;LogoutListener&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: bold !important;"&gt;implements&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpSessionListener&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;@&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(128, 0, 128) !important;"&gt;public&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;void&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;sessionCreated&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpSessionEvent &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;event&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;@&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(128, 0, 128) !important;"&gt;public&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: bold !important; color: rgb(128, 0, 128) !important;"&gt;void&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;sessionDestroyed&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;(&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: teal !important;"&gt;HttpSessionEvent &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 45, 122) !important;"&gt;event&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;)&lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt; &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;        &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(153, 153, 153) !important; font-style: italic !important;"&gt;//通过httpClient向所有注册系统发送注销请求&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(0, 111, 224) !important;"&gt;    &lt;/span&gt;&lt;span class="" style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; font-size: inherit !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; border-width: 0px; border-style: initial; border-color: initial; font-family: inherit; height: inherit; box-sizing: border-box !important; word-wrap: break-word !important; line-height: inherit !important; font-weight: inherit !important; color: rgb(51, 51, 51) !important;"&gt;}&lt;/span&gt;&lt;span style="max-width: 100%; color: rgb(192, 0, 0); font-weight: bold; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="font-size: 16px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1308495525833</guid></item><item><title>Java 解惑：Comparable 和 Comparator 的区别</title><link>http://chuansong.me/n/1308495625849</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：张拭心&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：blog.csdn.net/u011240877/article/details/53399019&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Java 中为我们提供了两种比较机制：Comparable 和 Comparator，他们之间有什么区别呢？今天来了解一下。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 76, 65); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparable 自然排序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparable 在 java.lang 包下，是一个接口，内部只有一个方法 compareTo()：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;public interface Comparable&lt;t&gt; {&lt;/t&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public int compareTo(T o);&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparable 可以让实现它的类的对象进行比较，具体的比较规则是按照 compareTo 方法中的规则进行。这种顺序称为 自然顺序。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;compareTo 方法的返回值有三种情况：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;e1.compareTo(e2) &amp;gt; 0 即 e1 &amp;gt; e2&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;e1.compareTo(e2) = 0 即 e1 = e2&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;e1.compareTo(e2) &amp;lt; 0 即 e1 &amp;lt; e2&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;注意：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;em style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1.由于 null 不是一个类，也不是一个对象，因此在重写 compareTo 方法时应该注意 e.compareTo(null) 的情况，即使 e.equals(null) 返回 false，compareTo 方法也应该主动抛出一个空指针异常 NullPointerException。&lt;/em&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;em style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2.Comparable 实现类重写 compareTo 方法时一般要求 e1.compareTo(e2) == 0 的结果要和 e1.equals(e2) 一致。这样将来使用 SortedSet 等根据类的自然排序进行排序的集合容器时可以保证保存的数据的顺序和想象中一致。&lt;/em&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;有人可能好奇上面的第二点如果违反了会怎样呢？&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;举个例子，如果你往一个 SortedSet 中先后添加两个对象 a 和 b，a b 满足 (!a.equals(b) &amp;amp;&amp;amp; a.compareTo(b) == 0)，同时也没有另外指定个 Comparator，那当你添加完 a 再添加 b 时会添加失败返回 false, SortedSet 的 size 也不会增加，因为在 SortedSet 看来它们是相同的，而 SortedSet 中是不允许重复的。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;实际上所有实现了 Comparable 接口的 Java 核心类的结果都和 equlas 方法保持一致。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;实现了 Comparable 接口的 List 或则数组可以使用 Collections.sort() 或者 Arrays.sort() 方法进行排序。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;实现了 Comparable 接口的对象才能够直接被用作 SortedMap (SortedSet) 的 key，要不然得在外边指定 Comparator 排序规则。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;因此自己定义的类如果想要使用有序的集合类，需要实现 Comparable 接口，比如：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;**&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; * description: 测试用的实体类 书, 实现了 Comparable 接口，自然排序&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; * &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; * author: shixinzhang&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; * &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; * data: 10/5/2016&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; */&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;public class BookBean implements Serializable, Comparable {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    private String name;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    private int count;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public BookBean(String name, int count) {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        this.name = name;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        this.count = count;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public String getName() {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        return name;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public void setName(String name) {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        this.name = name;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public int getCount() {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        return count;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public void setCount(int count) {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        this.count = count;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    /**&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * 重写 equals&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * @param o&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * @return&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     */&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    @Override&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public boolean equals(Object o) {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        if (this == o) return true;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        if (!(o instanceof BookBean)) return false;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        BookBean bean = (BookBean) o;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        if (getCount() != bean.getCount()) return false;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        return getName().equals(bean.getName());&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    /**&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * 重写 hashCode 的计算方法&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * 根据所有属性进行 迭代计算，避免重复&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * 计算 hashCode 时 计算因子 31 见得很多，是一个质数，不能再被除&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * @return&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     */&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    @Override&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public int hashCode() {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        //调用 String 的 hashCode(), 唯一表示一个字符串内容&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        int result = getName().hashCode();&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        //乘以 31, 再加上 count&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        result = 31 * result + getCount();&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        return result;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    @Override&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public String toString() {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        return "BookBean{" +&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;                "name='" + name + '\'' +&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;                ", count=" + count +&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;                '}';&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    /**&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * 当向 TreeSet 中添加 BookBean 时，会调用这个方法进行排序&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * @param another&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     * @return&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;     */&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    @Override&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public int compareTo(Object another) {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        if (another instanceof BookBean){&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            BookBean anotherBook = (BookBean) another;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            int result;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            //比如这里按照书价排序&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            result = getCount() - anotherBook.getCount();     &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;          //或者按照 String 的比较顺序&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;          //result = getName().compareTo(anotherBook.getName());&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            if (result == 0){   //当书价一致时，再对比书名。 保证所有属性比较一遍&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;                result = getName().compareTo(anotherBook.getName());&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            return result;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        // 一样就返回 0&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        return 0;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上述代码还重写了 equlas(), hashCode() 方法，自定义的类将来可能会进行比较时，建议重写这些方法。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;感谢 @li1019865596 指出，这里我想表达的是在有些场景下 equals 和 compareTo 结果要保持一致，这时候不重写 equals，使用 Object.equals 方法得到的结果会有问题，比如说 HashMap.put() 方法，会先调用 key 的 equals 方法进行比较，然后才调用 compareTo。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;后面重写 compareTo 时，要判断某个相同时对比下一个属性，把所有属性都比较一次。&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparable 接口属于 Java 集合框架的一部分。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 76, 65); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparator 定制排序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparator 在 java.util 包下，也是一个接口，JDK 1.8 以前只有两个方法：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;public interface Comparator&lt;t&gt; {&lt;/t&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public int compare(T lhs, T rhs);&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public boolean equals(Object object);&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;JDK 1.8 以后又新增了很多方法：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="0.9065217391304348" data-type="jpeg" data-w="460" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_jpg/eZzl4LXykQzRXx7yI6HHpTiac05SQkyk7ia7ottfKZEknzBX3gzYjJ3fZVjEKhCFk7FMiaC2IPjGJWmGAzSQbXBQg/0?" style="border-width: 0px; border-style: initial; border-color: initial; font-size: 0px; color: transparent; vertical-align: middle; height: 417px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 460px !important;" title=""/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;基本上都是跟 Function 相关的，这里暂不介绍 1.8 新增的。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;从上面内容可知使用自然排序需要类实现 Comparable，并且在内部重写 comparaTo 方法。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;而 Comparator 则是在外部制定排序规则，然后作为排序策略参数传递给某些类，比如 Collections.sort(), Arrays.sort(), 或者一些内部有序的集合（比如 SortedSet，SortedMap 等）。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;使用方式主要分三步：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;创建一个 Comparator 接口的实现类，并赋值给一个对象&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;在 compare 方法中针对自定义类写排序规则&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;将 Comparator 对象作为参数传递给 排序类的某个方法&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;向排序类中添加 compare 方法中使用的自定义类&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;举个例子：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;// 1.创建一个实现 Comparator 接口的对象&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparator comparator = new Comparator() {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    @Override&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    public int compare(Object object1, Object object2) {&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        if (object1 instanceof NewBookBean &amp;amp;&amp;amp; object2 instanceof NewBookBean){&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            NewBookBean newBookBean = (NewBookBean) object1;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            NewBookBean newBookBean1 = (NewBookBean) object2;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            //具体比较方法参照 自然排序的 compareTo 方法，这里只举个栗子&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;            return newBookBean.getCount() - newBookBean1.getCount();&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;        return 0;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;    }&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//2.将此对象作为形参传递给 TreeSet 的构造器中&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;TreeSet treeSet = new TreeSet(comparator);&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//3.向 TreeSet 中添加 步骤 1 中 compare 方法中设计的类的对象&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;treeSet.add(new NewBookBean("A",34));&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;treeSet.add(new NewBookBean("S",1));&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;treeSet.add( new NewBookBean("V",46));&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;treeSet.add( new NewBookBean("Q",26));&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;其实可以看到，Comparator 的使用是一种策略模式，不熟悉策略模式的同学可以点这里查看： 策略模式：网络小说的固定套路 了解。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;排序类中持有一个 Comparator 接口的引用：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparator&lt;? super K?&gt; comparator;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;而我们可以传入各种自定义排序规则的 Comparator 实现类，对同样的类制定不同的排序策略。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 76, 65); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Java 中的两种排序方式：&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparable 自然排序。（实体类实现）&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Comparator 是定制排序。（无法修改实体类时，直接在调用方创建）&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;同时存在时采用 Comparator（定制排序）的规则进行比较。&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;对于一些普通的数据类型（比如 String, Integer, Double…），它们默认实现了Comparable 接口，实现了 compareTo 方法，我们可以直接使用。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;而对于一些自定义类，它们可能在不同情况下需要实现不同的比较策略，我们可以新创建 Comparator 接口，然后使用特定的 Comparator 实现进行比较。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: justify; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;这就是 Comparable 和 Comparator 的区别。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1308495625849</guid></item><item><title>JavaEE – JPA（4）：EntityManager相关核心概念</title><link>http://chuansong.me/n/1308495725855</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; white-space: pre-wrap; color: rgb(255, 41, 65); font-size: 14px; line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: justify; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：dm_vincent&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(136, 136, 136); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：blog.csdn.net/dm_vincent/article/details/52615532&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;前三篇文章花了一些笔墨介绍了事务的概念以及在EJB和spring Framework中分别是如何完成事务管理的。之所谓花了比较大的代价来介绍事务主要也是因为不管在什么类型的持久化应用中，都包含下面两个关键点：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;事务管理&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对象关系映射(ORM)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;而JPA主要定义的就是和对象关系映射(ORM)相关的内容。从本篇文章开始，会系统性地介绍JPA的方方面面。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;核心概念及其关联关系&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先，当然是介绍最核心最重要的EntityManager相关概念。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在学习和使用JPA的时候，经常会碰到几类对象：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;EntityManager 以及 PersistenceContext&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;EntityManagerFactory 以及 PersistenceUnit&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Persistence&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;他们的名字也比较相似，他们之间的关联关系可以用下面的图进行表示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.8841761827079935" data-type="png" data-w="613" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzRXx7yI6HHpTiac05SQkyk7R4WZwlKhv2um2qs0aiaUJPcE0BibicQYEvCTnc6CJVYXyQCibYK80AT11A/0?wx_fmt=png" style=" border-width: 0px; border-style: initial; border-color: initial; font-size: 0px; color: transparent; vertical-align: middle ; ; ; ; ; ; ; ; ; " title=""/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;EntityManager &amp;amp; PersistenceContext&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先来看看EntityManager接口中的几个典型方法的定义：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public interface EntityManager {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public void persist(Object entity);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public &lt;t&gt; T merge(T entity);&lt;/t&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public void remove(Object entity);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public &lt;t&gt; T find(Class&lt;t&gt; entityClass, Object primaryKey);&lt;/t&gt;&lt;/t&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;以上的四个方法分别实现了数据的增删改查(CRUD)操作。它的作用就像一座桥梁，将面向对象和数据库的世界连接起来。在没有调用EntityManager接口中的方法是，一个Java对象就是一个内存中的存在而已，而在调用后它就会被持久到数据库的行列结构中去。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;那么这些通过EntityManager被持久化到数据库中的对象，以及从数据库拉入到内存中的对象，也会同时被一个名为持久化上下文(Persistence Context)所管理，这些被管理的对象统称为受管对象(Managed Object)，每个受管对象都有唯一的ID。至于EntityManager和持久化上下文之间的数量关系，一般可以是多对一的，即多个EntityManager同时指向一个持久化上下文。这其实很好理解，就是EntityManager虽然有多个实例，但是它们背后的持久化上下文却只有一个，这样就保证了多个EntityManager所管理的受管对象拥有的ID是唯一的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;既然EntityManager只是一个接口，那么是谁来负责实现它呢？就是实现了JPA的厂商，比如典型的EclipseLink，hibernate等。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;EntityManagerFactory &amp;amp; PersistenceUnit&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;仍然还是先看看该接口提供的几个典型方法：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;public interface EntityManagerFactory {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public EntityManager createEntityManager();&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public CriteriaBuilder getCriteriaBuilder();&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    public Metamodel getMetamodel();&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;    // ......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;此接口中使用的最为频繁的就是第一个createEntityManager()，它能够创建并返回得到一个EntityManager接口的实现。既然是一个用于创建EntityManager接口的工厂接口，想必就会有一个用于控制如何生产的配置场所。这个配置场所就是上图中提到的持久化单元(Persistence Unit)。典型的比如在META-INF文件夹中创建的persistence.xml文件，其中就可以定义一个或者多个持久化单元。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;那么EntityManagerFactory又是通过何种方法得到的呢？这得分两种环境来讨论。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;JavaEE&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JavaSE&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在JavaEE环境下，一般通过依赖注入的方式引入：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;@PersistenceUnit(unitName="unitNameDefinedInPersistenceConfig")&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;private EntityManagerFactory emf;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;而这里所使用的PersistenceUnit结合其unitName所代表的就是定义在META-INF下persistence.xml配置文件中的某些具体配置。这些配置可以是数据库连接参数，也可以是其它JPA配置项，或者具体JPA实现(提供商)的配置项。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;&lt;strong&gt;Persistence&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在JavaSE环境下，可以通过Persistence类得到具体的EntityManagerFactory实现：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 12px; color: rgb(136, 136, 136);"&gt;EntityManagerFactory emf = Persistence.createEntityManagerFactory("unitNameDefinedInPersistenceConfig");&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;以上便是JPA中和EntityManager相关的几个核心概念。它们定义了普通Java对象(POJO)和数据库行记录之间的交互方式。至于普通Java对象(POJO)中的字段和数据库列记录之间的映射，我们将在后续的文章中逐一介绍。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;本系列：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;a csmlink="Gwk8Jc" href="http://chuansong.me/n/1285158525045" target="_blank"&gt;JavaEE – JPA（1）：事务的基础概念&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a csmlink="Qwk8Jc" href="http://chuansong.me/n/1289842325845" target="_blank"&gt;JavaEE – JPA（2）：EJB中的事务管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a csmlink="1wk8Jc" href="http://chuansong.me/n/1297265025758" target="_blank"&gt;JavaEE – JPA（3）：Spring Framework中的事务管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JavaEE – JPA（4）：EntityManager相关核心概念&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，看技术干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1308495725855</guid></item><item><title>REST 架构风格的由来 &amp; 元素</title><link>http://chuansong.me/n/1297264925739</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="max-width: 100%; min-height: 1em; white-space: normal; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 0, 0); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;(点击&lt;span style="max-width: 100%; color: rgb(0, 112, 192);"&gt;上方蓝字&lt;/span&gt;，快速关注我们)&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; font-size: 16.1905px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：伯乐在线专栏作者 - 求知者&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;a csmlink="jRUlJc" href="http://chuansong.me/n/351521825448" style="color: rgb(0, 82, 255); max-width: 100%; font-size: 14px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;点击 → 了解如何加入专栏作者&lt;/a&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 76, 65); line-height: 25.6px; text-align: center; background-color: rgb(255, 254, 213); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;如需转载，发送「转载」二字查看说明&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;一 REST架构风格的由来&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;笔者听到REST也有快两个年头了，但是就笔者而言，身边的同事，朋友谈论它的很多，但总感觉说的有些欠缺，听的人也感觉迷迷糊糊的。包括笔者的资深架构师同事也对REST的理解感觉不是那么的地道，都停留在一个模棱两可的程度。如果要细究REST，谁也说不出个一二，这让笔者感觉很揪心。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本文只是笔者研究REST的一个总结,部分内容来源于由李锟、廖志刚、刘丹、杨光等对Feilding的论文的译文，如果能对看到的朋友理解REST是什么有点帮助，那笔者也就甚是欣慰了。在笔者的心目中，对于一个技术点的掌握要达到炉火纯青的地步方可才能传道授业解惑。笔者也在朝着这个方向砥砺前行，希望有朝一日，但凡由笔者分享出去的技术能给在这条技术的路上前行的大伙一些真正的干货。闲谈的有点多，如上内容姑且就当是笔者为什么要写这篇博客的缘由吧。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;1.创建REST的动机&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;作者开发 REST 的动机是为 Web 应该如何运转创建一种架构模型，使之成为 Web 协议标准的指导框架。REST 被用来描述想要得到的 Web 架构，帮助识别出现有的问题，对各种替代方案进行比较，并且保证协议的扩展不会违反使 Web 成功的那些核心约束。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;REST 的第一版开发于 1994 年 10 月和 1995 年 8 月之间，起初是作为作者编写 HTTP/1.0规范和最初的HTTP/1.1 建议时，用来沟通各种 Web 概念的一种方法。它在随后的 5 年中以迭代的方式不断改进，并且被应用于各种 Web 协议标准的修订版和扩展之中。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;2.明确定义&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;REST是一种架构风格，Roy Thomas Fielding 2000年在加州大学欧文分校的博士论文 《Architectural Styles and the Design of Network-based Software Architectures》中文译为《架构风格与基于网络的软件架构设计》中对REST(Representational State Transfer,表述性状态转移)进行了详细的描述。这篇论文定义了一个框架，致力于通过架构风格来理解软件架构，并且展示如何使用风格来指导基于网络的应用的架构设计。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Fielding：Adobe首席科学家，Apache HTTP Server Project的联合创始人，当过ASF的理事，HTTP规范的重要作者之一。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;3.架构风格&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;它是一组协作的架构约束。这些约束限制了架构元素的角色和功能，以及在任何一个遵循该风格的架构中允许存在的元素之间的关系。约束往往是由在架构元素的某个方面使用软件工程原则来驱动的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;4.软件架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;何为软件架构，该领域的研究者们从未达成过统一的定义，由于现代软件系统的复杂性，系统实现被划分为独立的组件，这些组件通过相互通信来执行想要完成的任务。软件架构研究如何以最佳方式划分一个系统、如何标识组件、组件之间如何通信、信息如何沟通、组成系统的元素如何能够独立地进化，以及上述的所有东西如何能够使用形式化的和非形式化的符号加以描述。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Fielding对软件架构的定义为:一个软件架构是一个软件系统在其操作的某个阶段的运行时元素的抽象。一个系统可能由很多层抽象和很多个操作阶段组成，每个抽象和操作阶段都有自己的软件架构。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;软件架构由一些架构元素（组件、连接器和数据）的配置来定义，这些元素之间的关系受到约束，以获得想要得到的一组架构属性。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;组件是软件指令和内部状态的一个抽象单元，通过其接口提供对于数据的转换。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;连接器是对于组件之间的通讯、协调或者合作进行仲裁的一种抽象机制（连接器的例子包括共享的表述、远程过程调用、消息传递协议和数据流）。数据是组件通过一个连接器接收或发送的信息元素。配置是在系统的运行期间组件、连接器和数据之间的架构关系的结构。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt; 5.架构属性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;它包括了对组件、连接器和数据的选择和排列所导致的所有的属性（包括了可以由系统获得的功能属性和非功能属性，例如：进化的相对容易程度、组件的可重用性、效率、动态扩展能力，这些常常被称作品质属性）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;关键关注点架构属性:性能(网络性能、延迟、完成时间、网络效率)，可伸缩性，简单性，可修改性(可进化性、可扩展性、可定制性、可配置性、可重用性)，可见性， 可移植性， 可靠性。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;REST强调组件交互的可伸缩性、接口的通用性、组件的独立部署、以及用来减少交互延迟、增强安全性、封装遗留系统的中间组件。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;6.作者列出的架构风格&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;6.1.数据流风格（Data-flow Styles）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.1.1 管道和过滤器（Pipe and Filter，PF）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;每个组件（过滤器）从其输入端读取数据流并在其输出端产生数据流，通常对输入流应用一种转换并增量地处理它们，以使输出在输入被完全处理完之前就能够开始。这种风格也被称作单路数据流网络（one-way data flow network）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.1.2 统一管道和过滤器（Uniform Pipe and Filter，UPF）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格在 PF 风格的基础上，添加了一个约束，即所有过滤器必须具有相同的接口。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;6.2.复制风格（Replication Styles）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.2.1 复制仓库（Replicated Repository，RR）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;基于复制仓库风格的系统通过利用多个进程提供相同的服务，来改善数据的可访问性和服务的可伸缩性。这些分散的服务器交互为客户端制造出只有一个集中的服务的“幻觉”。主要的例子包括诸如 XMS 这样的分布式文件系统和 CVS这样的远程版本控制系统。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.2.2 缓存（Cache，$）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;复制仓库风格的一种变体是缓存风格，复制个别请求的结果，以便可以被后面的请求重用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;6.3.分层风格（Hierarchical Styles）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.3.1 客户-服务器（Client-Server，CS）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格在基于网络的应用的架构风格中最为常见。服务器组件提供了一组服务，并监听对这些服务的请求。客户端组件通过一个连接器将请求发送到服务器，希望执行一个服务。服务器可以拒绝这个请求，也可以执行这个请求并将响应发送回客户端。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.3.2 分层系统（Layered System，LS）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;一个分层系统是按照层次来组织的，每一层为在其之上的层提供服务，并且使用在其之下的层所提供的服务。尽管分层系统被看作一种“单纯”的风格，但是它在基于网络的&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;系统中的使用仅限于与客户-服务器风格相结合，形成分层-客户-服务器风格。分层系统的例子包括分层通信协议的处理，例如 TCP/IP 和OSI 协议栈。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.3.3 分层-客户-服务器（LayeredClient-Server，LCS）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格在客户-服务器风格的基础上添加了代理（proxy）组件和网关（gateway）组件。一个代理组件作为一个或多个客户端组件的共享服务器，它接收请求并进行可能的转换后将其转发给服务器。一个网关组件在客户端或代理看起来像是一个正常的服务器，但是事实上它将请求进行可能的转换后转发给了它的“内部层”（inner- layer）服务器。这些额外的中间组件添加了很多个层，用来为系统添加诸如负载均衡和安全性检查这样的功能。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.3.4 客户-无状态-服务器（Client-Stateless-Server，CSS）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格源自客户-服务器风格，并且添加了额外的约束：在服务器组件之上不允许有会话状态（session state）。从客户端发到服务器的每个请求必须包含理解请求所必需的全部信息，不能利用任何保存在服务器上的上下文（context），会话状态全部保存在客户端。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.3.5 客户-缓存-无状态-服务器（Client-Cache-Stateless-Server，C$SS）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格来源于客户-无状态-服务器风格和缓存风格（通过添加缓存组件）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.3.6 分层-客户-缓存-无状态-服务器（Layered-Client-Cache-StatelessServer，LC$SS）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格通过添加代理或网关组件，继承了分层-客户-服务器风格和客户-缓存-无状态-服务器风格。使用此风格的范例系统是 Internet 域名系统（DNS）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.3.7 远程会话（Remote Session，RS）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格是客户-服务器风格的一种变体，它试图使客户端组件（而非服务器组件）的复杂性最小化或者使得它们的可重用性最大化。每个客户端在服务器上启动一个会话，然后调用服务器的一系列服务，最后退出会话。应用状态被完全保存在服务器上。这种风格通常在以下场合中使用：想要使用一个通用的客户端（例如 TELNET）或者通过一个模仿通用客户端的接口（例如 FTP ）来访问远程服务。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.3.8 远程数据访问（Remote Data Access，RDA）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格是客户-服务器风格的一种变体，它将应用状态分布在客户端和服务器上。客户端以一种标准的格式发送一个数据库查询（例如 SQL）请求到服务器，服务器分配一个工作空间并执行这个查询，这可能会导致一个巨大的结果集。客户端能够在结果集上进行进一步操作（例如表连接）或者每次获取结果的一部分。客户端必须了解服务的数据结构，以便建造依赖于该结构的查询。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;6.4.移动代码风格（Mobile Code Styles）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.4.1 虚拟机（Virtual Machine，VM）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所有移动代码风格的基础是虚拟机（或解释器）风格。代码必须以某种方式来执行，首选的方式是在一个满足了安全性和可靠性关注点的受控环境中执行，而这正是虚拟机风格所提供的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.4.2 远程求值（Remote Evaluation，REV）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格来源于客户-服务器风格和虚拟机风格，一个客户端组件必须要知道如何来执行一个服务，但缺少执行此服务所必需的资源（CPU 周期、数据源等等），这些资源恰好位于一个远程站点上。因此，客户端将如何执行服务的代码发送给远程站点上的一个服务器组件，服务器组件使用可用的资源来执行代码，然后将执行结果发送回客户端。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.4.3 按需代码（Code on Demand，COD）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在该风格中，一个客户端组件知道如何访问一组资源，但不知道如何处理它们。它向一个远程服务器发送对于如何处理资源的代码的请求，接收这些代码，然后在本地执行这些代码。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.4.4 分层-按需代码-客户-缓存-无状态-服务器（Layered-Code-on-DemandClient-Cache-Stateless-Server，LCODC$SS）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;将按需代码风格添加到上面讨论过的分层-客户-缓存-无状态-服务器风格上。因为代码被看作不过是另一种数据元素，因此这并不会妨碍LC$SS 风格的优点。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.4.5 移动代理（Mobile Agent，MA）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在该风格中，一个完整的计算组件，与它的状态、必需的代码、执行任务所需的数据一起被移动到远程站点。该风格可以看作来源于远程求值风格和按需代码风格，因为移动性是同时以这两种方式工作的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;6.5.点对点风格（Peer-to-Peer Styles）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.5.1 基于事件的集成（Event-based Integration，EBI）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格不是直接调用另一个组件，而是一个组件能够发布（或广播）一个或者多个事件。在事件发布后，系统中的其他组件能够注册对于某些事件类型的兴趣，由系统本身来调用所有已注册的组件。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.5.2 C2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;C2 架构风格直接支持大粒度的重用，并且通过加强底层独立性，支持系统组件的灵活组合。它通过将基于事件的集成风格和分层-客户-服务器风格相结合来达到这些目标。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.5.3 分布式对象（Distributed Objects，DO）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格将系统组织为结对进行交互的组件的集合。一个对象是一个实体，这个实体封装了一些私有的状态信息或数据、操作数据的一组相关的操作或过程、以及一个可能存在的控制线程，这种封装使得它们能够被整体地看作单个的单元。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.5.4 被代理的分布式对象（Brokered Distributed Objects，BDO）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该风格引入了名称解析组件——其目的是将该组件接收到的客户端请求中一个通用的服务名称解析为一个能够满足该请求的对象的特定名称，并使用这个特定名称来答复客户端。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;&lt;strong&gt;7.REST所继承的风格约束&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2 style=" border-width: 0px; border-style: initial; border-color: initial; margin-bottom: 20px; font-size: 24px; font-weight: bold; font-stretch: normal; line-height: 36px ; ; ; ; ; ; ; ; ; ; "&gt;&lt;a style="border-width: 0px; border-style: initial; border-color: initial; color: rgb(0, 153, 204);"&gt;&lt;img class="alignnone size-full wp-image-108596" data-ratio="0.4842370744010088" data-type="png" data-w="793" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzRXx7yI6HHpTiac05SQkyk7JLUfb6KdXZlhV4qfnIDm85caZMAEl6icYlOnRICuybQPZ38SqfseErw/0?wx_fmt=png" style="border-width: 0px; border-style: initial; border-color: initial; margin: auto; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"/&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;每种风格的详细解释见第六小节。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;二 REST架构风格的架构元素&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;表述性状态转移（REST）风格是对分布式超媒体系统中的架构元素的一种抽象。REST忽略了组件实现和协议语法的细节，以便聚焦于以下几个方面：组件的角色、组件之间的交互之上的约束、组件对重要数据元素的解释。REST包括了一组对于定义 Web 架构基础的组 件、连接器和数据的基本约束，因此它代表了基于网络的应用的行为的本质。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;REST提供了一组架构约束，当作为一个整体来应用时，强调组件交互的可伸缩性、接口的通用性、 组件的独立部署、以及用来减少交互延迟、增强安全性、封装遗留系统的中间组件。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如下为REST的架构元素。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;1.数据元素（Data Elements）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.35081967213114756" data-s="300,640" data-type="png" data-w="610" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzRXx7yI6HHpTiac05SQkyk7CdqH8EqDTbFXSBK0g6v9aicHboBdibDMoiaFeoFxbFicf0Hgiaq0LTvAxlQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;&lt;strong&gt;1.1资源和资源标识符（Resources and Resource Identifiers）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;REST对于信息的核心抽象是资源。任何能够被命名的信息都能够作为一个资源：一份文档或一张图片、一个与时间相关的服务（例如，“北京今日的天气”）、一个其他资源的集合、一个非虚拟的对象（例如，人）等等。REST使用一个资源标识符来标识组件之间交互所涉及到的特定资源。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(123, 12, 0);"&gt;1.2表述（Representations）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;REST组件通过以下方式在一个资源上执行动作：使用一个表述来捕获资源的当前的或预期的状态、在组件之间传递该表述。一个表述是一个字节序列，以及描述这些字节的表述元数据。表述的其他常用但不够精确的名称包括：文档、文件、HTTP 消息实体、实例或变量。表述的数据格式被称为一种媒体类型。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;2.连接器（Connectors）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.2967213114754098" data-s="300,640" data-type="png" data-w="610" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzRXx7yI6HHpTiac05SQkyk74yRDT1rfMk3y3j0RaXjtGCgsIcYcvuuWajztz5EYr8Z6fib7YbqbdLg/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;REST使用多种不同的连接器类型来对访问资源和转移资源表述的活动进行封装。连接器代表了一个组件通信的抽象接口，通过提供清晰的关注点分离、 并且隐藏资源的底层实现和通信机制，从而改善了架构的简单性。接口的通用性也使得组件 的可替换性成为了可能：如果用户对系统的访问仅仅是通过一个抽象的接口，那么接口的实现就能够被替换，而不会对用户产生影响。由于组件的网络通信是由一个连接器来管理的，所以在多个交互之间能够共享信息，以便提高效率和响应能力。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(255, 76, 65);"&gt;&lt;strong&gt;3.组件（Components）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.24386252045826515" data-s="300,640" data-type="png" data-w="611" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzRXx7yI6HHpTiac05SQkyk7BnOr4Eucga6xLQMibpbr4E7l8Wj4BkRRHyDUQyVOFib9XE4AiaTIgib25g/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;REST 组件根据它们在整个的应用动作中的角色来进行分类。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;说明：本文参考了由李锟、廖志刚、刘丹、杨光等翻译的&amp;lt;&amp;lt;架构风格与基于网络的软件架构设计&amp;gt;&amp;gt;的部分内容。笔者很是佩服他们强烈的社会责任感,他们无私的翻译了Feilding的博士论文给国人，再次向他们拜谢。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-s="300,640" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 20px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;专栏作者简介 &lt;/span&gt;&lt;/strong&gt;&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（ &lt;/span&gt;&lt;a csmlink="lRUlJc" href="http://chuansong.me/n/351521825448" style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;" target="_blank"&gt;&lt;span style="max-width: 100%; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;点击 → 加入专栏作者&lt;/span&gt;&lt;/a&gt;&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt; ）&lt;/span&gt;&lt;/p&gt;&lt;hr style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; white-space: normal; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;求知者：一个前行中的程序员。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img class="" data-ratio="1.26" data-type="jpeg" data-w="250" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_jpg/eZzl4LXykQzRXx7yI6HHpTiac05SQkyk7zdb7y4Hqnia5StHa5IKbt4Z27EMncj1CbQicYqW1MTBhtgIKRKwpuRZA/0?wx_fmt=jpeg" style=" border-width: 0px; border-style: initial; border-color: initial; margin-bottom: 10px; font-size: 0px; color: transparent; vertical-align: middle; width: 230px; height: 290px ; ; ; ; ; ; ; ; ; ; "/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; background-color: rgb(255, 255, 255); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(0, 0, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;打赏支持作者写出更多好文章，谢谢！&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1297264925739</guid></item></channel></rss>