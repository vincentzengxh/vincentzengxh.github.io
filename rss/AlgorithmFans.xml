<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>算法爱好者 - chuansong.me</title><link>http://chuansong.me/account/AlgorithmFans?start=12</link><description>算法是程序员的内功！伯乐在线旗下账号「算法爱好者」专注分享算法相关文章、工具资源和算法题，帮程序员修炼内功。</description><lastBuildDate>Thu, 29 Dec 2016 16:23:08 -0000</lastBuildDate><ttl>10</ttl><item><title>知其所以然（以算法学习为例）</title><link>http://chuansong.me/n/1372952352442</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：刘未鹏 _ Mind Hacks&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：http://mindhacks.cn/2008/07/07/the-importance-of-knowing-why/&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; line-height: 1.6; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;其实下文的绝大部分内容对所有学习都是同理的。只不过最近在正儿巴经地学算法，而后者又不是好啃的骨头，所以平时思考总结得就自然要比学其它东西要多一些。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; line-height: 1.6; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;问题：目前几乎所有的算法书的讲解方式都是欧几里德式的、瀑布式的、自上而下的、每一个推导步骤都是精准制导直接面向目标的。由因到果，定义、引理、定理、证明一样不少，井井有条一丝不乱毫无赘肉。而实际上，这完全把人类大脑创造发明的步骤给反过来了。看起来是阳关大道，实际上车马不通。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img data-ratio="0.680327868852459" data-s="300,640" data-type="jpeg" data-w="244" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_jpg/vpWlcHcJUICIYhLhUV7KP5UQZUpxgzWu7cFfic8rA3qBeb9mp7I0yWVE70x5PmY4jXL7qxAFS3vOefEAG3H8w9Q/640?wx_fmt=jpeg" style="box-sizing: border-box !important; word-wrap: break-word !important; width: auto !important; visibility: visible !important;"/&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;而对读者来说，这就&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;等于直接告诉你答案&amp;amp;做法了&lt;/strong&gt;，然后让&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;你去验证&lt;/strong&gt;这个答案&amp;amp;做法是可行&amp;amp;成立的。而关于答案&amp;amp;做法到底是怎么来的，从问题到答案之间经历了怎样的思维过程。却鲜有书能够很好的阐释。就我有限的阅（算法）书经验，除了波利亚的《怎样解题》还算合格之外（也并非最理想），其它的（包括有名的《算法导论》、《如何解题：现代启发式方法》、《Algorithms》、《编程珠玑》，甚至TAOCP——公平地说由于高老大对算法领域历史了解得非常通透，所以许多地方能够从原始脉络来讲述一个问题，譬如令人印象深刻的从竞赛树到堆的讲解就寥寥一页纸道出了堆这个数据结构的本质来，而像刚才列的几本有名的书却都没有做到），在思维的讲述上都算不上合格&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（当然不是说这些书没有价值，作为知识性的参考书籍，它们将知识整理出系统结构，极大的便利了知识的掌握，就像《什么是数学》所做的工作一样）&lt;/strong&gt;，为什么我这么说呢，因为我发现每每需要寻找对一个算法的解释的时候，翻开这些书，总是直接就看到关于算法逻辑的描述，却看不到整个算法的诞生过程背后的思想。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; line-height: 1.6; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;我们要的不是相对论，而是诞生相对论的那个大脑。我们要的不是金蛋，而是下金蛋的那只鸡。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; line-height: 1.6; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Update(2008-7-24)&lt;/span&gt;&lt;/strong&gt;&lt;span style="max-width: 100%; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;: 收到不少同学的批评，想来这个开头对一些著作的语气过重了，实际上，注意，&lt;/span&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;我完全不否认这些著作的价值，我自己也在通过阅读它们来学习算法，并且有很多收获。这篇文章更多的只是建议除了阅读这些著作之外还需要做的功课。&lt;/span&gt;&lt;/strong&gt;&lt;span style="max-width: 100%; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;此外，对于这类知识讲述（欧几里德）方式的批判西方（尤其是在数学领域）早就有了，早在欧拉和庞加莱的时候，他们俩就极其强调思维的传授，欧拉认为如果不能传授思维，那数学教学是没意义的。而庞加莱本人则更是对数学思维有极大的兴趣和研究&lt;/span&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（我前阵子在讨论组上还转载了一篇庞加莱的著名演讲，就是说这个的，参见这里）。&lt;/span&gt;&lt;/strong&gt;&lt;span style="max-width: 100%; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;我只是在说目前的算法书没有做到思维讲述的层面，因此建议阅读这些书之余应该寻找算法的原始出处，应该寻根究底，多做一些功课，知道算法到底是怎么诞生的，并且我说明了为什么应该知其所以然，有哪些好处（见下文），我还给了几个例子譬如红黑树作者讲红黑树的，g9讲后缀树的，以及Knuth讲heap的。唉，其实挺正统的观点，授人以渔，不管是东方西方都有类似的古老谚语。而我只是从认知科学的角度加了点解释，windstorm称之为“解释文”。而已。可惜被开头的语气搞砸了，算了，既发了也就不改了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; line-height: 1.6; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img border="0" class="" data-ratio="1.0670391061452513" data-type="gif" data-w="179" height="191" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/vpWlcHcJUICIYhLhUV7KP5UQZUpxgzWuMtHnfg5uNiaFFcGvwEfNVRAvm6lNEXGZGY1Uib9L8MbZMmjZ9G4ATWUg/0?" style="box-sizing: border-box; word-wrap: break-word; border: 0px; vertical-align: middle; display: inline; height: 191px !important; width: 179px !important;" title="clip_image002" width="179"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;为什么会这样，其实是有原因的。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;我们在思考一个问题的过程中有两种思维形式：&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;联想：&lt;/strong&gt;这种思维某种程度上可以说是“混乱”的（虽然从一个更根本的层面上说是有规则的），所谓混乱是指很多时候并不确定联想到的做法最终是否可行，这些联想也许只是基于题目中的某个词语、语法结构、问题的某个切片、一些零星局部的信息。这个过程是试探性的。最后也许有很大一部分被证明是不可行的。很多时候我们解决问题用的都是这种思维，简言之就是首先枚举你关于这个问题能够想到的所有你学过的知识，然后一一往上套看看能否解决手头的问题。这种思维方式受限于人脑联想能力本身的局限性。我在《跟波利亚学解题》中就提到了几个例子。联想本身需要记忆提取的线索，所以受到记忆提取线索的制约，如果线索不足，那怎么也联想不起来。而提取线索的建立又取决于当初保存记忆的时候的加工方法（《找寻逝去的自我》里面有阐述），同时，面对一个问题，你能够从中抽取出来的联想线索又取决于你对问题的认识层度/抽象深度，表浅的线索很可能是无关的，导致无效的联想&amp;amp;试错（《Psychology of Problem Solving》里面有阐述）。总之，联想这个过程充满了错误的可能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;演绎&amp;amp;归纳：&lt;/strong&gt;演绎&amp;amp;归纳是另一种思维形式。它们远比联想有根据。其中演绎是严格的，必然的。归纳也是有一定根据的。在面对一个问题的时候，我们有意无意的对问题中的各个条件进行着演绎；譬如福尔摩斯著名的“狗叫”推理——狗+生人=&amp;gt;吠叫 &amp;amp; 昨晚狗没有叫 =&amp;gt; 那个人是熟人。就是一个典型的对问题的各个条件进行演绎的推理过程。还有就是通过对一些特殊形式的观察来进行归纳，试图总结问题中的规律。然而，不幸的是，面对复杂的问题，演绎&amp;amp;归纳也并不总是“直奔”问题的解决方案的。人的思维毕竟只能一下子看到有限的几步逻辑结论，一条逻辑演绎路径是否直奔答案，不走到最后往往是不知道的，只要答案还未出现，我们大脑中的逻辑演绎之树的末端就始终隐藏在黑暗之中。而当最终答案出现了之后，我们会发现，这棵演绎之树的很多分支实际上都并不通往答案。所以，虽然演绎&amp;amp;归纳是一种“必然”的推理，然而却并不“必然”引向问题的结论，它也是试错的，只不过比联想要更为靠谱一些。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;既然认识到，&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;人类解决问题的两大思维方式实际上都是有很大的试错成分的&lt;/strong&gt;（好听一点叫“探索”），那么就不难意识到，对一个问题的思考过程实际上是相当错综复杂的，而且&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;充满了无效分支&lt;/strong&gt;——在思考的过程中我们也会不断的对分支进行评估，做适当的剪枝——因此当我们找到问题的解之后，&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一来思维的漫长繁杂的过程已经在大脑里面淡化得差不多了&lt;/strong&gt;，只有那些引向最终结论的过程会被加“高亮”——我们在思考的过程中本就会不断的抛弃无效的思路，只留下最有希望的思路。简而言之就是最后证明没用或者早先我们就不抱希望的一些想法就被从工作记忆中扔掉了。&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;二来，思考过程是我们的空气和水，而&lt;span style="max-width: 100%; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;“鱼是最后一个感觉到水的”&lt;/span&gt;&lt;/strong&gt;，我们感觉不到思维法则本身的存在，我们只是不知不觉运用它。&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;三来，由于我们的目标是问题的解&lt;/strong&gt;，解才是我们为之兴奋和狂喜的东西，而不是求解的过程，&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;过程只是过程，目的才是目的&lt;/strong&gt;。这就像一个寻宝者，在漫长曲折的寻宝历程之后，在找到宝藏的时候，他会对宝藏感到狂喜（记得阿基米德的“找到了！”吗？）而迫不及待地要展示出来，而漫长的思考本身却成了注脚。我们是有目的的动物，目的达到了，其它的就相对不那么重要了。最后，对于传授知识的人，也许还有&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;其四：感到介绍思维过程是不相干的，&lt;/strong&gt;毕竟思维过程并不是算法问题的解，算法问题的解才是算法问题的解。然而不幸的是，忽视到达解的那个过程实际上却变成了舍本逐末。我们看到的是寥寥数行精妙绝伦的算法，然后仰天长叹自己想不出来啊想不出来。为什么想不出来，因为你不知道那短短数行算法背后经历的事怎样漫长的思考过程，如果问题求解是一部侦探小说，&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;那么算法只是结局而已，而&lt;span style="max-width: 100%; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;思考过程&lt;/span&gt;才是情节。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img border="0" class="" data-ratio="1.1401869158878504" data-type="gif" data-w="214" height="244" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/vpWlcHcJUICIYhLhUV7KP5UQZUpxgzWuqsb5kAiaria08W3gkokOKWozsFGlwc0pQDd5icxLAc8xzXslwoECibTdFQ/0?" style="box-sizing: border-box; word-wrap: break-word; border: 0px; vertical-align: middle; display: inline; height: 244px !important; width: 214px !important;" title="clip_image003" width="214"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;既然如此，也就难怪古往今来算法牛人们算法牛，但却没有几个能真正在讲述的时候还原自己的思维过程的（那个“ 渔”字），手把手的教学生走一遍推理的思路，就可以让学生获得思维过程的训练。金出武雄在《像外行一样思考，像专家一样实践》中说&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;写论文应该写得像侦探小说一样&lt;/strong&gt;，我很赞同。欧几里德式的介绍，除了提供枯燥的知识之外，并没有提供帮助人获得知识的东西——思维（关于对数学书籍的欧几里德式写法的批评其实也是由来已久了，并且有人呼吁了好几种其它的教学方法）。&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;从这方面，我们所尊敬的一些“圣经”级书籍在传道授业上还不如侦探小说，&lt;/strong&gt;前者是罗列一大堆知识，后者则是阐述获得知识的过程——推理&amp;amp;联想。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;然而，我们都是人，人类该有的思维形式，我们难道不是都有吗。既然如此，思维本身又有什么需要一遍遍教的呢？&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;并非如此。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;讲述思维过程而非结果有几个极其重要的价值：&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;内隐化：&lt;/strong&gt;思维法则其实也是知识（只不过它是元知识——是帮助我们获得新知识的知识）；是内隐的记忆。我们在思考的过程中觉察不到思维法则的作用，它们却在幕后实实在在的左右着我们的思维轨迹。要将思维方法内隐化，需要不断练习，就像需要不断练习才能无意识状态下就能骑自行车一样。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;跨情境运用：&lt;/strong&gt;思维法则也是知识记忆，是问题解决策略。既然是记忆，就受到提取线索的制约，这就是为什么当波利亚告诉你要“注意未知数”之后你还是不能真正在所有需要你“注意未知数”的地方都能提醒自己“注意未知数”。很多时候未知数是很隐蔽的，未知数并不会总是头顶一个大帽子上面写着“我是未知数”。所以很多时候缺乏对这个策略的“提醒”线索，这也是为什么&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;你学会了在解决数学问题的时候“注意未知数”却不一定能在解决现实生活中的问题中时刻都能“注意你的未知数”&lt;/strong&gt;（《你的灯亮着吗？》整本书的价值便在于此），因为解数学题和解决生活中问题的场景不一样，不同的环境线索，在你大脑中激发的记忆也不一样。就连问题求解中，不同的问题之间的细小差别也可能导致思维轨迹很大的不同，有时你的注意力会被一个无关线索激发的联想吸引开去，忘记如“注意你的未知数”这样的重要法则。而一本从思维角度来讲问题求解的书则可以一遍遍将你置于不同的问题场景下然后在该提醒你的时候提醒你，让你醒悟到“&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;哦，原来这个时候也应该想到这个啊。”，&lt;/strong&gt;做多了这样的思维演习你就会逐渐从中领悟到某种共性，并将一些思维习惯得到强化，于是终于能够在需要运用某策略的时候能适时的想起来了。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;对问题解的更多记忆提取线索：&lt;/strong&gt;我们平时学习算法时几乎仅止于“理解”，别人把一个方案放在你面前，你去验证一下，心说“哦，不错，这个的确可以工作”。然后就没了。稍微简单一点的算法还好，复杂一点的对于记忆的负担是很大的，这就是为什么有时候我们看到一个绝妙的解法，这个解法看上去不知道从哪里来的，但经过我们的理解，却发现是对的，我们感叹，真巧妙，结果一些天之后，别人问起这个问题，我们说&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;：“唉，那是个多么巧妙的算法啊，但是我只记得它巧妙，却不记得它到底是怎样的了。&lt;/strong&gt;” 为什么？因为在不知其所以然的情况下，算法只是一堆离散的机械步骤，缺少背后的思想的支撑，这些步骤之间就没有一个&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;本质层面上的关联&lt;/strong&gt;（先知亚里士多德早就指出：学习即联接）。所以就跟背历史书也没多大区别。然而，&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;知道了算法是怎样一步步被推导出来的，我们就一下拥有了大量的记忆提取线索：对算法发现过程中的任何一个关键步骤（尤其是本质）的回忆都可能使我们能够自己动手推导出剩余的内容。&lt;/strong&gt;譬如你知道堆(heap)是怎样由朴素的决策树演化而来的，它又是为了解决什么问题的，你即便忘记了具体的细节，也可以自己推导出来。譬如你知道KMP算法的本质在于消除回溯，至于如何消除回溯却并不是那么难以推导的，所以即便忘了也可以借助于大脑的逻辑演绎能力再现出来。譬如你知道Tarjan算法其实只是从后序遍历经过两个优化调整而来的（其中并査集的使用其实只是优化手段——为了能够迅速判断祖先节点是谁——而非算法本质——当然，算法设计的主要任务本来就是通过问题条件中蕴含的知识来“消除冗余计算”和“避免不必要计算”，所以你也可以说并査集的使用是关乎本质的，只不过，知道了为什么需要引入并査集，就会强烈地感觉到一切是顺理成章的了），那这个出了名的绕人的算法也就不那么难以理解和记忆了。譬如你知道排序的本质，就能够对什么是最优排序，为什么它是最优排序有深刻的认识。四两拨千斤。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img data-ratio="0.5081967213114754" data-s="300,640" data-type="jpeg" data-w="244" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_jpg/vpWlcHcJUICIYhLhUV7KP5UQZUpxgzWuITGD6RVhxt3tYas1gofNvoJGgOm2dXpyeHZ2ppJBSKdeaZaCTdcgTA/0?" style="height: 124px !important; box-sizing: border-box !important; word-wrap: break-word !important; width: 244px !important;"/&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;包含了多得多的知识：&lt;/strong&gt;记一个算法，就只有一个算法。一个萝卜一个坑。&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;就好比背99乘法表只能解决乘法问题一样。而记背后的思想，却有助于解决一类问题。&lt;/strong&gt;思想所处的抽象层面往往比到处都是实现细节的算法本身要低，越是低的抽象层次，越是本质，涵盖范围越是广泛。数学的发展本身就体现了这个过程，抽象代数就是非常好的例子。&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;算法诞生过程中的思路往往包含了比实际算法更本质得多的知识，&lt;/strong&gt;实际算法乃至算法的某个特定语言的实现包含了太多表面的不相干知识，它们会阻碍对本质的理解。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;重在分析推理，而不是联想：&lt;/strong&gt;学了一大通算法和数据结构之后的一个&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;副作用&lt;/strong&gt;就是，看到一个问题之后，脑袋里立即不管三七二十一冒出一堆可能相干的数据结构和算法来。联想是强大的思维捷径，在任何时候都会抢占大脑的工作记忆，由不得你控制——比如我问你“如何寻找区间的最大值”，首先进入你的意识的肯定就是学过的那个算法，甚至算法的实现细节都一一跳了出来，也许最先跳出来的还是算法实现中某个最容易弄错的边界细节，或是某个比较tricky的实现技巧！然而这些其实根本不反映一个算法的本质，结果想来想去总是停留在问题的表层。而另一方面，重在思维的传授则可以让人养成从问题本质入手，逐步分析推理的习惯，而不是直接生搬硬套。&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;当然，完全不可否认，联想本身也是极其重要的思维方法，甚至可以说是人类思维&lt;span style="max-width: 100%; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;最重要的&lt;/span&gt;特征。&lt;/strong&gt;很多时候我们并不知道问题的本质是什么，就需要靠联想、类比来领路探索。只不过，养成优先从问题的本质入手进行考察的好习惯绝对是有更大的好处的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;那到底什么样的才算是授人以渔的呢？波利亚的《如何解题》绝对算是一本，他的《数学的发现》也值得一看。具体到算法书，那就不是光看text book就足够的了，为了深入理解一个算法的来龙去脉前因后果，从一个算法中领悟尽量深刻的东西，则需要做到三件事情：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;寻找该算法的原始出处：&lt;/strong&gt;TAOCP作为一个资料库是绝对优秀的，基础的算法只要你能想到的，几乎都可以在上面找到原始出处。查到原始出处之后（譬如一篇paper），就可以去网上搜来看了。因为最初的作者往往对一个方案的诞生过程最为了解。比如经典数据结构中的红黑树是出了名的令人费解的结构之一，但它的作者Sedgewick一张PPT，给你讲得通通透透，比算法导论上的讲法强上数倍。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;原始的出处其实也未必就都推心置腹地和你讲得那么到位：&lt;/strong&gt;前面说过，算法设计出来了之后人们几乎是不会去回顾整个的思维过程细节的，只把直指目标的那些东西写出来。结果就又是一篇欧几里德式的文章了。于是你就迷失在一大堆“定义”、“引理”、“定理”之中了。这种文章看上去整个写得井井有条，其实是把发明的过程整个给颠倒过来了，我一直就想，如果作者们能够将整个的思路过程写出来，哪怕文字多上十倍，我也绝对会比看那一堆定义定理要容易理解得多。话说回来，怎么办？可以再去网上找找，牛人讲得未必比经典教材上的差。那倘若实在找不出好的介绍呢，就只能自己&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;揣摩了。揣摩的重要性&lt;/strong&gt;，是怎么说都不为过的。揣摩的&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一些指导性的问题有&lt;/strong&gt;：为什么要这样（为什么这是好的）？为什么不是那样（有其它做法吗？有更好的做法吗？）？这样做是最好的吗？（为什么？能证明吗？）这个做法跟其它的什么做法有本质联系吗？这个跟这个的区别是什么？问题的本质是什么？这个做法的本质又是什么？到底本质上是什么东西导致了这个做法如此..？与这个问题类似的还有其它问题吗？（同样或类似的做法也适用吗？）等等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;不仅学习别人的思路，整理自己的思路也是极其重要的：&lt;/strong&gt;详见《跟波利亚学解题》的“4. 一个好习惯”和“7. 总结的意义”。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;前一段时间我们讨论组上有不少例子，见这里 &lt;span style="max-width: 100%; color: rgb(114, 172, 227); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;https://del.icio.us/pongbablog/解题  &lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文有帮助？请分享给更多人&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」，修炼编程内功&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1372952352442</guid></item><item><title>名企笔试：微软2014在线测试题(修钟表问题)</title><link>http://chuansong.me/n/1372952452457</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从前有一位老钟表匠，为一个教堂装一只大钟。他年老眼花，把长短针装配错了，短针走的速度反而是长针的12倍。装配的时候是上午6点，他把短针指在“6 ”上，长针指在“12”上。老钟表匠装好就回家去了。人们看这钟一会儿7点，过了不一会儿就8点了，都很奇怪，立刻去找老钟表匠。等老钟表匠赶到，已经是下午7点多钟。他掏出怀表来一对，钟准确无误，疑心人们有意捉弄他，一生气就回去了。这钟还是8点、9点地跑，人们再去找钟表匠。老钟表匠第二天早晨8点多赶来用表一对，仍旧准确无误。请你想一想，老钟表匠第一次对表的时候是7点几分？第二次对表又是8点几分？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;A. 35、42&lt;/p&gt;&lt;p&gt;B. 26、35&lt;/p&gt;&lt;p&gt;C. 38、44&lt;/p&gt;&lt;p&gt;D. 05、10&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(62, 62, 62); font-size: 15px; line-height: 25.6px; white-space: pre-wrap; background-color: rgb(255, 255, 255);"&gt;请通过评论说出你的解答。如果有必要，请介绍一下解题思路。在评论中分享解题思路可以让其他人了解你的想法。你的解答帮助了其他人，其他人的解答也将帮助到你。期待大家参与 ^_^&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;看更多名企笔试题与解题讨论&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓↓&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1372952452457</guid></item><item><title>排序算法性能比较</title><link>http://chuansong.me/n/1371285552324</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：twobin - 博客园&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：http://www.cnblogs.com/twobin/p/3378302.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;所谓排序，即将原来无序的一个序列重新排列成有序的序列。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;排序方法中涉及到稳定性，所谓稳定性，是指待排序的序列中有两个或两个以上相同的项，在排序前和排序后看这些相同项的相对位置有没有发生变化，如果没有发生变化，即该排序方法是稳定的，如果发生变化，则说明该排序方法是不稳定的。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;如果记录中关键字不能重复，则排序结果是唯一的，那么选择的排序方法稳定与否就无关紧要了；如果关键字可以重复，则在选择排序方法时，就要根据具体的需求来考虑选择稳定还是不稳定的排序方法。那么，哪些排序算法是不稳定的呢？&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;“快些选堆”：&lt;/strong&gt;其中“快”指快速排序，“些”指希尔排序，“选”指选择排序，“堆”指堆排序，即这四种排序方法是不稳定的，其他自然都是稳定的。&lt;/p&gt;&lt;h2 style="padding: 10px; font-weight: bold; font-size: 21px; max-width: 100%; white-space: normal; color: white; line-height: 1.5; border-radius: 3px; font-family: 微软雅黑, 宋体, Arial; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(31, 123, 155);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;排序算法分类&lt;/strong&gt;&lt;/h2&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1、插入类排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;即在一个已经有序的序列中，插入一个新的记录，就好比军训排队，已经排好一个纵队，这时来了个新家伙，于是新来的“插入”这个队伍中的合适位置。这类排序有：直接插入排序、折半插入排序、希尔排序。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2、交换类排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;该类方法的核心是“交换”，即每趟排序，都是通过一系列的“交换”动作完成的，如军训排队时，教官说：你比旁边的高，你俩交换下，还比下一个高就继续交换。这类排序有：冒泡排序、快速排序。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;3、选择类排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;该方法的核心是“选择”，即每趟排序都选出一个最小（或最大）的记录，把它和序列中的第一个（或最后一个）记录交换，这样最小（或最大）的记录到位。如军训排队时，教官选出个子最小的同学，让他和第一个位置的同学交换，剩下的继续选择。这类排序有：选择排序、堆排序。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;4、归并类排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;所谓归并，就是将两个或两个以上的有序序列合并成一个新的有序序列。如军训排队时，教官说：每个人先和旁边的人组成二人组，组内排好队，二人组和旁边的二人组组成四人组，内部再排好队，以此类推，直到最后全部同学都归并到一个组中并排好序。这类排序有：（二路）归并排序。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;5、基数类排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;此类方法较为特别，是基于多关键字排序的思想，把一个逻辑关键字拆分成多个关键字，如一副扑克牌，按照基数排序思想可以先按花色排序，则分成4堆，每堆再按A-K的顺序排序，使得整副扑克牌最终有序。&lt;/p&gt;&lt;h2 style="padding: 10px; font-weight: bold; font-size: 21px; max-width: 100%; white-space: normal; color: white; line-height: 1.5; border-radius: 3px; font-family: 微软雅黑, 宋体, Arial; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(31, 123, 155);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;排序算法分析&lt;/strong&gt;&lt;/h2&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;本文主要分析的排序算法有：冒泡排序、选择排序、插入排序、希尔排序、快速排序、归并排序、堆排序。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;交换算法&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;由于大部分排序算法中使用到两个记录相互交换的动作，因此将交换动作单独封装出来，便于各排序算法使用。&lt;/p&gt;&lt;pre style="margin-top: 1.2em; margin-bottom: 1.2em; padding: 0px; max-width: 100%; color: rgb(62, 62, 62); font-size: 1em; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 1.2em; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(248, 248, 242); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(35, 36, 31);"&gt;&lt;span class="" style="max-width: 100%; color: rgb(117, 113, 94); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//交换函数&lt;/span&gt;
 &lt;span class="" style="max-width: 100%; color: rgb(230, 219, 116); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Array&lt;/span&gt;.prototype.swap = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; color: rgb(102, 217, 239);"&gt;function&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(248, 248, 242);"&gt;(i, j)&lt;/span&gt; &lt;/span&gt;{      
     &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; temp = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[i];      
     &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[i] = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j];      
     &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j] = temp;      
 }&lt;/code&gt;&lt;/pre&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;插入排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法思想：每趟将一个待排序的关键字，按照其关键字值的大小插入到已经排好的部分序列的适当位置上，直到插入完成。&lt;/p&gt;&lt;pre style="margin-top: 1.2em; margin-bottom: 1.2em; padding: 0px; max-width: 100%; color: rgb(62, 62, 62); font-size: 1em; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 1.2em; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(248, 248, 242); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(35, 36, 31);"&gt;  &lt;span class="" style="max-width: 100%; color: rgb(117, 113, 94); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//插入排序&lt;/span&gt;
  &lt;span class="" style="max-width: 100%; color: rgb(230, 219, 116); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Array&lt;/span&gt;.prototype.insertionSort = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; color: rgb(102, 217, 239);"&gt;function&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(248, 248, 242);"&gt;()&lt;/span&gt; &lt;/span&gt;{      
      &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; i = &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length; ++i)      
      {      
          &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; j = i, 
              value = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[i];      
          &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;while&lt;/span&gt; (j &amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;] &amp;gt; value)      
          {      
              &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j] = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;];      
             --j;      
         }      
         &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j] = value;      
     }      
 }&lt;/code&gt;&lt;/pre&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; line-height: 24px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;算法性能：&lt;/span&gt;&lt;/strong&gt;&lt;span style="max-width: 100%; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; line-height: 24px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;在内层循环中this[j]=this[j-1]，这句是作为基本操作。考虑最坏情况，即整个序列是逆序的，则其基本操作总的执行次数为n*(n-1)/2，其时间复杂度为O(n*n)。考虑最好情况，即整个序列已经有序，则循环内的操作均为常量级，其时间复杂度为O(n)。因此本算法平均时间复杂度为O(n*n)。算法所需的额外空间只有一个value，因此空间复杂度为O(1)。&lt;/span&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;希尔排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法思想：希尔排序又叫做缩小增量排序，是将待排序的序列按某种规则分成几个子序列，分别对这几个子序列进行插入排序，其中这一规则就是增量。如可以使用增量5、3、1来分格序列，且每一趟希尔排序的增量都是逐渐缩小的，希尔排序的每趟排序都会使得整个序列变得更加有序，等整个序列基本有序了，再使用一趟插入排序，这样会更有效率，这就是希尔排序的思想。&lt;/p&gt;&lt;pre style="margin-top: 1.2em; margin-bottom: 1.2em; padding: 0px; max-width: 100%; color: rgb(62, 62, 62); font-size: 1em; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 1.2em; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(248, 248, 242); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(35, 36, 31);"&gt;&lt;span class="" style="max-width: 100%; color: rgb(117, 113, 94); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//希尔排序&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(230, 219, 116); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Array&lt;/span&gt;.prototype.shellSort = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; color: rgb(102, 217, 239);"&gt;function&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(248, 248, 242);"&gt;()&lt;/span&gt; &lt;/span&gt;{      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; step = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length &amp;gt;&amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;; step &amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;; step &amp;gt;&amp;gt;= &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;)      
    {      
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; i = &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;; i &amp;lt; step; ++i)      
        {      
            &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; j = i + step; j &amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length; j += step)      
            {      
                &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; k = j, value = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j];      
                &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;while&lt;/span&gt; (k &amp;gt;= step &amp;amp;&amp;amp; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[k - step] &amp;gt; value)      
                {      
                    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[k] = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[k - step];      
                    k -= step;      
                }      
                &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[k] = value;      
            }      
        }      
    }      
}&lt;/code&gt;&lt;/pre&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; line-height: 24px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;算法性能：&lt;/span&gt;&lt;/strong&gt;&lt;span style="max-width: 100%; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; line-height: 24px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;希尔排序的时间复杂度平均情况为O(nlogn)，空间复杂度为O(1)。希尔排序的增量取法要注意，首先增量序列的最后一个值一定是1，其次增量序列中的值没有除1之外的公因子，如8，4，2，1这样的序列就不要取（有公因子2）。&lt;/span&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;冒泡排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法思想：通过一系列的“交换”动作完成的，首先第一个记录与第二个记录比较，如果第一个大，则二者交换，否则不交换；然后第二个记录和第三个记录比较，如果第二个大，则二者交换，否则不交换，以此类推，最终最大的那个记录被交换到了最后，一趟冒泡排序完成。在这个过程中，大的记录就像一块石头一样沉底，小的记录逐渐向上浮动。冒泡排序算法结束的条件是一趟排序没有发生元素交换。&lt;/p&gt;&lt;pre style="margin-top: 1.2em; margin-bottom: 1.2em; padding: 0px; max-width: 100%; color: rgb(62, 62, 62); font-size: 1em; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 1.2em; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(248, 248, 242); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(35, 36, 31);"&gt;&lt;span class="" style="max-width: 100%; color: rgb(117, 113, 94); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//冒泡排序&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(230, 219, 116); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Array&lt;/span&gt;.prototype.bubbleSort = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; color: rgb(102, 217, 239);"&gt;function&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(248, 248, 242);"&gt;()&lt;/span&gt; &lt;/span&gt;{      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; i = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;; i &amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;; --i)      
    {      
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; j = &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;; j &amp;lt; i; ++j)      
            &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j] &amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j + &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;]) 
                &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.swap(j, j + &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;);      
    }      
}&lt;/code&gt;&lt;/pre&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; line-height: 24px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;算法性能：最内层循环的元素交换操作是算法的基本操作。最坏情况，待排序列逆序，则基本操作的总执行次数为(n-1+1)*(n-1)/2=n(n-1)/2，其时间复杂度为O(n*n)；最好情况，待排序列有序，则时间复杂度为O(n)，因此平均情况下的时间复杂度为O(n*n)。算法的额外辅助空间只有一个用于交换的temp，所以空间复杂度为O(1)。&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;快速排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法思想：以军训排队为例，教官说以第一个同学为中心，比他矮的站他左边，比他高的站他右边，这就是一趟快速排序。因此，一趟快速排序是以一个枢轴，将序列分成两部分，枢轴的一边比它小（或小于等于），另一边比它大（或大于等于）。&lt;/p&gt;&lt;pre style="margin-top: 1.2em; margin-bottom: 1.2em; padding: 0px; max-width: 100%; color: rgb(62, 62, 62); font-size: 1em; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 1.2em; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(248, 248, 242); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(35, 36, 31);"&gt;&lt;span class="" style="max-width: 100%; color: rgb(117, 113, 94); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//递归快速排序&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(230, 219, 116); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Array&lt;/span&gt;.prototype.quickSort = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; color: rgb(102, 217, 239);"&gt;function&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(248, 248, 242);"&gt;(s, e)&lt;/span&gt; &lt;/span&gt;{      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (s == &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;null&lt;/span&gt;) 
        s = &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;;      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (e == &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;null&lt;/span&gt;) 
        e = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;;      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (s &amp;gt;= e) 
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;return&lt;/span&gt;;      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.swap((s + e) &amp;gt;&amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;, e);      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; index = s - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;;      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; i = s; i &amp;lt;= e; ++i)       
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[i] &amp;lt;= &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[e]) &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.swap(i, ++index);      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.quickSort(s, index - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;);      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.quickSort(index + &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;, e);      
}&lt;/code&gt;&lt;/pre&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法性能：快速排序最好情况下时间复杂度为O(nlogn)，待排序列越接近无序，则该算法效率越高，在最坏情况下时间复杂度为O(n*n)，待排序列越接近有序，则该算法效率越低，算法的平均时间复杂度为O(nlogn)。&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;就平均时间而言，快速排序是所有排序算法中最好的。&lt;/strong&gt;该算法的空间复杂度为O(logn)，快速排序是递归进行的，需要栈的辅助，因此需要的辅助空间比前面几类排序方法要多。&lt;/p&gt;&lt;p class="" style=" margin: 10px auto; padding: 15px 40px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; font-size: 15px ; ;; box-shadow: rgb(170, 170, 170) 0px 0px 8px; line-height: 24px; box-sizing: border-box !important; word-wrap: break-word !important; background: rgb(252, 250, 169); "&gt;快速排序的效率和选取的“枢轴”有关，选取的枢轴越接近中间值，算法效率就越高，因此为了提高算法效率，可以在第一次选取“枢轴”时做文章，如在数据堆中随机选取3个值，取3个值的平均值作为“枢轴”，就如抽样一般。关于具体如何提高快速排序算法的效率，在本文不做详细介绍了，点到为止。（感兴趣的读者可以自行去研究）&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;选择排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法思想：该算法的主要动作就是“选择”，采用简单的选择方式，从头至尾顺序扫描序列，找出最小的一个记录，和第一个记录交换，接着从剩下的记录中继续这种选择和交换，最终使序列有序。&lt;/p&gt;&lt;pre style="margin-top: 1.2em; margin-bottom: 1.2em; padding: 0px; max-width: 100%; color: rgb(62, 62, 62); font-size: 1em; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 1.2em; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(248, 248, 242); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(35, 36, 31);"&gt;&lt;span class="" style="max-width: 100%; color: rgb(117, 113, 94); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//选择排序&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(230, 219, 116); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Array&lt;/span&gt;.prototype.selectionSort = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; color: rgb(102, 217, 239);"&gt;function&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(248, 248, 242);"&gt;()&lt;/span&gt; &lt;/span&gt;{      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; i = &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length; ++i)      
    {      
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; index = i;      
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; j = i + &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;; j &amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length; ++j)      
        {      
            &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j] &amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[index]) 
                index = j;      
        }      
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.swap(i, index);      
    }      
}&lt;/code&gt;&lt;/pre&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法性能：将最内层循环中的比较视为基本操作，其执行次数为(n-1+1)*(n-1)/2=n(n-1)/2，其时间复杂度为O(n*n)，本算法的额外空间只有一个temp，因此空间复杂度为O(1)。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;堆排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法思想：堆是一种数据结构，最好的理解堆的方式就是把堆看成一棵完全二叉树，这个完全二叉树满足任何一个非叶节点的值，都不大于（或不小于）其左右孩子节点的值。若父亲大孩子小，则这样的堆叫做大顶堆；若父亲小孩子大，这样的堆叫做小顶堆。根据堆的定义，其根节点的值是最大（或最小），因此将一个无序序列调整为一个堆，就可以找出这个序列的最大（或最小）值，然后将找出的这个值交换到序列的最后（或最前），这样有序序列元素增加1个，无序序列中元素减少1个，对新的无序序列重复这样的操作，就实现了序列排序。&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;堆排序中最关键的操作是将序列调整为堆，整个排序的过程就是通过不断调整使得不符合堆定义的完全二叉树变为符合堆定义的完全二叉树的过程。&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;堆排序执行过程（大顶堆）：&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;（1）从无序序列所确定的完全二叉树的第一个非叶子节点开始，从右至左，从下至上，对每个节点进行调整，最终将得到一个大顶堆。将当前节点（a）的值与其孩子节点进行比较，如果存在大于a值的孩子节点，则从中选出最大的一个与a交换。当a来到下一层的时候重复上述过程，直到a的孩子节点值都小于a的值为止。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;（2）将当前无序序列中第一个元素，在树中是根节点（a）与无序序列中最后一个元素（b）交换。a进入有序序列，到达最终位置，无序序列中元素减少1个，有序序列中元素增加1个，此时只有节点b可能不满足堆的定义，对其进行调整。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;（3）重复过程2，直到无序序列中的元素剩下1个时排序结束。&lt;/p&gt;&lt;pre style="margin-top: 1.2em; margin-bottom: 1.2em; padding: 0px; max-width: 100%; color: rgb(62, 62, 62); font-size: 1em; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 1.2em; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(248, 248, 242); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(35, 36, 31);"&gt;&lt;span class="" style="max-width: 100%; color: rgb(117, 113, 94); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//堆排序&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(230, 219, 116); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Array&lt;/span&gt;.prototype.heapSort = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; color: rgb(102, 217, 239);"&gt;function&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(248, 248, 242);"&gt;()&lt;/span&gt; &lt;/span&gt;{      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; i = &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length; ++i)      
        {      
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; j = i, k = (j - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;; k &amp;gt;= &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;; j = k, k = (k - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;)      
        {      
            &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[k] &amp;gt;= &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j]) 
                &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;break&lt;/span&gt;;      
            &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.swap(j, k);      
        }      
    }      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; i = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;; i &amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;; --i)      
    {      
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.swap(&lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;, i);      
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; j = &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;, k = (j + &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;; k &amp;lt;= i; j = k, k = (k + &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;)      
        {      
            &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (k == i || &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[k] &amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[k - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;]) 
                --k;      
            &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[k] &amp;lt;= &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j]) 
                &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;break&lt;/span&gt;;      
            &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.swap(j, k);      
        }      
    }      
}&lt;/code&gt;&lt;/pre&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法性能：完全二叉树的高度为[log(n+1)]，即对每个节点调整的时间复杂度为O(logn)，基本操作总次数是两个并列循环中基本操作次数相加，则整个算法时间复杂度为O(logn)*n/2+O(logn)*(n-1)，即O(nlogn)。额外空间只有一个temp，因此空间复杂度为O(1)。&lt;/p&gt;&lt;p class="" style=" margin: 10px auto; padding: 15px 40px; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; font-size: 15px ; ;; box-shadow: rgb(170, 170, 170) 0px 0px 8px; line-height: 24px; box-sizing: border-box !important; word-wrap: break-word !important; background: rgb(252, 250, 169); "&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;堆排序的优点是适合记录数很多的场景&lt;/strong&gt;，如从1000000个记录中选出前10个最小的，这种情况用堆排序最好，如果记录数较少，则不提倡使用堆排序。另外，Hash表+堆排序是处理海量数据的绝佳组合，关于海量数据处理会在之后的博文中介绍到。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;归并排序&lt;/strong&gt;&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法思想：其核心就是“两两归并”，首先将原始序列看成每个只含有单独1个元素的子序列，两两归并，形成若干有序二元组，则第一趟归并排序结束，再将这个序列看成若干个二元组子序列，继续两两归并，形成若干有序四元组，则第二趟归并排序结束，以此类推，最后只有两个子序列，再进行一次归并，即完成整个归并排序。&lt;/p&gt;&lt;pre style="margin-top: 1.2em; margin-bottom: 1.2em; padding: 0px; max-width: 100%; color: rgb(62, 62, 62); font-size: 1em; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 1.2em; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(248, 248, 242); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(35, 36, 31);"&gt;&lt;span class="" style="max-width: 100%; color: rgb(117, 113, 94); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;//归并排序&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(230, 219, 116); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Array&lt;/span&gt;.prototype.mergeSort = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span class="" style="max-width: 100%; color: rgb(102, 217, 239);"&gt;function&lt;/span&gt;&lt;span class="" style="max-width: 100%; color: rgb(248, 248, 242);"&gt;(s, e, b)&lt;/span&gt; &lt;/span&gt;{      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (s == &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;null&lt;/span&gt;) 
        s = &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;0&lt;/span&gt;;      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (e == &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;null&lt;/span&gt;) 
        e = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length - &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;;      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (b == &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;null&lt;/span&gt;) 
        b = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;new&lt;/span&gt; &lt;span class="" style="max-width: 100%; color: rgb(230, 219, 116); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;Array&lt;/span&gt;(&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.length);      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;if&lt;/span&gt; (s &amp;gt;= e) 
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;return&lt;/span&gt;;      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; m = (s + e) &amp;gt;&amp;gt; &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;;      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.mergeSort(s, m, b);      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;.mergeSort(m + &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;, e, b);      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; i = s, j = s, k = m + &lt;span class="" style="max-width: 100%; color: rgb(174, 129, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/span&gt;; i &amp;lt;= e; ++i)       
        b[i] = &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[(k &amp;gt; e || j &amp;lt;= m &amp;amp;&amp;amp; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[j] &amp;lt; &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[k]) ? j++ : k++];      
    &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;for&lt;/span&gt; (&lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;var&lt;/span&gt; i = s; i &amp;lt;= e; ++i) 
        &lt;span class="" style="max-width: 100%; color: rgb(249, 38, 114); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;this&lt;/span&gt;[i] = b[i];      
}&lt;/code&gt;&lt;/pre&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;算法性能：可以选取“归并操作”作为基本操作，“归并操作”即为将待归并表中元素复制到一个存储归并结果的表中的过程，其次数为要归并的两个子序列中元素个数之和。算法总共需要进行logn趟排序，每趟排序执行n次基本操作，因此整个归并排序中总的基本操作执行次数为nlogn，即时间复杂度为O(nlogn)，说明归并排序时间复杂度和初始序列无关。由于归并排序需要转存整个待排序列，因此空间复杂度为O(n)。&lt;/p&gt;&lt;h2 style="padding: 10px; font-weight: bold; font-size: 21px; max-width: 100%; white-space: normal; color: white; line-height: 1.5; border-radius: 3px; font-family: 微软雅黑, 宋体, Arial; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(31, 123, 155);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一些结论&lt;/strong&gt;&lt;/h2&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;（1）快速排序、希尔排序、归并排序、堆排序的平均时间为O(nlogn)，其他的为O(n*n)。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;（2）快速排序、希尔排序、选择排序、堆排序不稳定，其他的稳定。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;（3）经过一趟排序能够保证一个元素到达最终位置的是冒泡排序、快速排序、选择排序、堆排序。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;（4）元素比较次数和原始序列无关的是选择排序、折半插入排序。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;（5）排序趟数和原始序列有关的是交换类排序。&lt;/p&gt;&lt;p style="margin: 10px auto; max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); white-space: normal; line-height: 24px; font-family: 微软雅黑, 宋体, Arial; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;（6）直接插入排序和折半插入排序的区别是寻找插入位置的方式不同，一个是按顺序查找方式，另一个是按折半查找方式。&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;总结了各种排序算法的复杂度与稳定性：&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.528125" data-s="300,640" data-type="png" data-w="640" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/vpWlcHcJUIDUzHaqRL5o6LbSgXqatia2QZgkR70Rqg0B8PzpiacKwP2ouB50SlwDqBibibgF1h8jguZd6ibX2extOCA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; visibility: visible !important; width: 640px !important;" width="auto"/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;《&lt;a csmlink="wPMLJc" href="http://chuansong.me/n/493637452430" style="font-size: 14px;" target="_blank"&gt;面试中的排序算法总结&lt;/a&gt;&lt;/span&gt;&lt;span style="text-decoration: none;"&gt;》&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;《&lt;/span&gt;&lt;a csmlink="JuMLJc" href="http://chuansong.me/n/493627952318" style="font-size: 14px; text-decoration: none;" target="_blank"&gt;&lt;span style="font-size: 14px;"&gt;八大排序算法&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;《&lt;/span&gt;&lt;a csmlink="cuMLJc" href="http://chuansong.me/n/763180052835" style="line-height: 25.6px; white-space: normal; font-size: 14px; text-decoration: none;" target="_blank"&gt;&lt;span style="font-size: 14px;"&gt;八大排序算法的 Python 实现&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;《&lt;/span&gt;&lt;a csmlink="iuMLJc" href="http://chuansong.me/n/1114476952357" style="font-size: 14px; text-decoration: none;" target="_blank"&gt;&lt;span style="font-size: 14px;"&gt;每个程序员都应该收藏的算法复杂度速查表&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;》&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;版权声明&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;博文作者：twobin&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;博文出处：http://www.cnblogs.com/twobin&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 12px; color: rgb(136, 136, 136); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;本文版权归作者和博客园共有，欢迎转载，但须保留此段声明，并给出原文链接，谢谢合作！&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="color: rgb(255, 169, 0); font-size: 14px; line-height: 25.6px; text-align: center;  background-color: rgb(255, 255, 255);"&gt;觉得本文有帮助？请分享给更多人&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」，修炼编程内功&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1371285552324</guid></item><item><title>名企笔试：京东2015校招在线笔试题(人口问题)</title><link>http://chuansong.me/n/1371285652360</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在一个世世代代都重男轻女的村庄里，村长决定颁布一条法律：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;村子里没有生育出儿子的夫妻可以一直生育直到生出儿子为止&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;假设现在村子上的男女比例是1：1，这条法律颁布之后的若干年后村子的男女比例将会（）&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;A. 男的多&lt;/p&gt;&lt;p&gt;B. 女的多&lt;/p&gt;&lt;p&gt;C. 一样多&lt;/p&gt;&lt;p&gt;D. 不能确定&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(62, 62, 62); font-size: 15px; line-height: 25.6px; white-space: pre-wrap; background-color: rgb(255, 255, 255);"&gt;请通过评论说出你的解答。如果有必要，请介绍一下解题思路。在评论中分享解题思路可以让其他人了解你的想法。你的解答帮助了其他人，其他人的解答也将帮助到你。期待大家参与 ^_^&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;看更多名企笔试题与解题讨论&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓↓&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1371285652360</guid></item><item><title>有一堆袜子，如何用最快速高效的算法来给袜子配对？</title><link>http://chuansong.me/n/1368161552972</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); white-space: normal; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="max-width: 100%; line-height: 22.4px; font-size: 14px; color: rgb(0, 0, 0); box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;来源：伯乐在线 - Jerry&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="color: rgb(0, 82, 255); text-decoration: underline; max-width: 100%; font-size: 14px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;a csmlink="Nq5LJc" href="http://chuansong.me/n/1064493452842" style="color: rgb(0, 82, 255); text-decoration: underline; max-width: 100%; font-size: 14px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;" target="_blank"&gt;欢迎投稿，请点击这里查看详情&lt;/a&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="font-size: 14px; background-color: rgb(255, 254, 213); color: rgb(255, 0, 0);"&gt;如果转载，请发送「转载」二字查看说明&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【问题描述】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;昨天我在整理从洗衣店洗干净的一堆袜子，发现我用的方法非常不高效。我用了一个最简单的方法：拿到一只袜子，然后从头到尾去找另外一只袜子。用这种方法需要重复平均超过 n/2*n/4=n2/8 双袜子。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;作为一个计算机科学家，我在想我应该怎么做？我立马就想到了根据尺寸颜色排序来得到一个复杂度为O(NlogN)的方法。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;哈希或其他“非原地”的方法在这里不可取，因为我不可能复制袜子(要是可以的话就好了)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;因此，这个基本问题是：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px;"&gt;给一堆袜子，总数 n 双，即包含 2n 只袜子(袜子是乱放的，即不是成对放的)，假设每只袜子都有一个确定的且能和它配对的袜子，问：如何用最快最有效的算法找出每只袜子与之配对的另一个袜子，并且最多使用对数级别的额外空间？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果答案能够考虑到下面的几个方面，我会非常高兴：(我希望答案能够考虑到下面的几个方面:&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;该算法要同样适用于巨大数量的袜子。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;现实中袜子数量不会很多，我和我配偶的袜子加起来不超过30双(我们俩的袜子非常容易区分，这可以被利用吗？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;该问题是否等同于元素唯一性问题（Element distinctness problem）？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【最佳答案】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;上面提到的排序虽然可以考虑，但是有点浪费。因为我们不需要有序，我们仅仅需要的是具有“相同”属性的东西；&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;因此哈希算法就已经足够了，并且还很快。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt; 从另一个角度来看堆(一堆袜子)是由袜子的所有颜色形成的。所以遍历输入篮子中的所有袜子并，根据颜色再把他们放到不同的篮子。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; 遍历上述新形成的每个篮子，再根据其他的一些特性比如形状将袜子放到第二个集合篮子中。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;递归地运用上述方法，直到将所有袜子都放到一个非常小的篮子中，最后你可以很容易的来处理。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;SQL Server的实现就采用的是这种递归哈希划分方法，当它要进行添加或者合并巨大集合的时候。它将输入划分成了多个集合，而且每个集合都是相互独立的。这个方法对任意数据量和多核CPU都可以得到线性的复杂度。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果你可以找到一个值，使得每个篮子内的元素数量小到可以很轻松处理的程度，那么你就可以不用递归的划分。不幸的是，我认为袜子没有这样的一个属性。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果每个袜子都有一个整数形式的”PairID”，这样就可以很容易依据哈希算法PairID%10，将所有袜子放到10个篮子中。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我认为实际上最有效的划分是：用一个长方形的盒子，长方形的一条边代表颜色，另一条边代表形状。(译者注：运用一个二位数组，一维代表颜色，另一维代表形状)。为什么是一个长方形的盒子？因为这样我们可以只用O(1)的代价，就可以随机访问盒子中的元素。(三维的长方体也可以，但是不合实际)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【答案更新】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;考虑并行处理呢？如果有多个人来共同配对袜子，是否会快点呢？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;有一个最简单的并行策略，就是多个工人共同处理一篮子的袜子，将袜子配对。这只会加快一点点，假设有100个人处理10堆袜子。多人之间的同步成本(比如说手工碰撞和人类沟通)这样会降低效率和速度(见Universal Scalability Law)。这样会导致死锁吗？不会，因为每一个工人在一个时间只会访问一个篮子。只需要一个锁就可以防止死锁。是否发生活锁(Livelocks)则依赖于工人怎么合作去访问篮子。他们可能使用类似网卡那样的二进制指数退避算法（random backoff ），在物理级别上决定哪些可以独占的访问网线。如果这个方法在网卡上有成效，那也同样适用于那些工人。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;.如果每个工人都有自己的一个篮子集合那这个规模就会接近无限大了。工人们可以从一个非常大的篮子中拿走袜子，并且在配对所有袜子时候不需要相互交流同步(因为此时每个人都有自己独有的篮子)。最后再将每个工人所有的篮子合并在一起。我认为如果所有工人能够形成一个聚合树，那么这个问题可以在复杂度O(logW*P) (W代表工人的数量，P是平均每个工人的堆数量)内完成。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;元素唯一性会如何呢？前文也提到了，元素唯一性可以在O(n)内解决。如果你只需要一个分派步骤(我之前推荐分发多次，是因为人计算能力不强的原因。如果你使用md5来进行分发，一次就足够了。因为md5可以把颜色、长度、图案都考虑进去，是一个包含所有属性的完美哈希)，袜子问题同样也可以在O(n)内处理完。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;很明显，所有算法最快也不可能超过O(n)，所以我们达到了最优下界。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;尽管输出可能不完全相等(在一种情况下，只是一个布尔值。另一种情况，是一双袜子)，但是渐进复杂性确实相等的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」，修炼编程内功&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1368161552972</guid></item><item><title>名企笔试：2013网易游戏笔试题(英雄升级问题)</title><link>http://chuansong.me/n/1368161652960</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;英雄每次升级都需要花费宝石，已知英雄每升一级成功的概率如下。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;英雄升级，从0级升到1级，概率100%。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;从1级升到2级，有1/3的可能成功；1/3的可能停留原级；1/3的可能下降到0级；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;从2级升到3级，有1/9的可能成功；4/9的可能停留原级；4/9的可能下降到1级。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;每次升级要花费一个宝石，不管成功还是停留还是降级。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(171, 25, 66);"&gt;&lt;strong&gt;求英雄从0级升到3级平均花费的宝石数目？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(62, 62, 62); font-size: 15px; line-height: 25.6px; white-space: pre-wrap; background-color: rgb(255, 255, 255);"&gt;请通过评论说出你的解答。如果有必要，请介绍一下解题思路。在评论中分享解题思路可以让其他人了解你的想法。你的解答帮助了其他人，其他人的解答也将帮助到你。期待大家参与 ^_^&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(62, 62, 62); font-size: 15px; line-height: 25.6px; white-space: pre-wrap; background-color: rgb(255, 255, 255);"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(62, 62, 62); font-size: 15px; line-height: 25.6px; white-space: pre-wrap; background-color: rgb(255, 255, 255);"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;看更多名企笔试题与解题讨论&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓↓&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png" style="box-sizing: border-box !important; word-wrap: break-word !important; width: auto !important; visibility: visible !important;"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1368161652960</guid></item><item><title>程序观点下的线性代数</title><link>http://chuansong.me/n/1364112652030</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源：Todd Wei 的博客（@文艺复兴记） &lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：http://www.cnblogs.com/weidagang2046/p/linear-algebra-from-programming-perspective.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;线性代数是什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在大学数学学科中，线性代数是最为抽象的一门课，从初等数学到线性代数的思维跨度比微积分和概率统计要大得多。很多人学过以后一直停留在知其然不知 其所以然的阶段，若干年之后接触图形编程或机器学习等领域才发现线性代数的应用无处不在，但又苦于不能很好地理解和掌握。的确，多数人很容易理解初等数学 的各种概念，函数、方程、数列一切都那么的自然，但是一进入线性代数的世界就好像来到了另一个陌生的世界，在各种奇怪的符号和运算里迷失了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.2702702702702703" data-type="png" data-w="370" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVcvzTKtNDheTv8z594pXr9AonLREiaib85pW6IMYfLZ63ofoJMRSqokbibpPblkXjLLaS3GNn7tRooEw/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;我在初接触线性代数的时候简直感觉这是一门天外飞仙的学科，一个疑问在我脑子里浮现出来：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px;"&gt;线性代数到底是一种客观的自然规律还是人为的设计？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果看到这个问题，你的反应是“这还用问，数学当然是客观的自然规律了”，我一点儿都不觉得奇怪，我自己也曾这样认为。从中学的初等数学和初等物理 一路走来，很少人去怀疑一门数学学科是不是自然规律，当我学习微积分、概率统计时也从来没有怀疑过，唯独线性代数让我产生了怀疑，因为它的各种符号和运算 规则太抽象太奇怪，完全对应不到生活经验。所以，我还真要感谢线性代数，它引发了我去思考一门数学学科的本质。其实，不止是学生，包括很多数学老师都不清 楚线性代数到底是什么、有什么用，不仅国内如此，在国外也是这样，国内的孟岩写过《理解矩阵》，国外的Sheldon Axler教授写过《线性代数应该这样学》，但都还没有从根本上讲清楚线性代数的来龙去脉。对于我自己来讲，读大学的时候没有学懂线性代数，反而是后来从编程的角度理解了它。很多人说数学好可以帮助编程，我恰好反过来了，对程序的理解帮助了我理解数学。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本文的目标读者是程序员，下面我就带各位做一次程序员在线性代数世界的深度历险！既然是程序员，在进入线性代数的领域之前，我们不妨先从考察一番程序世界，请思考这样一个问题：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;计算机里面有汇编、C/C++、Java、Python等通用语言，还有Makefile、CSS、SQL等DSL，这些语言是一种客观的自然规律还是人为的设计呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;为什么要问这样一个看起来很蠢的问题呢？因为它的答案显而易见，大家对天天使用的程序语言的认识一定胜过抽象的线性代数，很显然程序语言虽然包含了 内在的逻辑，但它们本质上都是人为的设计。所有程序语言的共同性在于：建立了一套模型，定义了一套语法，并将每种语法映射到特定的语义。程序员和语言实现 者之间遵守语言契约：程序员保证代码符合语言的语法，编译器/解释器保证代码执行的结果符合语法相应的语义。比如，C++规定用new A()语法在堆上构造对象A，你这样写了C++就必须保证相应的执行效果，在堆上分配内存并调用A的构造函数，否则就是编译器违背语言契约。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从应用的角度，我们能不能把线性代数视为一门程序语言呢？答案是肯定的，我们可以用语言契约作为标准来试试。假设你有一个图像，你想把它旋转60 度，再沿x轴方向拉伸2倍；线性代数告诉你，“行！你按我的语法构造一个矩阵，再按矩阵乘法规则去乘你的图像，我保证结果就是你想要的”。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;实际上，线性代数和SQL这样的DSL非常相似，下面来作一些类比：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;模型和语义：SQL是在低级语言之上建立了关系模型，核心语义是关系和关系运算；线性代数在初等数学之上建立了向量模型，核心语义是向量和线性变换&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;语法：SQL为每种语义定义了相应的语法，如select, where, join等；线性代数也定义了向量、矩阵、矩阵乘法等语义概念相应的语法&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;编译/解释：SQL可以被编译/解释为C语言；线性代数相关概念和运算规则可以由初等数学知识来解释&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;实现：我们可以在MySQL、Oracle等关系数据库上进行SQL编程；我们也可以在MATLAB、Mathematica等数学软件上进行线性代数编程&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所以，从应用的角度看，线性代数是一种人为设计的领域特定语言(DSL)，它建立了一套模型并通过符号系统完成语法和语义的映射。实际上，向量、矩阵、运算规则的语法和语义都是人为的设计，这和一门语言中的各种概念性质相同，它是一种创造，但是前提是必须满足语言契约。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;为什么要有线性代数？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可能有人对把线性代数当成一门DSL不放心，我给你一个矩阵，你就把我的图形旋转了60度沿x轴拉伸了2倍，我总感觉不踏实啊，我都不知道你“底 层”是怎么做！其实，这就像有的程序员用高级语言不踏实，觉得底层才是程序的本质，老是想知道这句话编译成汇编是什么样？那个操作又分配了多少内存？别人 在Shell里直接敲一个wget命令就能取下一个网页，他非要用C语言花几十分钟来写一堆代码才踏实。其实，所谓底层和上层只是一种习惯性的说法，并不 是谁比谁更本质。程序的编译和解释本质上是不同模型间的语义映射，通常情况下是高级语言映射为低级语言，但是完全也可以把方向反过来。Fabrice Bellard用JavaScript写了一个虚拟机，把Linux跑在JavaScript虚拟机上，这就是把机器模型往JavaScript模型上映射。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;建立新模型肯定依赖于现有的模型，但这是建模的手段而不是目的，任何一种新模型的目的都为了更简单地分析和解决某一类问题。线性代数在建立的时候，它的各种概念和运算规则依赖于初等数学的知识，但是一旦建立起来这层抽象模型之后，我们就应该习惯于直接利用高层次的抽象模型去分析和解决问题。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;说到线性代数是为了比初等数学更容易地分析和解决问题，下面我们通过一个例子来实际感受一下它的好处：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px;"&gt;给定三角形的顶点(x1, y1), (x2, y2), (x3, y3)，求三角形的面积。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;初等数学中三角形面积最著名的计算公式是area = 1/2 * base * height ，当三角形有一条边恰好在坐标轴上时我们就很容易算出它的面积。但是，假如同样一个三角形我们把坐标轴旋转一下，让它的边不在坐标轴上，怎么办？我们还能得到它的底和高吗？答案肯定是可以的，但是就明显复杂了，而且还要分很多种情况去分别讨论。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;相反，如果我们用线性代数知识来解决这个问题就非常轻松。在线性代数中两个向量a，b的叉积(Cross Product)是一个向量，其方向与a，b垂直，其大小等于a，b构成的平行四边形的面积：&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.7818181818181819" data-type="png" data-w="220" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVcvzTKtNDheTv8z594pXr9AyCjoSlBFsibn7aUjsJsA6benPS8MGOZziaIYjxZrXWsXIw5QE1mtv6Ag/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;我们可以把三角形的边视为向量，所以三角形的面积等于两个边向量的叉积除以二的绝对值：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px;"&gt;&lt;span class="crayon-v" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;area&lt;/span&gt;&lt;span class="crayon-h" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt; = &lt;/span&gt;&lt;span class="crayon-e" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;abs&lt;/span&gt;&lt;span class="crayon-sy" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;(&lt;/span&gt;&lt;span class="crayon-cn" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;1&lt;/span&gt;&lt;span class="crayon-o" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;/&lt;/span&gt;&lt;span class="crayon-cn" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;2&lt;/span&gt;&lt;span class="crayon-h" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt; * &lt;/span&gt;&lt;span class="crayon-e" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;cross_product&lt;/span&gt;&lt;span class="crayon-sy" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;((&lt;/span&gt;&lt;span class="crayon-v" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;x2&lt;/span&gt;&lt;span class="crayon-h" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt; - &lt;/span&gt;&lt;span class="crayon-v" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;x1&lt;/span&gt;&lt;span class="crayon-sy" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;,&lt;/span&gt;&lt;span class="crayon-h" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt; &lt;/span&gt;&lt;span class="crayon-v" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;y2&lt;/span&gt;&lt;span class="crayon-h" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt; - &lt;/span&gt;&lt;span class="crayon-v" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;y1&lt;/span&gt;&lt;span class="crayon-sy" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;),&lt;/span&gt;&lt;span class="crayon-h" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt; &lt;/span&gt;&lt;span class="crayon-sy" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;(&lt;/span&gt;&lt;span class="crayon-v" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;x3&lt;/span&gt;&lt;span class="crayon-h" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt; - &lt;/span&gt;&lt;span class="crayon-v" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;x1&lt;/span&gt;&lt;span class="crayon-sy" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;,&lt;/span&gt;&lt;span class="crayon-h" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt; &lt;/span&gt;&lt;span class="crayon-v" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;y3&lt;/span&gt;&lt;span class="crayon-h" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt; - &lt;/span&gt;&lt;span class="crayon-v" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;y1&lt;/span&gt;&lt;span class="crayon-sy" style=" border: 0px; font-size: 13.3333px; ; ; ; ; ; ; ; "&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：abs表示取绝对值，cross_product表示两个向量的叉积。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这样一个在初等数学里面有点儿小难的问题在线性代数中瞬间搞定！可能有人会说，你直接基于叉积来做，当然简单了，但是叉积本身不是也挺复杂的吗？你把它展开试试看呢？是的，模型的作用就是把一部分复杂性隐藏到模型中，使得模型的使用者可以更加简单地解决问题。曾经有人质疑C++太复杂，C++之父Bjarne Stroustrup这样回答：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px;"&gt;Complexity will go somewhere: if not the language then the application code.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在特定环境下，问题的复杂性是由其本质决定的，C++把一部分的复杂性纳入了语言和标准库，目的是使得应用程序更为简单。当然，并非所有场合C++ 都使得问题更加简单，但是从原理上讲，C++的复杂性是有道理的。除了C++，Java、SQL、CSS等各种语言和框架莫不如是，想象一下，如果不使用 数据库，动不动就自己去做数据存储和管理是多么复杂啊！这样我们就不难理解为什么线性代数要定义叉积这样奇怪的运算了，它和C++把很多常用的算法和容器 纳入STL是同一道理。同样的，甚至你还可以在线性代数中定义自己想要的运算拿来复用。所以，数学一点儿不死板，它和程序一样是活活泼泼的，你理解了它的 来龙去脉就能驾驭自如。说到这里，我们就顺便回答一个很常见的疑惑：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;线性代数的点积、叉积还有矩阵运算都很奇怪，为什么要定义这些运算呢？它们的定义又为什么是这个样子呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;其实，和程序复用一样，线性代数定义点积、叉积和矩阵运算是因为它们的应用非常广，有很大的复用价值，可以作为我们分析和解决问题的基础。比如，很多问题都涉及到一个向量到另一个向量的投影或是求两个向量的夹角，那么就会考虑专门定义点积(Dot Product)这个运算：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.8" data-type="png" data-w="220" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmsns.qpic.cn/mmsns/QtPIxk7nOVcvzTKtNDheTv8z594pXr9AFvvCkwpeZVicJbAicKQQLe4A/0"/&gt;&lt;/p&gt;&lt;p&gt;点积概念的提出属于设计，有发挥创造的余地；一旦设计定了，具体公式就不能随意发挥了，必须符合逻辑，保证它映射到初等数学模型的正确性。这就像一门高级语言可以定义很多概念，什么高阶函数、闭包等等，但是它必须保证映射到底层实现时在执行产生的效果符合其定义的规范。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;线性代数好在哪里？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上面说了，线性代数是一种高层次抽象模型，我们可以采用学习一门程序语言的方法去学习它的语法和语义，但是这一认识不只针对线性代数，它是对每一门数学学科通用的，可能有人会有疑问&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px;"&gt;微积分、概率论也是高层次抽象，那么线性代数这种高层次抽象的特点在哪里呢？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这就问到了根本上，线性代数的核心：向量模型。我们在初等数学中学习的坐标系属于笛卡尔所提出的解析模型，这个 模型很有用，但同时也有很大的缺点。坐标系是人为加上的虚拟参考系，但是我们要解决的问题，比如求面积，图形旋转、拉伸等应用都是和坐标系无关的，建立一 个虚拟的坐标系往往无助于解决问题，刚才三角形面积的例子就是这样。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;向量模型很好地克服了解析模型的缺点，如果说解析模型代表了某种“绝对性”的世界观，那么向量模型就代表了某种“相对性”的世界观，我推荐把向量模型和解析模型看作对立的两种模型。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;向量模型中定义了向量和标量的概念。向量具有大小和方向，满足线性组合法则；标量是只有大小没有方向的量（注：标量的另一种更深刻的定义是在坐标变换中保持不变的量）。向量模型的优点之一是其坐标系无关性， 也就是相对性，它在定义向量和运算规则的时候从一开始就抛开了坐标系的束缚，不管你坐标轴怎么旋转，我都能适应，向量的线性组合、内积、叉积、线性变换等 等运算全部都是坐标系无关的。注意，所谓坐标系无关性不是说就没有坐标系了，还是有的，刚才三角形例子的顶点就是用坐标表示的，只是在解决问题的时候不同 的坐标系不会构成影响。用一个比喻，Java号称平台无关，不是说Java就是空中楼阁，而是说你用Java编程时底层是Linux还是Windows往 往对你没有影响。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;向量模型有什么好处呢？除了刚才三角形面积问题是一个例子，下面我再举一个几何的例子：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px;"&gt;给定三维坐标系中的一点(x0, y0, z0)和一个平面a*x + b*y + c*z + d = 0，求点到平面的垂直距离？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.782258064516129" data-type="gif" data-w="372" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmsns.qpic.cn/mmsns/QtPIxk7nOVcvzTKtNDheTv8z594pXr9AH0TibWSBzHgSEkicZliaLMRNQ/0"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这个问题如果是要从解析几何的角度去解决几乎复杂到没法下手，除非是平面恰好是过坐标轴的特殊情况，但是如果从向量模型考虑就很简单：根据平面方程，平面的法向量(Normal Vector)是v=(a, b, c)，设从平面上任意一点(x, y, z)到(x0, y0, z0)的向量为w，那么通过内积dot_product(w, v)算出w到v的投影向量p，其大小就是(x0, y0, z0)到平面a*x + b*y + c*z + d = 0的垂直距离。这里用到了向量模型的基本概念：法向量，投影向量，内积，整个问题解决过程简洁明快。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;下面再给大家留一道相似的练习题（熟悉机器学习的朋友可能会发现这是线性代数在线性分类中的应用）：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px;"&gt;给定n维空间中的两点(a1, a2, ... an)，(b1, b2, ... bn)和一个超平面c1*x1 + c2*x2 ... + cn*xn + d = 0，请判断两点在超平面的同侧或异侧？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;离开向量，下面我们要请出线性代数的另一个主角：矩阵(Matrix)。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;线性代数定义了矩阵和向量、矩阵和矩阵的乘法，运算规则很复杂，用来做什么也不清楚，很多初学者都不能很好地理解，可以说矩阵是学好线性代数的拦路 虎。遇到复杂的东西，往往需要先避免一头陷入细节，先从整体上把握它。其实，从程序的角度看，无论形式多么奇怪，它无非是一种语法，语法必然对应了语义， 所以理解矩阵的重点在于理解其语义。矩阵的语义不止一种，在不同的环境中有不同的语义，在同一环境中也可以有不同的解读，最常见的包括：1)表示一个线性 变换；2)表示列向量或行向量的集合；3)表示子矩阵的集合。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;矩阵作为一个整体对应的是线性变换语义：用矩阵A乘以一个向量v得到w，矩阵A就代表了v到w的线性变换。比如，如果想要把向量v0按逆时针方向旋转60度得到v'，只需要用旋转变换矩阵（Rotation Matrix)去乘v0就可以了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="1" data-type="gif" data-w="260" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVcvzTKtNDheTv8z594pXr9Avld6wBa8Pt7tib8cF0hEIyMibe4ko0SMqpiapwxEcvbYbCnZ4ic3z0yibfg/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;除了旋转变换，拉伸变换也是一种常见的变换，比如，我们可以通过一个拉伸矩阵把向量沿x轴拉伸2倍（请试着自己给出拉伸矩阵的形式）。更重要的是，矩阵乘法有一个很好的性质：满足结合率。这就意味着可以对线性变换进行叠加，比如，我们可以把“沿逆时针旋转60度”的矩阵M和“沿x轴拉伸2倍”的矩阵N相乘，得到一个新矩阵T来代表“沿逆时针旋转60度并沿x轴拉伸2倍”。这是不是很像我们Shell中把多个命令通过管道进行叠加呢？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上面重点介绍了向量模型的坐标系无关性，除此之外，向量模型的另一优点是：线性性，因而它能用来表示线性关系，下面我们来看一个熟悉的Fibonacci数列的例子：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 14px;"&gt;Fibonacci数列定义为：f(n) = f(n-1) + f(n-2), f(0) = 0, f(1) = 1；问题：输入n，请给出求f(n)的时间复杂度不超过O(logn)的算法。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先，我们构造两个向量v1 = (f(n+1), f(n))和v2 = (f(n+2), f(n+1))，根据Fibonacci数列性质，我们可以得到从v1到v2的递推变换矩阵：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.23404255319148937" data-type="gif" data-w="235" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVcvzTKtNDheTv8z594pXr9ACMYiayu5pjQSibRrnfuSBWCCYVicJKIIWbhsJiboYpLFJVtLA3h6ttsNeQ/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;并进一步得到：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.2744186046511628" data-type="gif" data-w="215" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVcvzTKtNDheTv8z594pXr9ANKRq63NXSIRmwLfoe7IvkGdJ7iajshvpAVmjhqZDB0G9BkyajYL9g9w/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这样就把线性递推问题转化为了矩阵的n次幂经典问题，在O（log n）时间复杂度内解决。除了线性递推数列，初等数学中著名的n元一次方程组问题也可以转化为矩阵和向量乘法形式更容易地解决。这个例子是想说明，凡是满足 线性关系的系统都是向量模型的用武之地，我们往往可以把它转化为线性代数得到简洁高效的解决方案。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;总之，我的体会是向量模型是整个线性代数的核心，向量的概念、性质、关系、变换是掌握和运用线性代数的重点。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本文提出了一种观点：从应用的角度，我们可以把线性代数视为一门特定领域的程序语言。线性代数在初等数学基础上建立了向量模型，定义了一套语法和语义，符合程序语言的语言契约。向量模型具有坐标系无关性和线性性，它是整个线性代数的核心，是解决线性空间问题的最佳模型。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文有帮助？请分享更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」，修炼编程内功&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1364112652030</guid></item><item><title>名企笔试：巨人网络2017校园招聘笔试题(生日问题)</title><link>http://chuansong.me/n/1364112752066</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;一个老师的生日是m月n日，他将m告诉了小林，n告诉了小二，小林说如果我不知道小二肯定也不知道，小二说本来我不知道但是你这么一说我就知道了，小林说这样说我也知道了，其中老师的生日是10个给定的日期：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;A. 3月4日&lt;/p&gt;&lt;p&gt;B. 3月5日&lt;/p&gt;&lt;p&gt;C. 3月8日&lt;/p&gt;&lt;p&gt;D. 6月4日&lt;/p&gt;&lt;p&gt;E. 6月7日&lt;/p&gt;&lt;p&gt;F.  9月1日&lt;/p&gt;&lt;p&gt;G. 9月5日&lt;/p&gt;&lt;p&gt;H. 12月1日&lt;/p&gt;&lt;p&gt;I.  12月2日&lt;/p&gt;&lt;p&gt;J. 12月8日&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;请根据以上信息判断老师的生日。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(62, 62, 62); font-size: 15px; line-height: 25.6px; white-space: pre-wrap; background-color: rgb(255, 255, 255);"&gt;请通过评论说出你的解答。如果有必要，请介绍一下解题思路。在评论中分享解题思路可以让其他人了解你的想法。你的解答帮助了其他人，其他人的解答也将帮助到你。期待大家参与 ^_^&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(62, 62, 62); font-size: 15px; line-height: 25.6px; white-space: pre-wrap; background-color: rgb(255, 255, 255);"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(62, 62, 62); font-size: 15px; line-height: 25.6px; white-space: pre-wrap; background-color: rgb(255, 255, 255);"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;看更多名企笔试题与解题讨论&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓↓&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1364112752066</guid></item><item><title>霍夫曼编码压缩算法</title><link>http://chuansong.me/n/1352279752927</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;来源： 陈皓&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;链接：http://coolshell.cn/articles/7459.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;前两天发布那个rsync算法后，想看看数据压缩的算法，知道一个经典的压缩算法Huffman算法。相信大家应该听说过 David Huffman 和他的压缩算法—— Huffman Code，一种通过字符出现频率，Priority Queue，和二叉树来进行的一种压缩算法，这种二叉树又叫Huffman二叉树 —— 一种带权重的树。从学校毕业很长时间的我忘了这个算法，但是网上查了一下，中文社区内好像没有把这个算法说得很清楚的文章，尤其是树的构造，而正好看到一篇国外的文章《A Simple Example of Huffman Code on a String》，其中的例子浅显易懂，相当不错，我就转了过来。注意，我没有对此文完全翻译。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我们直接来看示例，如果我们需要来压缩下面的字符串：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style="text-align: center;"&gt;“beep boop beer!” &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先，我们先计算出每个字符出现的次数，我们得到下面这样一张表 :&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.9354838709677419" data-type="png" data-w="279" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8Dbl1MDZe6pZN4F5I6prXjE0iaRKiaia1q5ibv8HDicF08AVUVrhyGFnoMk1w/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;然后，我把把这些东西放到Priority Queue中（用出现的次数据当 priority），我们可以看到，Priority Queue 是以Prioirry排序一个数组，如果Priority一样，会使用出现的次序排序：下面是我们得到的Priority Queue：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.13863636363636364" data-type="png" data-w="440" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8DicFapibnlT28ktia24X36LwWibXlJbJO60ymbdKGPVUANOXYJ4f24dTIDQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;接下来就是我们的算法——把这个Priority Queue 转成二叉树。我们始终从queue的头取两个元素来构造一个二叉树（第一个元素是左结点，第二个是右结点），并把这两个元素的priority相加，并放回Priority中（再次注意，这里的Priority就是字符出现的次数），然后，我们得到下面的数据图表：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.36739659367396593" data-type="png" data-w="411" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8DPiaaYicw90HbRNLBouz6HJpHTHo6O1sHgasSy3l6GVIJX2NoagfXpuQQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;同样，我们再把前两个取出来，形成一个Priority为2+2=4的结点，然后再放回Priority Queue中 :&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.6184615384615385" data-type="png" data-w="325" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8D2sZK7aUYUiaO8DmtXzOiaZe7cdTeenuPJmNUQFBhTm3ic3zdSHibwzAtPQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;继续我们的算法（我们可以看到，这是一种自底向上的建树的过程）：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.6779141104294478" data-type="png" data-w="326" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8DXfs3kZz7OEcW4KFERojG32z9fz8dkqeaEqlVogYf8L1VyoD5rWRNGQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.5965417867435159" data-type="png" data-w="347" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8DpicYKcUxibwwzRKRCQRlLPvqfON3NZy3BFtf6EMHp2X93ibcN0sIANxiaA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.7936046511627907" data-type="png" data-w="344" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8DwRQ1ciad4nlBTPk9wP0GkgQc7fUBRicwtQ0siaVic8rho9zxhRomgbmBnA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最终我们会得到下面这样一棵二叉树：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.672566371681416" data-type="png" data-w="452" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8DnIMjZNh8MUC4uZjEN08x7SI9EcsfuRuPPHMjqTSx06CZyudL4BUqicg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;此时，我们把这个树的左支编码为0，右支编码为1，这样我们就可以遍历这棵树得到字符的编码，比如：‘b’的编码是 00，’p’的编码是101， ‘r’的编码是1000。我们可以看到&lt;strong&gt;出现频率越多的会越在上层，编码也越短，出现频率越少的就越在下层，编码也越长&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.672566371681416" data-type="png" data-w="452" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8DqUB57UJc6G7e3BI5UKBLzpoagWMiaDqUTz0pE2WibThSLtnictQHjygww/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最终我们可以得到下面这张编码表：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="" data-ratio="0.9172413793103448" data-type="png" data-w="290" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz_png/QtPIxk7nOVdiayLntPkjOUdyxpHA4sa8D780P39KWyM44tI1qUSEic5k0Q8VnAoYNV8ptic6WhBDG4PnorZovUMfQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这里需要注意一点，当我们encode的时候，我们是按“bit”来encode，decode也是通过bit来完成，比如，如果我们有这样的bitset “1011110111″ 那么其解码后就是 “pepe”。所以，我们需要通过这个二叉树建立我们Huffman编码和解码的字典表。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这里需要注意的一点是，我们的Huffman对各个字符的编码是不会冲突的，也就是说，&lt;strong&gt;不会存在某一个编码是另一个编码的前缀&lt;/strong&gt;，不然的话就会大问题了。因为encode后的编码是没有分隔符的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;于是，对于我们的原始字符串  beep boop beer!&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;其对就能的二进制为 : 0110 0010 0110 0101 0110 0101 0111 0000 0010 0000 0110 0010 0110 1111 0110 1111 0111 0000 0010 0000 0110 0010 0110 0101 0110 0101 0111 0010 0010 0001&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我们的Huffman的编码为： 0011 1110 1011 0001 0010 1010 1100 1111 1000 1001&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从上面的例子中，我们可以看到被压缩的比例还是很可观的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;觉得本文有帮助？请分享更多人&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」，修炼编程内功&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1352279752927</guid></item><item><title>名企笔试：滴滴2016校招测评题(建水库问题)</title><link>http://chuansong.me/n/1352279852957</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;已知每个城市的用水需求相同，每月水库的进水速率恒定不变。现有一座水库供水，如果供应10个城市的话，一个月水库就会枯竭；如果供应8个城市的话，一个半月水库就会枯竭。当前城市化进程不断加快，新的城市不断产生，为了能够持续满足12个城市的供水，还至少需要建设几个这样的水库？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;A. 2&lt;/p&gt;&lt;p&gt;B. 3&lt;/p&gt;&lt;p&gt;C. 4&lt;/p&gt;&lt;p&gt;D. 5&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;请通过评论说出你的解答。如果有必要，请介绍一下解题思路。在评论中分享解题思路可以让其他人了解你的想法。你的解答帮助了其他人，其他人的解答也将帮助到你。期待大家参与 ^_^&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="max-width: 100%; font-size: 15px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;关注「算法爱好者」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;看更多名企笔试题与解题讨论&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;↓↓&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1352279852957</guid></item><item><title>数学是成就卓越开发人员的必备技能</title><link>http://chuansong.me/n/1340828352448</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;p style="white-space: normal; text-align: center;"&gt;&lt;strong style="color: rgb(255, 0, 0);"&gt;&lt;span style="color: rgb(192, 0, 0);"&gt;&lt;strong style="color: rgb(0, 176, 80); border: 0px; margin: 0px; padding: 0px;"&gt;&lt;strong&gt;&lt;span style="color: rgb(192, 0, 0);"&gt;&lt;strong&gt;&lt;span style="color: rgb(0, 176, 240);"&gt;&lt;span style="color: rgb(255, 0, 0); font-size: 14px; margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;(点击&lt;/span&gt;&lt;span style="font-size: 14px; margin: 0px; padding: 0px; max-width: 100%; color: rgb(0, 112, 192); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;上方公号&lt;/span&gt;&lt;span style="color: rgb(255, 0, 0); font-size: 14px; margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;，可快速关注)&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p style="margin-top: 0px; margin-bottom: 0px; padding: 0px; max-width: 100%; min-height: 1em; white-space: pre-wrap; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(0, 176, 80); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;英文：Alan Skorkin&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin-top: 0px; margin-bottom: 0px; padding: 0px; max-width: 100%; min-height: 1em; white-space: pre-wrap; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(0, 176, 80); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;译者：伯乐在线 - 黄利民&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin-top: 0px; margin-bottom: 0px; padding: 0px; max-width: 100%; min-height: 1em; white-space: pre-wrap; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(0, 176, 80); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;网址：http://blog.jobbole.com/444/&lt;/span&gt;&lt;/p&gt;&lt;p style="margin-top: 0px; margin-bottom: 0px; padding: 0px; max-width: 100%; min-height: 1em; white-space: pre-wrap; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 14px; color: rgb(0, 176, 80); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;点击“阅读原文”，可查看本文网页版&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="white-space: normal;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;【伯乐在线导读】：Alan Skorkin 是一名软件开发人员，他在博客中分享对软件开发相关的心得，其中有很多优秀的文章，本文就是其中一篇，作者认为：成为优秀的开发人员，可以没有数学技能，但成为卓越的开发人员，不能没有。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;em&gt;&lt;img data-ratio="1" data-s="300,640" data-type="jpeg" data-w="140" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/2A8tXicCG8ylnDfIExww7fMQwz8R4icap2t7JQPy6NY4PbiaTdWFGkG07DRSa5m4n6ia4YC1gohntYEwVCedticQYBg/0?wx_fmt=jpeg" style="text-align: center; white-space: normal;"/&gt;&lt;/em&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;em&gt;Alan Skorkin&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;不久之前，我开始思索数学。你也知道，到目前为止，我编写软件也有几年了。老实说，在我的工作当中，我还没有发现有关数学的需求。我要学习和掌握许多新东西，包括语言、框架、工具、流程、沟通技巧和可以用来做你想到的任何东西的库。在我学的新东西中，数学并没有帮助。当然了，这不足为奇，我所做的工作，大部分都是 CRUD 类型（编注：CRUD是Create、Read、Update和Delete的首字母缩写）。在互联网时代，这也是我们多数开发人员所做的大部分工作。如果你做顾问，你主要是在做网站；你在大公司上班，你主要是在做网站；你做自由职业者，你主要是在做网站。我很清楚我是在总结，但请忍耐一下，我跑偏了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最后你对此有些厌倦了，我也如此。别误会我，这可以是项有趣并有挑战性的工作，有机会解决问题，并和有趣的人一起互动，在工作时间做这个，我高兴。但在我个人时间中搭建更多的网站，这种想法已经稍微失去其光泽，于是你开始寻找一些更加有趣/酷/好玩的事情，我再一次地也如此。（所以，）有些人转移到前台和图像技术，比如视觉反馈就比较诱人。但我并不是其中一员（虽然我和别人一样都喜爱前台，但它真的不能让我兴奋。）这就是当我遇到一些搜索相关的问题时，我为什么决定深入挖掘的原因了。这把我带回到故事的一开始，因为一旦我抓到第一把充满搜索的铁铲，一旦我“撞到”数学时，我才真正意识到，我的技能恶化的程度。数学并不像骑自行车，长期不用就会忘记。&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(192, 0, 0); font-size: 20px;"&gt;&lt;strong&gt;拓展视野&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;多对搜索的一些了解，让我接触到各种有趣的软件和计算机科学相关的事情和问题（包括机器学习、自然语言处理、算法分析等）。现在，在我接触的各方面，我都看到了数学，所以我更加强烈地感觉到自己技能缺乏。我已经意识到，如果你想利用计算机做又酷又有趣的事，你需要达到一个像样的数学能力水平。除了上面说的三个，还有一些，如：密码学、游戏人工智能、压缩算法、遗传算法、3D图形算法等。在理解之后，如果你想要编写我们正讨论的那些库和工具，而不是仅仅使用它们（即：做一个“消费者”，而不是“生产者”），那你需要数学（知识）来理解这些领域背后的你能应用的理论。即便如果你不想编写任何库，当你真正理解事情的原理，你在构建软件时，它能给带来更多的成就感，绝非仅仅把它们连起来，就希望它们去做任何它们应该能做的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;虽然大多数开发人员会告诉你，他们在工作中从来不需要数学(就像我前面说的 :))，但是经过一番沉思后，我有了个想法（突发灵感）：就是反马斯洛的锤子理论。你知道这个吧，当你有一把锤子，你会把一切看成是钉子。（注：伯乐在线编译的《&lt;a csmlink="R6JzJc" href="http://chuansong.me/n/1583211" target="_blank"&gt;每位开发人员都应铭记的10句编程谚语&lt;/a&gt;》中的第 7 条就是锤子理论。）这是一个隐喻，也就是说人们乐于使用自己钟爱的工具，即便这并不是手中工作的最好工具。数学就是我们的一个相反的锤子。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我们知道有这个锤子，但并不太子的如何使用。所以，当我们遇到问题，我们的锤子是解决问题的最佳工具时，我们却从未认真考虑过它。对我祖父而言，螺丝刀够用了；对我父亲来说，也很好；对我来说，同样如此。谁还需要锤子？数学的技巧在于，人们惧怕它，甚至大多数程序员，你认为我们不会怕，但我们确实怕。所以，我们把自己的话转变为可以自我实现的预言。这并不是我在工作中不需要数学，这只是我真的不知道，即便我知道，我也不知道如何使用它。所以我并没有使用它，当缺少某些东西时，如果你长期将就，不久后你甚至不会察觉它的缺失，所以对其需要更少了，这是自我实现的预言。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;针对思索接近我们内心世界，这里有一些的“粮食”——学习新技术。作为一名协作世界的开发人员，你努力成为一名通才型的专才（如果你不知道我在说什么，可以看看这本书《The Passionate Programmer:Creating A Remarkable Career In Software Development》）。你尽力在多数事情上做的体面，并在有些事情上做的优秀。但是你擅长什么？一般来说，人们会选择一两个框架或一门语言，然后与之相伴，这样是不错。但是要看到，框架和较小范围内的语言都有保质期。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果你要做一名Hibernate、Rails或Struts专家（使用struts的朋友现在真的应该担忧一下了），当新框架取代当前的框架时，你在几年内将不得不重新洗牌。所以，这也许是你真正的最好投资，但也可能不是。另一方面，数学是不会很快消逝的。在我们领域中所做的一切，都是建立在稳固的数学原理之上（算法和数据结构正是这样的例证），所以用在数学上的时间绝不是浪费，这不可辩论。再重复一次，总结起来就是：要真正理解东西，而不是非死记硬背地使用。当涉及到计算机时，数学能有助你更深入地理解你所做的。事实上，正如Steve Yegge所言，作为程序员我们所做的事很像数学，只是我们甚至都没有意识到这一点。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(192, 0, 0); font-size: 20px;"&gt;&lt;strong&gt;什么/谁造就了与众不同？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="1.2914798206278026" data-s="300,640" data-type="jpeg" data-w="223" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/2A8tXicCG8ylnDfIExww7fMQwz8R4icap250ommJp73xms18IVkC6Fj0C0ic5B8jsy5QuNwX5UdGUZkaiaW076GNqQ/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;em&gt;（高德纳）&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;你不相信我？那请你想想：在我们的领域中，几乎人人普遍尊敬的卓越程序员同样也是大数学家。我是说像高德纳、Edsger W. Dijkstra、Noam Chomsky、Peter Norvig（Google研究院总监）这一类人。但是这些家伙并非真正的开发人员，他们是计算机科学家，这能真正算数么？我再一次觉得，在我们写出的纯代码行数能达到这些人所写的十分之一之前，也许我们不应该再去讨论这些问题了。当然，不当科学家，你也能获得成功和名誉，大家都听过Gavin King（Hibernate 创始人）或 DHH（Ruby on Rails 创始人）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这还挺真实的（是不是有很多人听说过 Gavin 和 DHH，虽然这还有待确认），但是“听说过”和普遍尊敬是不同的，这种差别就如同创建一个框架，和在你的领域中为人类知识所做出的全部重大推动两者之间的差别。（不要误会我，我尊重 Gavin 和 DHH，他们所做的事，远远超过我，但是这不能影响我所说的事实）。所有的这些相关么？我不知道，可能不相干，但在我们反省之后，我想无论如何要把它“扔掉”。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如今的世界正充满着数据，每日都增加更多的数据。而在以前，我们在相对少量的数据下享受工作。我们今日编写的软件必须高效处理海量数据。甚至在协作世界，这也是愈加明显的事实。这也就是说，你更不可能只“启动东西”，就想看其如何运作，因为你要处理的数据量将困住你，除非你非常了解它。我的预测是：算法分析将对于 Lay Programmer 越来越重要，以前不仅如此，以后也更加如此。如果要成为一位体面的算法设计专家，需要什么？你猜到了，是一些数学技能。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(127, 127, 127);"&gt;（译注：Lay Programmer是指“那些编程的时候，没把自己当程序员的童鞋”，详情请见 Martin Fowler 的解释。我暂未想到合适的简短叫法，如果哪位朋友知道，请在评论中说明。）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所以，我该怎么办呢？嗯，我已决定一点一点地建立或恢复我的数学技能，虽然还有大量的书要看，大量的代码要写，但我会尽力抽时间放在数学上，这就像锻炼，时不常的锻炼总聊胜于无（再次引用Steve Yegge的话）。说到数学，我袖中当然还藏有一张王牌，它对我有利，但很幸运，有这个博客，我们都会受益的。（我知道你好奇，一会告诉你 :) ）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 20px; color: rgb(192, 0, 0);"&gt;你在5年内的规划如何？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img data-ratio="0.668" data-s="300,640" data-type="jpeg" data-w="500" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/2A8tXicCG8ylnDfIExww7fMQwz8R4icap206aUI7Ca1Q4xNOqMLHiaFhNfPwfXxicyWibcDia27PTIIZ310kbrcTVaTQ/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;em&gt;（极限水上滑板）&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;那么，数学对所有事都有利么？这事先很难说，我对我现在的处境十分满意，或许你也如此，但这都和潜能有关系。如果你是协作世界的一名开发人员，你真的不需要数学。如果你乐于你的整个职业生涯是这样的：在工作时间中做企业CRUD应用，或在闲暇时间滑翔跳伞或极限水上滑板（或其他各种时髦的极客运动），也分配较多时间在Spring、Hibernate、Visual Studio或其它东西上。（其实）那些特殊的职位并没有真正限制你的潜力，你能变得极具价值，甚至可深入追求。但是如果你想为多样化的职业生涯而奋斗，想要有能力尝试几乎所有涉及代码的事，从信息检索到Linux内核。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;总之，如果你想成为一个开发人员、程序员和计算机科学家的完美组合，你必须确保你的数学技能达到标准（哎，你还是可以去玩滑翔跳伞或极限水上滑板）。长话短说，如果你在数学方面有一定天赋，那在软件开发领域中没有向你关着的门，如果没有，那一切都是CRUD型工作！&lt;/p&gt;&lt;p style="white-space: normal;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="white-space: normal;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="white-space: normal;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(247, 150, 70); font-size: 24px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;【今日推荐↓】&lt;/span&gt;&lt;/p&gt;&lt;hr style="white-space: normal;"/&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;微信号：&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(0, 176, 80);"&gt;&lt;strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;jobbole&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;img data-ratio="1" data-s="300,640" data-type="png" data-w="150" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/KovAgJ2aWybjrfwneTrTaxWVkBqEyzsJs3la5T67WqxicBymeicH9mStDRicR0rxtbORmzR8vFybQBSFmKSUjibiacg/0" style=""/&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(255, 0, 0); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;（长按上图，可自动识别二维码）&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(255, 0, 0); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;「伯乐在线」分享来伯乐在线博客的热门和经典文章，精华中的精华，常看伯乐在线博客的读者不能错过哦~&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr style="white-space: normal;"/&gt;&lt;p style="white-space: normal;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; line-height: 25.6000003814697px; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;微信号：&lt;/span&gt;&lt;strong style="margin: 0px; padding: 0px; max-width: 100%; line-height: 25.6000003814697px; font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(0, 112, 192); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;iProgrammer&lt;/span&gt;&lt;/strong&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(255, 0, 0); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;img data-ratio="1" data-w="150" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/2A8tXicCG8ylXT13C8RxaOWgtsSad5Yamiac8N3fFncmiboEhFIFD0yybMdyyJB7HMEcEsY42vtsBD6juSsVesB5w/0?wx_fmt=jpeg" style="text-align: center; white-space: normal; margin: 0px; padding: 0px; box-sizing: border-box !important; word-wrap: break-word !important; width: auto !important; visibility: visible !important;" width="auto"/&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; color: rgb(0, 176, 80); font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;(长按上图，弹出“识别二维码”后可快速关注)&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal;"&gt;&lt;br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="white-space: normal;"&gt;「程序员的那些事」是最受欢迎的程序员、IT 技术和 IT 行业相关的微信公众号之一，分享最新编程技术、经典技术分享、IT 行业动态、热门编程课程、高薪技术职位、程序员的日常，更有难得一见的 IT 相亲活动。&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;--------&lt;strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;-----------------&lt;/strong&gt;&lt;strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;-------------&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;商务合作QQ：2302462408&lt;/span&gt;&lt;br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;招聘和猎头服务QQ：2302462408&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal; text-align: center;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;投稿网址：&lt;span style="font-size: 14px; text-align: center;"&gt;top.jobbole.com&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="white-space: normal;"&gt;&lt;span style="margin: 0px; padding: 0px; max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="font-size: 14px; text-align: center;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1340828352448</guid></item><item><title>解题：乱序数组</title><link>http://chuansong.me/n/1340828452421</link><description>&lt;div class="rich_media_content " id="js_content"&gt;
&lt;h2 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;（点击&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; line-height: 22.4px; color: rgb(0, 128, 255); box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;上方公众号&lt;/span&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(255, 41, 65); line-height: 22.4px; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;，可快速关注）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;题目：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;有一个乱序数组，例如：[ &lt;span style="color: rgb(46, 46, 46); font-family: 'Microsoft YaHei', 宋体, Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px; line-height: 24px; background-color: rgb(255, 255, 255);"&gt;3,1,4,8,2,10,6 &lt;/span&gt;]，您能不能删除最少的数字，让剩下的数字使升序的？请输出删除最少的数字的数量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;样例如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;输入：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;3 1 4 8 2 10 6&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;输出：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 16px;"&gt;3&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;【解题提示】：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;可以在微信评论给出你的&lt;span style="max-width: 100%; color: rgb(255, 76, 65); box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 254, 213);"&gt;解题思路&lt;/span&gt;；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;由于微信评论&lt;span style="max-width: 100%; color: rgb(255, 76, 65); text-decoration: underline; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;不支持&lt;/span&gt;&lt;span style="max-width: 100%; text-decoration: underline; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;分段和代码高亮&lt;/span&gt;，可通过这个网址（http://group.jobbole.com/26993/），在伯乐小组提交代码；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;如果你想看其他朋友的代码，请点击「阅读原文」。不过建议你自己先多思考；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); font-size: 20px; line-height: 1.6; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;关注「算法爱好者」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;挑战更多算法题&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; color: rgb(255, 169, 0); box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;↓&lt;span style="max-width: 100%; line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important;"&gt;↓↓&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img data-ratio="0.9166666666666666" data-type="png" data-w="600" src="http://read.html5.qq.com/image?src=forum&amp;amp;q=5&amp;amp;r=0&amp;amp;imgflag=7&amp;amp;imageUrl=http://mmbiz.qpic.cn/mmbiz/QtPIxk7nOVcFcJfc3l7xpLl48d2YHYK16VobcpfoBx3z2ibBOS7sNeAumibnmK2zVwxLMibVZBqyL5j7u7TkTfPOA/640?wx_fmt=png" style="line-height: 25.6px; box-sizing: border-box !important; word-wrap: break-word !important; overflow-wrap: break-word !important; visibility: visible !important; width: auto !important;" width="auto"/&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid isPermaLink="false">http://chuansong.me/n/1340828452421</guid></item></channel></rss>